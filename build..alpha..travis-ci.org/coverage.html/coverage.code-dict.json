{"/home/travis/build/npmtest/node-npmtest-exceljs/test.js":"/* istanbul instrument in package npmtest_exceljs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-exceljs/lib.npmtest_exceljs.js":"/* istanbul instrument in package npmtest_exceljs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_exceljs = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_exceljs = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-exceljs/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-exceljs && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_exceljs */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_exceljs\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_exceljs.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_exceljs.rollup.js'] =\n            local.assetsDict['/assets.npmtest_exceljs.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_exceljs.__dirname +\n                    '/lib.npmtest_exceljs.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/excel.js":"/**\r\n * Copyright (c) 2014-2017 Guyon Roche\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:</p>\r\n * \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n * \r\n */\r\n\r\nmodule.exports = require('./lib/exceljs.nodejs');","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/exceljs.nodejs.js":"var setConfigValue = require('./config/set-value');\r\nsetConfigValue('promise', require('promish'), false);\r\n\r\nvar ExcelJS = {\r\n  Workbook: require(\"./doc/workbook\"),\r\n  ModelContainer: require(\"./doc/modelcontainer\"),\r\n  stream: {\r\n    xlsx: {\r\n      WorkbookWriter: require(\"./stream/xlsx/workbook-writer\"),\r\n      WorkbookReader: require(\"./stream/xlsx/workbook-reader\")\r\n    }\r\n  },\r\n  config: {\r\n    setValue: require('./config/set-value')\r\n  }\r\n};\r\n\r\nObject.assign(ExcelJS, require(\"./doc/enums\"));\r\n\r\nmodule.exports = ExcelJS;","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/config/set-value.js":"'use strict';\r\n\r\nvar PromishLib = require('../utils/promish');\r\n\r\nfunction setValue(key, value, overwrite) {\r\n  if (overwrite === undefined) {\r\n    // only avoid overwrite if explicitly disabled\r\n    overwrite = true;\r\n  }\r\n  switch(key.toLowerCase()) {\r\n    case 'promise':\r\n      if (!overwrite && PromishLib.Promish) return;\r\n      PromishLib.Promish = value;\r\n      break;\r\n  }\r\n}\r\n\r\nmodule.exports = setValue;","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/utils/promish.js":"'use strict';\r\n\r\nmodule.exports = {\r\n  Promish: null\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/doc/workbook.js":"/**\r\n * Copyright (c) 2014 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar Worksheet = require('./worksheet');\r\nvar DefinedNames = require('./defined-names');\r\nvar XLSX = require('./../xlsx/xlsx');\r\nvar CSV = require('./../csv/csv');\r\n\r\n// Workbook requirements\r\n//  Load and Save from file and stream\r\n//  Access/Add/Delete individual worksheets\r\n//  Manage String table, Hyperlink table, etc.\r\n//  Manage scaffolding for contained objects to write to/read from\r\n\r\nvar Workbook = module.exports = function() {\r\n  this.created = new Date();\r\n  this.modified = this.created;\r\n  this.properties = {};\r\n  this._worksheets = [];\r\n  this.views = [];\r\n  this._definedNames = new DefinedNames();\r\n};\r\n\r\nWorkbook.prototype = {\r\n  get xlsx() {\r\n    return this._xlsx || (this._xlsx = new XLSX(this));\r\n  },\r\n  get csv() {\r\n    return this._csv || (this._csv = new CSV(this));\r\n  },\r\n  get nextId() {\r\n    // find the next unique spot to add worksheet\r\n    var i;\r\n    for (i = 1; i < this._worksheets.length; i++) {\r\n      if (!this._worksheets[i]) {\r\n        return i;\r\n      }\r\n    }\r\n    return this._worksheets.length || 1;\r\n  },\r\n  addWorksheet: function(name, options) {\r\n\r\n    var id = this.nextId;\r\n    name = name || 'sheet' + id;\r\n    \r\n    // if options is a color, call it tabColor (and signal deprecated message)\r\n    if (options) {\r\n      if (typeof options === 'string') {\r\n        console.trace('tabColor argument is now deprecated. Please use workbook.addWorksheet(name, {properties: { tabColor: { argb: \"rbg value\" } }');\r\n        options = {\r\n          properties: {\r\n            tabColor: {argb: options}\r\n          }\r\n        };\r\n      } else if (options.argb || options.theme || options.indexed) {\r\n        console.trace('tabColor argument is now deprecated. Please use workbook.addWorksheet(name, {properties: { tabColor: { ... } }');\r\n        options = {\r\n          properties: {\r\n            tabColor: options\r\n          }\r\n        };\r\n      }\r\n    }\r\n\r\n    var worksheetOptions = Object.assign({}, options, {\r\n      id: id,\r\n      name: name,\r\n      workbook: this\r\n    });\r\n\r\n    var worksheet = new Worksheet(worksheetOptions);\r\n\r\n    this._worksheets[id] = worksheet;\r\n    return worksheet;\r\n  },\r\n  _removeWorksheet: function(worksheet) {\r\n    delete this._worksheets[worksheet.id];\r\n  },\r\n  removeWorksheet: function(id) {\r\n    var worksheet = this.getWorksheet(id);\r\n    if (worksheet) {\r\n      worksheet.destroy();\r\n    }\r\n  },\r\n\r\n  getWorksheet: function(id) {\r\n    if (id === undefined) {\r\n      return this._worksheets.find(function(worksheet) { return worksheet; });\r\n    } else if (typeof(id) === 'number') {\r\n      return this._worksheets[id];\r\n    } else if (typeof id === 'string') {\r\n      return this._worksheets.find(function(worksheet) {\r\n        return worksheet && worksheet.name == id;\r\n      });\r\n    } else {\r\n      return undefined;\r\n    }\r\n  },\r\n\r\n  get worksheets() {\r\n    // return a clone of _worksheets\r\n    return this._worksheets.filter(Boolean);\r\n  },\r\n\r\n  eachSheet: function(iteratee) {\r\n    this._worksheets.forEach(function(sheet) {\r\n      iteratee(sheet, sheet.id);\r\n    });\r\n  },\r\n\r\n  get definedNames() {\r\n    return this._definedNames;\r\n  },\r\n\r\n  clearThemes: function() {\r\n    // Note: themes are not an exposed feature, meddle at your peril!\r\n    this._themes = undefined;\r\n  },\r\n\r\n  get model() {\r\n    return {\r\n      creator: this.creator || 'Unknown',\r\n      lastModifiedBy: this.lastModifiedBy || 'Unknown',\r\n      lastPrinted: this.lastPrinted,\r\n      created: this.created,\r\n      modified: this.modified,\r\n      properties: this.properties,\r\n      worksheets: this._worksheets.filter(Boolean).map(function(worksheet) { return worksheet.model; }),\r\n      definedNames: this._definedNames.model,\r\n      views: this.views,\r\n      company: this.company,\r\n      manager: this.manager,\r\n      title: this.title,\r\n      subject: this.subject,\r\n      keywords: this.keywords,\r\n      category:  this.category,\r\n      description: this.description,\r\n      language: this.language,\r\n      revision: this.revision,\r\n      contentStatus: this.contentStatus,\r\n      themes: this._themes,\r\n    };\r\n  },\r\n  set model(value) {\r\n    var self = this;\r\n\r\n    // oh-for-a-rest-spread-operator!\r\n    this.creator = value.creator;\r\n    this.lastModifiedBy = value.lastModifiedBy;\r\n    this.lastPrinted = value.lastPrinted;\r\n    this.created = value.created;\r\n    this.modified = value.modified;\r\n    this.company = value.company;\r\n    this.manager  = value.manager;\r\n    this.title  = value.title;\r\n    this.subject  = value.subject;\r\n    this.keywords  = value.keywords;\r\n    this.category  = value.category;\r\n    this.description  = value.description;\r\n    this.language = value.language;\r\n    this.revision = value.revision;\r\n    this.contentStatus = value.contentStatus;\r\n\r\n    this.properties = value.properties;\r\n    this._worksheets = [];\r\n    value.worksheets.forEach(function(worksheetModel) {\r\n      var id = worksheetModel.id;\r\n      var name = worksheetModel.name;\r\n      var worksheet = self._worksheets[id] = new Worksheet({\r\n        id: id,\r\n        name: name,\r\n        workbook: self\r\n      });\r\n\r\n      worksheet.model = worksheetModel;\r\n    });\r\n\r\n    this._definedNames.model = value.definedNames;\r\n    this.views = value.views;\r\n    this._themes = value.themes;\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/doc/worksheet.js":"/**\r\n * Copyright (c) 2014 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar _ = require('../utils/under-dash');\r\n\r\n\r\nvar utils = require('./../utils/utils');\r\nvar colCache = require('./../utils/col-cache');\r\nvar Range = require('./range');\r\nvar Row = require('./row');\r\nvar Column = require('./column');\r\nvar Enums = require('./enums');\r\nvar DataValidations = require('./data-validations');\r\n\r\n// Worksheet requirements\r\n//  Operate as sheet inside workbook or standalone\r\n//  Load and Save from file and stream\r\n//  Access/Add/Delete individual cells\r\n//  Manage column widths and row heights\r\n\r\nvar Worksheet = module.exports = function(options) {\r\n  options = options || {};\r\n\r\n  // in a workbook, each sheet will have a number\r\n  this.id = options.id;\r\n\r\n  // and a name\r\n  this.name = options.name || 'Sheet' + this.id;\r\n\r\n  // rows allows access organised by row. Sparse array of arrays indexed by row-1, col\r\n  // Note: _rows is zero based. Must subtract 1 to go from cell.row to index\r\n  this._rows = [];\r\n\r\n  // column definitions\r\n  this._columns = null;\r\n\r\n  // column keys (addRow convenience): key ==> this._collumns index\r\n  this._keys = {};\r\n\r\n  // keep record of all merges\r\n  this._merges = {};\r\n\r\n  this._workbook = options.workbook;\r\n\r\n  // for tabColor, default row height, outline levels, etc\r\n  this.properties = Object.assign({}, {\r\n    defaultRowHeight: 15,\r\n    dyDescent: 55,\r\n    outlineLevelCol: 0,\r\n    outlineLevelRow: 0\r\n  }, options.properties);\r\n  \r\n  // for all things printing\r\n  this.pageSetup = Object.assign({}, {\r\n    margins: {left: 0.7, right: 0.7, top: 0.75, bottom: 0.75, header: 0.3, footer:  0.3 },\r\n    orientation: 'portrait',\r\n    horizontalDpi: 4294967295,\r\n    verticalDpi: 4294967295,\r\n    fitToPage: !!(options.pageSetup && ((options.pageSetup.fitToWidth || options.pageSetup.fitToHeight) && !options.pageSetup.scale)),\r\n    pageOrder: 'downThenOver',\r\n    blackAndWhite: false,\r\n    draft: false,\r\n    cellComments: 'None',\r\n    errors: 'displayed',\r\n    scale: 100,\r\n    fitToWidth: 1,\r\n    fitToHeight: 1,\r\n    paperSize: undefined,\r\n    showRowColHeaders: false,\r\n    showGridLines: false,\r\n    firstPageNumber: undefined,\r\n    horizontalCentered: false,\r\n    verticalCentered: false,\r\n    rowBreaks: null,\r\n    colBreaks: null\r\n  }, options.pageSetup);\r\n\r\n  this.dataValidations = new DataValidations();\r\n\r\n  // for freezepanes, split, zoom, gridlines, etc\r\n  this.views = options.views || [];\r\n};\r\n\r\nWorksheet.prototype = {\r\n\r\n  get workbook() {\r\n    return this._workbook;\r\n  },\r\n\r\n  // when you're done with this worksheet, call this to remove from workbook\r\n  destroy: function() {\r\n    this._workbook._removeWorksheet(this);\r\n  },\r\n\r\n  // Get the bounding range of the cells in this worksheet\r\n  get dimensions() {\r\n    var dimensions = new Range();\r\n    this._rows.forEach(function(row) {\r\n      if (row) {\r\n        var rowDims = row.dimensions;\r\n        if (rowDims) {\r\n          dimensions.expand(row.number, rowDims.min, row.number, rowDims.max);\r\n        }\r\n      }\r\n    });\r\n    return dimensions;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Columns\r\n\r\n  // get the current columns array.\r\n  get columns() {\r\n    return this._columns;\r\n  },\r\n\r\n  // set the columns from an array of column definitions.\r\n  // Note: any headers defined will overwrite existing values.\r\n  set columns(value) {\r\n    var self = this;\r\n\r\n    // calculate max header row count\r\n    this._headerRowCount = value.reduce(function(pv,cv) {\r\n      var headerCount = cv.header ? 1 : (cv.headers ? cv.headers.length : 0);\r\n      return Math.max(pv, headerCount)\r\n    }, 0);\r\n\r\n    // construct Column objects\r\n    var count = 1;\r\n    var _columns = this._columns = [];\r\n    value.forEach(function(defn) {\r\n      var column = new Column(self, count++, false);\r\n      _columns.push(column);\r\n      column.defn = defn;\r\n    });\r\n  },\r\n\r\n  // get a single column by col number. If it doesn't exist, create it and any gaps before it\r\n  getColumn: function(c) {\r\n    if (typeof c == 'string'){\r\n      // if it matches a key'd column, return that\r\n      var col = this._keys[c];\r\n      if (col) return col;\r\n\r\n      // otherwise, assume letter\r\n      c = colCache.l2n(c);\r\n    }\r\n    if (!this._columns) { this._columns = []; }\r\n    if (c > this._columns.length) {\r\n      var n = this._columns.length + 1;\r\n      while (n <= c) {\r\n        this._columns.push(new Column(this, n++));\r\n      }\r\n    }\r\n    return this._columns[c-1];\r\n  },\r\n  spliceColumns: function(start, count) {\r\n    // each member of inserts is a column of data. \r\n\r\n    var inserts = Array.prototype.slice.call(arguments, 2);\r\n    var _rows = this._rows;\r\n    var nRows = _rows.length;\r\n    if (inserts.length > 0) {\r\n      // must iterate over all rows whether they exist yet or not\r\n      for (var i = 0; i <  nRows; i++) {\r\n        var rowArguments = [start, count];\r\n        inserts.forEach(function(insert) {\r\n          rowArguments.push(insert[i] || null);\r\n        });\r\n        var row = this.getRow(i+1);\r\n        row.splice.apply(row, rowArguments);\r\n      }\r\n    } else {\r\n      // nothing to insert, so just splice all rows\r\n      this._rows.forEach(function(row) {\r\n        if (row) { row.splice(start, count); }\r\n      });\r\n    }\r\n    \r\n    // splice column definitions\r\n    var nExpand = inserts.length - count;\r\n    var nKeep = start + count;\r\n    var nEnd = this._columns.length;\r\n    if (nExpand < 0) {\r\n      for (i = nKeep; i <= nEnd; i++) {\r\n        this.getColumn(i + nExpand).defn = this.getColumn(i).defn\r\n      }\r\n      for (i = nEnd + nExpand + 1; i <= nEnd; i++) {\r\n        this.getColumn(i).defn = null;\r\n      }\r\n    } else {\r\n      for (i = nEnd; i >= nKeep; i--) {\r\n        this.getColumn(i + nExpand).defn = this.getColumn(i).defn;\r\n      }\r\n    }\r\n    for (i = start; i < nKeep + nExpand; i++) {\r\n      this.getColumn(i).defn = null;\r\n    }\r\n  },\r\n\r\n  get columnCount() {\r\n    var maxCount = 0;\r\n    this.eachRow(function(row) {\r\n      maxCount = Math.max(maxCount, row.cellCount);\r\n    });\r\n    return maxCount;\r\n  },\r\n  get actualColumnCount() {\r\n    // performance nightmare - for each row, counts all the columns used\r\n    var counts = [];\r\n    var count = 0;\r\n    this.eachRow(function(row) {\r\n      row.eachCell(function(cell) {\r\n        var col = cell.col;\r\n        if (!counts[col]) {\r\n          counts[col] = true;\r\n          count++;\r\n        }\r\n      });\r\n    });\r\n    return count;\r\n  },\r\n\r\n\r\n  // =========================================================================\r\n  // Rows\r\n\r\n  _commitRow: function() {\r\n    // nop - allows streaming reader to fill a document\r\n  },\r\n\r\n  get _lastRowNumber() {\r\n    // need to cope with results of splice\r\n    var _rows = this._rows;\r\n    var n = _rows.length;\r\n    while ((n > 0) && (_rows[n-1] === undefined)) {\r\n      n--;\r\n    }\r\n    return n;\r\n  },\r\n  get _nextRow() {\r\n    return this._lastRowNumber + 1;\r\n  },\r\n\r\n  get lastRow() {\r\n    if (this._rows.length) {\r\n      return this._rows[this._rows.length-1];\r\n    } else {\r\n      return undefined;\r\n    }\r\n  },\r\n\r\n  // find a row (if exists) by row number\r\n  findRow: function(r) {\r\n    return this._rows[r-1];\r\n  },\r\n\r\n  get rowCount() {\r\n    return this._lastRowNumber;\r\n  },\r\n  get actualRowCount() {\r\n    // counts actual rows that have actual data\r\n    var count = 0;\r\n    this.eachRow(function() {\r\n      count++;\r\n    });\r\n    return count;\r\n  },\r\n\r\n  // get a row by row number.\r\n  getRow: function(r) {\r\n    var row = this._rows[r-1];\r\n    if (!row) {\r\n      row = this._rows[r-1] = new Row(this, r);\r\n    }\r\n    return row;\r\n  },\r\n  addRow: function(value) {\r\n    var row = this.getRow(this._nextRow);\r\n    row.values = value;\r\n    return row;\r\n  },\r\n  addRows: function(value) {\r\n    var self = this;\r\n    value.forEach(function(row) {\r\n      self.addRow(row);\r\n    });\r\n  },\r\n  \r\n  spliceRows: function(start, count) {\r\n    // same problem as row.splice, except worse.\r\n    var inserts = Array.prototype.slice.call(arguments, 2);\r\n    var nKeep = start + count;\r\n    var nExpand = inserts.length - count;\r\n    var nEnd = this._rows.length;\r\n    var i, rSrc;\r\n    if (nExpand < 0) {\r\n      // remove rows\r\n      for (i = nKeep; i <= nEnd; i++) {\r\n        rSrc = this._rows[i-1];\r\n        if (rSrc) {\r\n          this.getRow(i+nExpand).values = rSrc.values;\r\n          this._rows[i-1] = undefined;\r\n        } else {\r\n          this._rows[i+nExpand-1] = undefined;\r\n        }\r\n      }\r\n    } else if (nExpand > 0) {\r\n      // insert new cells\r\n      for (i = nEnd; i >= nKeep; i--) {\r\n        rSrc = this._rows[i-1];\r\n        if (rSrc) {\r\n          this.getRow(i+nExpand).values = rSrc.values;\r\n        } else {\r\n          this._rows[i+nExpand-1] = undefined;\r\n        }\r\n      }\r\n    }\r\n\r\n    // now copy over the new values\r\n    for (i = 0; i < inserts.length; i++) {\r\n      this.getRow(start + i).values = inserts[i];\r\n    }\r\n  },\r\n\r\n  // iterate over every row in the worksheet, including maybe empty rows\r\n  eachRow: function(options, iteratee) {\r\n    if (!iteratee) {\r\n      iteratee = options;\r\n      options = undefined;\r\n    }\r\n    if (options && options.includeEmpty) {\r\n      var n = this._rows.length;\r\n      for (var i = 1; i <= n; i++) {\r\n        iteratee(this.getRow(i), i);\r\n      }\r\n    } else {\r\n      this._rows.forEach(function(row) {\r\n        if (row && row.hasValues) {\r\n          iteratee(row, row.number);\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  // return all rows as sparse array\r\n  getSheetValues: function() {\r\n    var rows = [];\r\n    this._rows.forEach(function(row) {\r\n      if (row) { rows[row.number] = row.values; }\r\n    });\r\n    return rows;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Cells\r\n\r\n  // returns the cell at [r,c] or address given by r. If not found, return undefined\r\n  findCell: function(r, c) {\r\n    var address = colCache.getAddress(r, c);\r\n    var row = this._rows[address.row-1];\r\n    return row ? row.findCell(address.col) : undefined;\r\n  },\r\n\r\n  // return the cell at [r,c] or address given by r. If not found, create a new one.\r\n  getCell: function(r, c) {\r\n    var address = colCache.getAddress(r, c);\r\n    var row = this.getRow(address.row);\r\n    return row._getCell(address);\r\n  },\r\n\r\n  // =========================================================================\r\n  // Merge\r\n\r\n  // convert the range defined by ['tl:br'], [tl,br] or [t,l,b,r] into a single 'merged' cell\r\n  mergeCells: function() {\r\n    var dimensions = new Range(Array.prototype.slice.call(arguments, 0)); // convert arguments into Array\r\n\r\n    // check cells aren't already merged\r\n    _.each(this._merges, function(merge) {\r\n      if (merge.intersects(dimensions)) {\r\n        throw new Error('Cannot merge alreay merged cells');\r\n      }\r\n    });\r\n\r\n    // apply merge\r\n    var master = this.getCell(dimensions.top, dimensions.left);\r\n    for (var i = dimensions.top; i <= dimensions.bottom; i++) {\r\n      for (var j = dimensions.left; j <= dimensions.right; j++) {\r\n        // merge all but the master cell\r\n        if ((i > dimensions.top) || (j > dimensions.left)) {\r\n          this.getCell(i,j).merge(master);\r\n        }\r\n      }\r\n    }\r\n\r\n    // index merge\r\n    this._merges[master.address] = dimensions;\r\n  },\r\n  _unMergeMaster: function(master) {\r\n    // master is always top left of a rectangle\r\n    var merge = this._merges[master.address];\r\n    if (merge) {\r\n      for (var i = merge.top; i <= merge.bottom; i++) {\r\n        for (var j = merge.left; j <= merge.right; j++) {\r\n          this.getCell(i,j).unmerge();\r\n        }\r\n      }\r\n      delete this._merges[master.address];\r\n    }\r\n  },\r\n  \r\n  get hasMerges() {\r\n    return _.some(this._merges, function(merge, address) {\r\n      // TODO: this doesn't look right\r\n      return true;\r\n    });\r\n  },\r\n\r\n  // scan the range defined by ['tl:br'], [tl,br] or [t,l,b,r] and if any cell is part of a merge,\r\n  // un-merge the group. Note this function can affect multiple merges and merge-blocks are\r\n  // atomic - either they're all merged or all un-merged.\r\n  unMergeCells: function() {\r\n    var dimensions = new Range(Array.prototype.slice.call(arguments, 0)); // convert arguments into Array\r\n\r\n    // find any cells in that range and unmerge them\r\n    for (var i = dimensions.top; i <= dimensions.bottom; i++) {\r\n      for (var j = dimensions.left; j <= dimensions.right; j++) {\r\n        var cell = this.findCell(i,j);\r\n        if (cell) {\r\n          if (cell.type === Enums.ValueType.Merge) {\r\n            // this cell merges to another master\r\n            this._unMergeMaster(cell.master);\r\n          } else if (this._merges[cell.address]) {\r\n            // this cell is a master\r\n            this._unMergeMaster(cell);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  // ===========================================================================\r\n  // Deprecated\r\n  get tabColor() {\r\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\r\n    return this.properties.tabColor;\r\n  },\r\n  set tabColor(value) {\r\n    console.trace('worksheet.tabColor property is now deprecated. Please use worksheet.properties.tabColor');\r\n    this.properties.tabColor = value;\r\n  },\r\n\r\n  // ===========================================================================\r\n  // Model\r\n\r\n  get model() {\r\n    var model = {\r\n      id: this.id,\r\n      name: this.name,\r\n      dataValidations: this.dataValidations.model,\r\n      properties: this.properties,\r\n      pageSetup: this.pageSetup,\r\n      views: this.views\r\n    };\r\n\r\n    // =================================================\r\n    // columns\r\n    model.cols = Column.toModel(this.columns);\r\n\r\n    // ==========================================================\r\n    // Rows\r\n    var rows = model.rows = [];\r\n    var dimensions = model.dimensions = new Range();\r\n    this._rows.forEach(function(row) {\r\n      var rowModel = row && row.model;\r\n      if (rowModel) {\r\n        dimensions.expand(rowModel.number, rowModel.min, rowModel.number, rowModel.max);\r\n        rows.push(rowModel);\r\n      }\r\n    });\r\n\r\n    // ==========================================================\r\n    // Merges\r\n    model.merges = [];\r\n    _.each(this._merges, function(merge) {\r\n      model.merges.push(merge.range);\r\n    });\r\n\r\n    return model;\r\n  },\r\n  _parseRows: function(model) {\r\n    var self = this;\r\n    this._rows = [];\r\n    model.rows.forEach(function(rowModel) {\r\n      var row = new Row(self, rowModel.number);\r\n      self._rows[row.number-1] = row;\r\n      row.model = rowModel;\r\n    });\r\n  },\r\n  _parseMergeCells: function(model) {\r\n    var self = this;\r\n    _.each(model.mergeCells, function(merge) {\r\n      self.mergeCells(merge);\r\n    });\r\n  },\r\n  set model(value) {\r\n    this.name = value.name;\r\n    this._columns = Column.fromModel(this, value.cols);\r\n    this._parseRows(value);\r\n\r\n    this._parseMergeCells(value);\r\n    this.dataValidations = new DataValidations(value.dataValidations);\r\n    this.properties = value.properties;\r\n    this.pageSetup = value.pageSetup;\r\n    this.views = value.views;\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/utils/under-dash.js":"'use strict';\r\n\r\nvar _ = {\r\n  each: function each(obj, cb) {\r\n    if (obj) {\r\n      if (Array.isArray(obj)) {\r\n        obj.forEach(cb);\r\n      } else {\r\n        Object.keys(obj).forEach(function (key) {\r\n          cb(obj[key], key);\r\n        });\r\n      }\r\n    }\r\n  },\r\n\r\n  some: function some(obj, cb) {\r\n    if (obj) {\r\n      if (Array.isArray(obj)) {\r\n        return obj.some(cb);\r\n      } else {\r\n        return Object.keys(obj).some(function (key) {\r\n          return cb(obj[key], key);\r\n        });\r\n      }\r\n    }\r\n  },\r\n\r\n  every: function every(obj, cb) {\r\n    if (obj) {\r\n      if (Array.isArray(obj)) {\r\n        return obj.every(cb);\r\n      } else {\r\n        return Object.keys(obj).every(function (key) {\r\n          return cb(obj[key], key);\r\n        });\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  },\r\n\r\n  map: function map(obj, cb) {\r\n    if (obj) {\r\n      if (Array.isArray(obj)) {\r\n        return obj.map(cb);\r\n      } else {\r\n        return Object.keys(obj).map(function (key) {\r\n          return cb(obj[key], key);\r\n        });\r\n      }\r\n    } else {\r\n      return [];\r\n    }\r\n  },\r\n\r\n  isEqual: function isEqual(a,b) {\r\n    var aType = typeof a;\r\n    var bType = typeof b;\r\n    var aArray = Array.isArray(a);\r\n    var bArray = Array.isArray(b);\r\n\r\n    if (aType !== bType) return false;\r\n    switch(typeof a) {\r\n      case 'object':\r\n        if (aArray || bArray) {\r\n          if (aArray && bArray) {\r\n            return (a.length === b.length) &&\r\n              a.every(function(aValue, index) {\r\n                var bValue = b[index];\r\n                return _.isEqual(aValue, bValue);\r\n              });\r\n          } else {\r\n            return false;\r\n          }\r\n        } else {\r\n          return _.every(a, function(aValue, key) {\r\n            var bValue = b[key];\r\n            return _.isEqual(aValue, bValue);\r\n          });\r\n        }\r\n\r\n      default:\r\n        return a === b;\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = _;","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/utils/utils.js":"/**\r\n * Copyright (c) 2014 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar fs = require('fs');\r\nvar PromishLib = require('./promish');\r\n\r\n// useful stuff\r\nvar inherits = function(cls, superCtor, statics, prototype) {\r\n  cls.super_ = superCtor;\r\n\r\n  if (!prototype) {\r\n    prototype = statics;\r\n    statics = null;\r\n  }\r\n\r\n  if (statics) {\r\n    for (var i in statics) {\r\n      Object.defineProperty(cls, i, Object.getOwnPropertyDescriptor(statics, i));\r\n    }\r\n  }\r\n\r\n  var properties = {\r\n    constructor: {\r\n      value: cls,\r\n      enumerable: false,\r\n      writable: false,\r\n      configurable: true\r\n    }\r\n  };\r\n  if (prototype) {\r\n    for (var i in prototype) {\r\n      properties[i] = Object.getOwnPropertyDescriptor(prototype, i);\r\n    }\r\n  }\r\n\r\n  cls.prototype = Object.create(superCtor.prototype, properties);\r\n};\r\n\r\n\r\nvar utils = module.exports = {\r\n  nop: function() {},\r\n  promiseImmediate: function(value) {\r\n    return new PromishLib.Promish(function(resolve, reject) {\r\n      if (global.setImmediate) {\r\n        setImmediate(function() {\r\n          resolve(value);\r\n        });\r\n      } else {\r\n        // poorman's setImmediate - must wait at least 1ms\r\n        setTimeout(function() {\r\n          resolve(value);\r\n        },1);\r\n      }\r\n    });\r\n  },\r\n  inherits: inherits,\r\n  dateToExcel: function(d, date1904) {\r\n    return 25569 + d.getTime() / (24 * 3600 * 1000) - (date1904 ? 1462 : 0);\r\n  },\r\n  excelToDate: function(v, date1904) {\r\n    return new Date((v - 25569 + (date1904 ? 1462 : 0)) * 24 * 3600 * 1000);\r\n  },\r\n  parsePath: function(filepath) {\r\n    var last = filepath.lastIndexOf('/');\r\n    return {\r\n      path: filepath.substring(0, last),\r\n      name: filepath.substring(last + 1)\r\n    };\r\n  },\r\n  getRelsPath: function(filepath) {\r\n    var path = utils.parsePath(filepath);\r\n    return path.path + '/_rels/' + path.name + '.rels';\r\n  },\r\n  xmlEncode: function(text) {\r\n    return text.replace(/[<>&'\"\\x7F\\x00-\\x08\\x0A-\\x0C\\x0E-\\x1F]/g, function (c) {\r\n      switch (c) {\r\n        case '<': return '&lt;';\r\n        case '>': return '&gt;';\r\n        case '&': return '&amp;';\r\n        case '\\'': return '&apos;';\r\n        case '\"': return '&quot;';\r\n        default: return '';\r\n      }\r\n    });\r\n  },\r\n  xmlDecode: function(text) {\r\n    return text.replace(/&([a-z]*);/, function(c) {\r\n      switch (c) {\r\n        case '&lt;': return '<';\r\n        case '&gt;': return '>';\r\n        case '&amp;': return '&';\r\n        case '&apos;': return '\\'';\r\n        case '&quot;': return '\"';\r\n        default: return c;\r\n      }\r\n    });\r\n  },\r\n  validInt: function(value) {\r\n    var i = parseInt(value);\r\n    return !isNaN(i) ? i : 0;\r\n  },\r\n\r\n  isDateFmt: function(fmt) {\r\n    if (!fmt) { return false; }\r\n\r\n    // must remove all chars inside quotes and []\r\n    fmt = fmt.replace(/[\\[][^\\]]*[\\]]/g,'');\r\n    fmt = fmt.replace(/\"[^\"]*\"/g,'');\r\n    // then check for date formatting chars\r\n    var result = fmt.match(/[ymdhMsb]+/) !== null;\r\n    return result;\r\n  },\r\n\r\n  fs: {\r\n    exists: function(path) {\r\n      return new PromishLib.Promish(function(resolve, reject) {\r\n        fs.exists(path, function(exists) {\r\n          resolve(exists);\r\n        });\r\n      });\r\n    }\r\n  },\r\n  \r\n  toIsoDateString: function(dt) {\r\n    return dt.toIsoString().subsstr(0,10);\r\n  }\r\n};\r\n\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/utils/col-cache.js":"/**\r\n * Copyright (c) 2014 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\n// =========================================================================\r\n// Column Letter to Number conversion\r\nvar colCache = module.exports = {\r\n  _dictionary: ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'],\r\n  _l2n: {},\r\n  _n2l: [],\r\n  _level: function(n) {\r\n    if (n <= 26) { return 1; }\r\n    if (n <= 26*26) { return 2; }\r\n    return 3;\r\n  },\r\n  _fill: function(level) {\r\n    var c, v, l1, l2, l3;\r\n    var n = 1;\r\n    if (level >= 1) {\r\n      //console.log('Level 1')\r\n      while (n <= 26) {\r\n        c = this._dictionary[n-1];\r\n        this._n2l[n] = c;\r\n        this._l2n[c] = n;\r\n        n++;\r\n      }\r\n    }\r\n    if (level >= 2) {\r\n      while (n <= 26 + 26 * 26) {\r\n        v = n-(26+1);\r\n        l1 = v % 26;\r\n        l2 = Math.floor(v / 26);\r\n        c = this._dictionary[l2] + this._dictionary[l1];\r\n        this._n2l[n] = c;\r\n        this._l2n[c] = n;\r\n        n++;\r\n      }\r\n    }\r\n    if (level >= 3) {\r\n      while (n <= 16384) {\r\n        v = n-(26*26+26+1);\r\n        l1 = v % 26;\r\n        l2 = Math.floor(v / 26) % 26;\r\n        l3 = Math.floor(v / (26*26));\r\n        c = this._dictionary[l3] + this._dictionary[l2] + this._dictionary[l1];\r\n        this._n2l[n] = c;\r\n        this._l2n[c] = n;\r\n        n++;\r\n      }\r\n    }\r\n  },\r\n  l2n: function(l) {\r\n    if (!this._l2n[l]) {\r\n      this._fill(l.length);\r\n    }\r\n    if (!this._l2n[l]) {\r\n      throw new Error('Out of bounds. Invalid column letter: ' + l);\r\n    }\r\n    return this._l2n[l];\r\n  },\r\n  n2l: function(n) {\r\n    if ((n < 1) || (n > 16384)) {\r\n      throw new Error('' + n + ' is out of bounds. Excel supports columns from 1 to 16384');\r\n    }\r\n    if (!this._n2l[n]) {\r\n      this._fill(this._level(n));\r\n    }\r\n    return this._n2l[n];\r\n  },\r\n\r\n  // =========================================================================\r\n  // Address processing\r\n  _hash: {},\r\n\r\n  // check if value looks like an address\r\n  validateAddress: function(value) {\r\n    if (!value.match(/^[A-Z]+\\d+$/)) {\r\n      throw new Error('Invalid Address: ' + value);\r\n    }\r\n    return true;\r\n  },\r\n\r\n  // convert address string into structure\r\n  decodeAddress: function(value) {\r\n    var addr = this._hash[value];\r\n    if (addr) {\r\n      return addr;\r\n    }\r\n\r\n    var col = value.match(/[A-Z]+/)[0];\r\n    var colNumber = this.l2n(col);\r\n    var row = value.match(/\\d+/)[0];\r\n    var rowNumber = parseInt(row);\r\n\r\n    // in case $row$col\r\n    value = col + row;\r\n\r\n    var address = {\r\n      address: value,\r\n      col: colNumber,\r\n      row: rowNumber,\r\n      $col$row: '$' + col + '$' + row\r\n    };\r\n\r\n    // mem fix - cache only the tl 100x100 square\r\n    if ((colNumber <= 100) && (rowNumber <= 100)) {\r\n      this._hash[value] = address;\r\n      this._hash[address.$col$row] = address;\r\n    }\r\n\r\n    return address;\r\n  },\r\n\r\n  // convert r,c into structure (if only 1 arg, assume r is address string)\r\n  getAddress: function(r,c) {\r\n    if (c) {\r\n      var address = this.n2l(c) + r;\r\n      return this.decodeAddress(address);\r\n    } else {\r\n      return this.decodeAddress(r);\r\n    }\r\n  },\r\n\r\n  // convert [address], [tl:br] into address structures\r\n  decode: function(value) {\r\n    var parts = value.split(':');\r\n    if (parts.length == 2) {\r\n      var tl = this.decodeAddress(parts[0]);\r\n      var br = this.decodeAddress(parts[1]);\r\n      var result = {\r\n        top: Math.min(tl.row, br.row),\r\n        left: Math.min(tl.col, br.col),\r\n        bottom: Math.max(tl.row, br.row),\r\n        right: Math.max(tl.col, br.col)\r\n      };\r\n      // reconstruct tl, br and dimensions\r\n      result.tl = this.n2l(result.left) + result.top;\r\n      result.br = this.n2l(result.right) + result.bottom;\r\n      result.dimensions = result.tl + ':' + result.br;\r\n      return result;\r\n    } else {\r\n      return this.decodeAddress(value);\r\n    }\r\n  },\r\n\r\n  // convert [sheetName!][$]col[$]row[[$]col[$]row] into address or range structures\r\n  decodeEx: function(value) {\r\n    var groups = value.match(/(?:(?:(?:'((?:[^']|'')*)')|([^'^ ^!]*))!)?(.*)/);\r\n\r\n    var sheetName = groups[1] || groups[2]; // Qouted and unqouted groups\r\n    var reference = groups[3]; // Remaining address\r\n\r\n    var parts = reference.split(':');\r\n    if (parts.length > 1) {\r\n      var tl = this.decodeAddress(parts[0]);\r\n      var br = this.decodeAddress(parts[1]);\r\n      var top = Math.min(tl.row, br.row);\r\n      var left = Math.min(tl.col, br.col);\r\n      var bottom = Math.max(tl.row, br.row);\r\n      var right = Math.max(tl.col, br.col);\r\n\r\n      tl = this.n2l(left) + top;\r\n      br = this.n2l(right) + bottom;\r\n\r\n      return {\r\n        top: top, left: left, bottom: bottom, right: right,\r\n        sheetName: sheetName,\r\n        tl: { address: tl, col: left, row: top, $col$row: '$' + this.n2l(left) + '$' + top, sheetName: sheetName },\r\n        br: { address: br, col: right, row: bottom, $col$row: '$' + this.n2l(right) + '$' + bottom, sheetName: sheetName },\r\n        dimensions: tl + ':' + br\r\n      };\r\n    } else if (reference.startsWith('#')) {\r\n      return sheetName ? {sheetName: sheetName, error: reference} : {error: reference};\r\n    } else {\r\n      var address = this.decodeAddress(reference);\r\n      return sheetName ? Object.assign({sheetName: sheetName}, address) : address;\r\n    }\r\n  },\r\n\r\n  // convert row,col into address string\r\n  encodeAddress: function(row, col) {\r\n    return colCache.n2l(col) + row;\r\n  },\r\n\r\n  // convert row,col into string address or t,l,b,r into range\r\n  encode: function() {\r\n    switch(arguments.length) {\r\n      case 2:\r\n        return colCache.encodeAddress(arguments[0], arguments[1]);\r\n      case 4:\r\n        return colCache.encodeAddress(arguments[0], arguments[1]) + ':' + colCache.encodeAddress(arguments[2], arguments[3]);\r\n      default:\r\n        throw new Error('Can only encode with 2 or 4 arguments');\r\n    }\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/doc/range.js":"/**\r\n * Copyright (c) 2014 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar colCache = require('./../utils/col-cache');\r\n\r\n// used by worksheet to calculate sheet dimensions\r\nvar Range = module.exports = function() {\r\n  this.decode(arguments);\r\n};\r\n\r\nRange.prototype = {\r\n  _set_tlbr: function(t,l,b,r, s) {\r\n    this.model = {\r\n      top: Math.min(t,b),\r\n      left: Math.min(l,r),\r\n      bottom: Math.max(t,b),\r\n      right: Math.max(l,r),\r\n      sheetName: s\r\n    };\r\n  },\r\n  _set_tl_br: function(tl, br, s) {\r\n    tl = colCache.decodeAddress(tl);\r\n    br = colCache.decodeAddress(br);\r\n    this._set_tlbr(tl.row, tl.col, br.row, br.col, s);\r\n  },\r\n  decode: function(argv) {\r\n    switch (argv.length) {\r\n      case 5: // [t,l,b,r,s]\r\n        this._set_tlbr(argv[0], argv[1], argv[2], argv[3], argv[4]);\r\n        break;\r\n      case 4: // [t,l,b,r]\r\n        this._set_tlbr(argv[0], argv[1], argv[2], argv[3]);\r\n        break;\r\n\r\n      case 3: // [tl,br,s]\r\n        this._set_tl_br(argv[0], argv[1], argv[2]);\r\n        break;\r\n      case 2: // [tl,br]\r\n        this._set_tl_br(argv[0], argv[1]);\r\n        break;\r\n\r\n      case 1:\r\n        var value = argv[0];\r\n        if (value instanceof Range) { // copy constructor\r\n          this.model = {\r\n            top: value.model.top,\r\n            left: value.model.left,\r\n            bottom: value.model.bottom,\r\n            right: value.model.right,\r\n            sheetName: value.sheetName\r\n          };\r\n        } else if (value instanceof Array) { // an arguments array\r\n          this.decode(value);\r\n        } else if (value.top && value.left && value.bottom && value.right) { // a model\r\n          this.model = {\r\n            top: value.top,\r\n            left: value.left,\r\n            bottom: value.bottom,\r\n            right: value.right,\r\n            sheetName: value.sheetName\r\n          };\r\n        } else { // [sheetName!]tl:br\r\n          var tlbr = colCache.decodeEx(value);\r\n          if (tlbr.top) {\r\n            this.model = {\r\n              top: tlbr.top,\r\n              left: tlbr.left,\r\n              bottom: tlbr.bottom,\r\n              right: tlbr.right,\r\n              sheetName: tlbr.sheetName\r\n            };\r\n          } else {\r\n            this.model = {\r\n              top: tlbr.row,\r\n              left: tlbr.col,\r\n              bottom: tlbr.row,\r\n              right: tlbr.col,\r\n              sheetName: tlbr.sheetName\r\n            };\r\n          }\r\n        }\r\n        break;\r\n\r\n      case 0:\r\n        this.model = {\r\n          top: 0,\r\n          left: 0,\r\n          bottom: 0,\r\n          right: 0\r\n        };\r\n        break;\r\n\r\n      default:\r\n        throw new Error('Invalid number of arguments to _getDimensions() - ' + argv.length);\r\n    }\r\n  },\r\n\r\n  get top() { return this.model.top || 1; },\r\n  set top(value) { this.model.top = value; },\r\n  get left() { return this.model.left || 1; },\r\n  set left(value) { this.model.left = value; },\r\n  get bottom() { return this.model.bottom || 1; },\r\n  set bottom(value) { this.model.bottom = value; },\r\n  get right() { return this.model.right || 1; },\r\n  set right(value) { this.model.right = value; },\r\n  get sheetName() { return this.model.sheetName; },\r\n  set sheetName(value) { this.model.sheetName = value; },\r\n\r\n  get _serialisedSheetName() {\r\n    var sheetName = this.model.sheetName;\r\n    if (sheetName) {\r\n      if (/^[a-zA-Z0-9]*$/.test(sheetName)) {\r\n        return sheetName + '!';\r\n      } else {\r\n        return '\\'' + sheetName + '\\'!';\r\n      }\r\n    } else {\r\n      return '';\r\n    }\r\n  },\r\n\r\n  expand: function(top, left, bottom, right) {\r\n    if (!this.model.top || (top < this.top)) this.top = top;\r\n    if (!this.model.left || (left < this.left)) this.left = left;\r\n    if (!this.model.bottom || (bottom > this.bottom)) this.bottom = bottom;\r\n    if (!this.model.right || (right > this.right)) this.right = right;\r\n  },\r\n  expandRow: function(row) {\r\n    if (row) {\r\n      var dimensions = row.dimensions;\r\n      if (dimensions) {\r\n        this.expand(row.number, dimensions.min, row.number, dimensions.max);\r\n      }\r\n    }\r\n  },\r\n  expandToAddress: function(addressStr) {\r\n    var address = colCache.decodeEx(addressStr);\r\n    this.expand(address.row, address.col, address.row, address.col);\r\n  },\r\n\r\n  get tl() {\r\n    return colCache.n2l(this.left) + this.top;\r\n  },\r\n  get $t$l() {\r\n    return '$' + colCache.n2l(this.left) + '$' + this.top;\r\n  },\r\n  get br() {\r\n    return colCache.n2l(this.right) + this.bottom;\r\n  },\r\n  get $b$r() {\r\n    return '$' + colCache.n2l(this.right) + '$' + this.bottom;\r\n  },\r\n\r\n  get range() {\r\n    return this._serialisedSheetName + this.tl + ':' + this.br;\r\n  },\r\n  get $range() {\r\n    return this._serialisedSheetName + this.$t$l + ':' + this.$b$r;\r\n  },\r\n  get shortRange() {\r\n    return this.count > 1 ? this.range :\r\n      (this._serialisedSheetName + this.tl);\r\n  },\r\n  get $shortRange() {\r\n    return this.count > 1 ? this.$range :\r\n      (this._serialisedSheetName + this.$t$l);\r\n  },\r\n  get count() {\r\n    return (1 + this.bottom - this.top) * (1 + this.right - this.left);\r\n  },\r\n\r\n  toString: function() {\r\n    return this.range;\r\n  },\r\n\r\n  intersects: function(other) {\r\n    if (other.sheetName && this.sheetName && (other.sheetName !== this.sheetName)) return false;\r\n    if (other.bottom < this.top) return false;\r\n    if (other.top > this.bottom) return false;\r\n    if (other.right < this.left) return false;\r\n    if (other.left > this.right) return false;\r\n    return true;\r\n  },\r\n  contains: function(addressStr) {\r\n    var address = colCache.decodeEx(addressStr);\r\n    return this.containsEx(address);\r\n  },\r\n  containsEx: function(address) {\r\n    if (address.sheetName && this.sheetName && (address.sheetName !== this.sheetName)) return false;\r\n    return (address.row >= this.top) &&\r\n           (address.row <= this.bottom) &&\r\n           (address.col >= this.left) &&\r\n           (address.col <= this.right);\r\n  }\r\n};","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/doc/row.js":"/**\r\n * Copyright (c) 2014 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar _ = require('../utils/under-dash');\r\n\r\nvar Enums = require('./enums');\r\nvar colCache = require('./../utils/col-cache');\r\nvar Cell = require('./cell');\r\n\r\nvar Row = module.exports = function (worksheet, number) {\r\n  this._worksheet = worksheet;\r\n  this._number = number;\r\n  this._cells = [];\r\n  this.style = {};\r\n  this.outlineLevel = 0;\r\n};\r\n\r\nRow.prototype = {\r\n  // return the row number\r\n  get number() {\r\n    return this._number;\r\n  },\r\n\r\n  get worksheet() {\r\n    return this._worksheet;\r\n  },\r\n\r\n  // Inform Streaming Writer that this row (and all rows before it) are complete\r\n  // and ready to write. Has no effect on Worksheet document\r\n  commit: function () {\r\n    this._worksheet._commitRow(this);\r\n  },\r\n\r\n  // helps GC by breaking cyclic references\r\n  destroy: function () {\r\n    delete this._worksheet;\r\n    delete this._cells;\r\n    delete this.style;\r\n  },\r\n\r\n  findCell: function (colNumber) {\r\n    return this._cells[colNumber - 1];\r\n  },\r\n\r\n  // given {address, row, col}, find or create new cell\r\n  _getCell: function (address) {\r\n    var cell = this._cells[address.col - 1];\r\n    if (!cell) {\r\n      var column = this._worksheet.getColumn(address.col);\r\n      cell = new Cell(this, column, address.address);\r\n      this._cells[address.col - 1] = cell;\r\n    }\r\n    return cell;\r\n  },\r\n\r\n  // get cell by key, letter or column number\r\n  getCell: function (col) {\r\n    if (typeof col == 'string') {\r\n      // is it a key?\r\n      var column = this._worksheet._keys[col];\r\n      if (column) {\r\n        col = column.number;\r\n      } else {\r\n        col = colCache.l2n(col);\r\n      }\r\n    }\r\n    return this._cells[col - 1] ||\r\n      this._getCell({\r\n        address: colCache.encodeAddress(this._number, col),\r\n        row: this._number,\r\n        col: col\r\n      });\r\n  },\r\n\r\n  // remove cell(s) and shift all higher cells down by count\r\n  splice: function(start, count) {\r\n    var inserts = Array.prototype.slice.call(arguments, 2);\r\n    var nKeep = start + count;\r\n    var nExpand = inserts.length - count;\r\n    var nEnd = this._cells.length;\r\n    var i, cSrc, cDst;\r\n    if (nExpand < 0) {\r\n      // remove cells\r\n      for (i = nKeep; i <= nEnd; i++) {\r\n        cSrc = this._cells[i-1];\r\n        if (cSrc) {\r\n          this.getCell(i + nExpand).value = cSrc.value;\r\n          cSrc.value = null;\r\n        } else {\r\n          cDst = this._cells[i + nExpand - 1];\r\n          if (cDst) {\r\n            cDst.value = null;\r\n          }\r\n        }\r\n      }\r\n    } else if (nExpand > 0) {\r\n      // insert new cells\r\n      for (i = nEnd; i >= nKeep; i--) {\r\n        cSrc = this._cells[i-1];\r\n        if (cSrc) {\r\n          this.getCell(i + nExpand).value = cSrc.value;\r\n        } else {\r\n          this._cells[i + nExpand - 1] = undefined;\r\n        }\r\n      }\r\n    }\r\n\r\n    // now add the new values\r\n    for (i = 0; i < inserts.length; i++) {\r\n      this.getCell(start + i).value = inserts[i];\r\n    }\r\n  },\r\n\r\n  // Iterate over all non-null cells in this row\r\n  eachCell: function (options, iteratee) {\r\n    if (!iteratee) {\r\n      iteratee = options;\r\n      options = null;\r\n    }\r\n    if (options && options.includeEmpty) {\r\n      var n = this._cells.length;\r\n      for (var i = 1; i <= n; i++) {\r\n        iteratee(this.getCell(i), i);\r\n      }\r\n    } else {\r\n      this._cells.forEach(function (cell, index) {\r\n        if (cell && (cell.type != Enums.ValueType.Null)) {\r\n          iteratee(cell, index + 1);\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  // return a sparse array of cell values\r\n  get values() {\r\n    var values = [];\r\n    this._cells.forEach(function (cell) {\r\n      if (cell && (cell.type != Enums.ValueType.Null)) {\r\n        values[cell.col] = cell.value;\r\n      }\r\n    });\r\n    return values;\r\n  },\r\n\r\n  // set the values by contiguous or sparse array, or by key'd object literal\r\n  set values(value) {\r\n    var self = this;\r\n\r\n    // this operation is not additive - any prior cells are removed\r\n    this._cells = [];\r\n    if (!value) {\r\n      // empty row\r\n    } else if (value instanceof Array) {\r\n      var offset = 0;\r\n      if (value.hasOwnProperty('0')) {\r\n        // contiguous array - start at column 1\r\n        offset = 1;\r\n      }\r\n      value.forEach(function (item, index) {\r\n        if (item !== undefined) {\r\n          self._getCell({\r\n            address: colCache.encodeAddress(self._number, index + offset),\r\n            row: self._number,\r\n            col: index + offset\r\n          }).value = item;\r\n        }\r\n      });\r\n    } else {\r\n      // assume object with column keys\r\n      _.each(this._worksheet._keys, function (column, key) {\r\n        if (value[key] !== undefined) {\r\n          self._getCell({\r\n            address: colCache.encodeAddress(self._number, column.number),\r\n            row: self._number,\r\n            col: column.number\r\n          }).value = value[key];\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  // returns true if the row includes at least one cell with a value\r\n  get hasValues() {\r\n    return _.some(this._cells, function (cell) {\r\n      return cell && (cell.type != Enums.ValueType.Null);\r\n    });\r\n  },\r\n\r\n  get cellCount() {\r\n    return this._cells.length;\r\n  },\r\n  get actualCellCount() {\r\n    var count = 0;\r\n    this.eachCell(function() {\r\n      count++;\r\n    });\r\n    return count;\r\n  },\r\n\r\n  // get the min and max column number for the non-null cells in this row or null\r\n  get dimensions() {\r\n    var min = 0;\r\n    var max = 0;\r\n    this._cells.forEach(function (cell) {\r\n      if (cell && (cell.type != Enums.ValueType.Null)) {\r\n        if (!min || (min > cell.col)) {\r\n          min = cell.col;\r\n        }\r\n        if (max < cell.col) {\r\n          max = cell.col;\r\n        }\r\n      }\r\n    });\r\n    return min > 0 ? {\r\n      min: min,\r\n      max: max\r\n    } : null;\r\n  },\r\n\r\n  // =========================================================================\r\n  // styles\r\n  _applyStyle: function (name, value) {\r\n    this.style[name] = value;\r\n    this._cells.forEach(function (cell) {\r\n      if (cell) { cell[name] = value; }\r\n    });\r\n    return value;\r\n  },\r\n\r\n  get numFmt() {\r\n    return this.style.numFmt;\r\n  },\r\n  set numFmt(value) {\r\n    this._applyStyle('numFmt', value);\r\n  },\r\n  get font() {\r\n    return this.style.font;\r\n  },\r\n  set font(value) {\r\n    this._applyStyle('font', value);\r\n  },\r\n  get alignment() {\r\n    return this.style.alignment;\r\n  },\r\n  set alignment(value) {\r\n    this._applyStyle('alignment', value);\r\n  },\r\n  get border() {\r\n    return this.style.border;\r\n  },\r\n  set border(value) {\r\n    this._applyStyle('border', value);\r\n  },\r\n  get fill() {\r\n    return this.style.fill;\r\n  },\r\n  set fill(value) {\r\n    this._applyStyle('fill', value);\r\n  },\r\n\r\n  get hidden() {\r\n    return !!this._hidden;\r\n  },\r\n  set hidden(value) {\r\n    this._hidden = value;\r\n  },\r\n\r\n  get outlineLevel() {\r\n    return this._outlineLevel || 0;\r\n  },\r\n  set outlineLevel(value) {\r\n    this._outlineLevel = value;\r\n  },\r\n  get collapsed() {\r\n    return !!(this._outlineLevel && (this._outlineLevel >= this._worksheet.properties.outlineLevelRow));\r\n  },\r\n\r\n  // =========================================================================\r\n  get model() {\r\n    var cells = [];\r\n    var min = 0;\r\n    var max = 0;\r\n    this._cells.forEach(function (cell) {\r\n      if (cell) {\r\n        var cellModel = cell.model;\r\n        if (cellModel) {\r\n          if (!min || (min > cell.col)) {\r\n            min = cell.col;\r\n          }\r\n          if (max < cell.col) {\r\n            max = cell.col;\r\n          }\r\n          cells.push(cellModel);\r\n        }\r\n      }\r\n    });\r\n\r\n    return (this.height || cells.length) ? {\r\n      cells: cells,\r\n      number: this.number,\r\n      min: min,\r\n      max: max,\r\n      height: this.height,\r\n      style: this.style,\r\n      hidden: this.hidden,\r\n      outlineLevel: this.outlineLevel,\r\n      collapsed: this.collapsed\r\n    } : null;\r\n  },\r\n  set model(value) {\r\n    if (value.number != this._number) {\r\n      throw new Error('Invalid row number in model');\r\n    }\r\n    var self = this;\r\n    this._cells = [];\r\n    value.cells.forEach(function (cellModel) {\r\n      switch (cellModel.type) {\r\n        case Cell.Types.Merge:\r\n          // special case - don't add this types\r\n          break;\r\n        default:\r\n          var cell = self._getCell(colCache.decodeAddress(cellModel.address));\r\n          cell.model = cellModel;\r\n          break;\r\n      }\r\n    });\r\n\r\n    if (value.height) {\r\n      this.height = value.height;\r\n    } else {\r\n      delete this.height;\r\n    }\r\n\r\n    this.hidden = value.hidden;\r\n    this.outlineLevel = value.outlineLevel || 0;\r\n\r\n    this.style = value.style || {};\r\n  }\r\n};","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/doc/enums.js":"/**\r\n * Copyright (c) 2014 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n\"use strict\";\r\n\r\nmodule.exports = {\r\n  ValueType: {\r\n    Null: 0,\r\n    Merge: 1,\r\n    Number: 2,\r\n    String: 3,\r\n    Date: 4,\r\n    Hyperlink: 5,\r\n    Formula: 6,\r\n    SharedString: 7,\r\n    RichText: 8,\r\n    Boolean: 9,\r\n    Error: 10,\r\n  },\r\n  RelationshipType: {\r\n    None: 0,\r\n    OfficeDocument: 1,\r\n    Worksheet: 2,\r\n    CalcChain: 3,\r\n    SharedStrings: 4,\r\n    Styles: 5,\r\n    Theme: 6,\r\n    Hyperlink: 7\r\n  },\r\n  DocumentType: {\r\n    Xlsx: 1\r\n  },\r\n  ReadingOrder: {\r\n    RightToLeft: 1,\r\n    LeftToRight: 2\r\n  },\r\n  ErrorValue: {\r\n    NotApplicable: '#N/A',\r\n    Ref: '#REF!',\r\n    Name: '#NAME?',\r\n    DivZero: '#DIV/0!',\r\n    Null: '#NULL!',\r\n    Value: '#VALUE!',\r\n    Num: '#NUM!'\r\n  },\r\n};","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/doc/cell.js":"/**\r\n * Copyright (c) 2014 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar colCache = require('./../utils/col-cache');\r\nvar utils = require('./../utils/utils');\r\nvar Enums = require('./enums');\r\n\r\n// Cell requirements\r\n//  Operate inside a worksheet\r\n//  Store and retrieve a value with a range of types: text, number, date, hyperlink, reference, formula, etc.\r\n//  Manage/use and manipulate cell format either as local to cell or inherited from column or row.\r\n\r\nvar Cell = module.exports = function(row, column, address) {\r\n  if (!row || !column) {\r\n    throw new Error('A Cell needs a Row');\r\n  }\r\n\r\n  //if (!(row instanceof Row)) {\r\n  //  throw new Error('Expected row to be Row, was ' + typeof row);\r\n  //}\r\n  //if (!(column instanceof Column)) {\r\n  //  throw new Error('Expected col to be Column, was ' + typeof column);\r\n  //}\r\n\r\n  this._row = row;\r\n  this._column = column;\r\n\r\n  colCache.validateAddress(address);\r\n  this._address = address;\r\n\r\n  this._value = Value.create(Cell.Types.Null, this);\r\n\r\n  this.style = this._mergeStyle(row.style, column.style, {});\r\n\r\n  this._mergeCount = 0;\r\n};\r\n\r\nCell.Types = Enums.ValueType;\r\n\r\nCell.prototype = {\r\n\r\n  get worksheet() {\r\n    return this._row.worksheet;\r\n  },\r\n  get workbook() {\r\n    return this._row.worksheet.workbook;\r\n  },\r\n\r\n  // help GC by removing cyclic (and other) references\r\n  destroy: function() {\r\n    delete this.style;\r\n    delete this._value;\r\n    delete this._row;\r\n    delete this._column;\r\n    delete this._address;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Styles stuff\r\n  get numFmt() {\r\n    return this.style.numFmt;\r\n  },\r\n  set numFmt(value) {\r\n    this.style.numFmt = value;\r\n  },\r\n  get font() {\r\n    return this.style.font;\r\n  },\r\n  set font(value) {\r\n    this.style.font = value;\r\n  },\r\n  get alignment() {\r\n    return this.style.alignment;\r\n  },\r\n  set alignment(value) {\r\n    this.style.alignment = value;\r\n  },\r\n  get border() {\r\n    return this.style.border;\r\n  },\r\n  set border(value) {\r\n    this.style.border = value;\r\n  },\r\n  get fill() {\r\n    return this.style.fill;\r\n  },\r\n  set fill(value) {\r\n    this.style.fill = value;\r\n  },\r\n\r\n  _mergeStyle: function(rowStyle, colStyle, style) {\r\n    var numFmt = rowStyle && rowStyle.numFmt || colStyle && colStyle.numFmt;\r\n    if (numFmt) style.numFmt = numFmt;\r\n\r\n    var font = rowStyle && rowStyle.font || colStyle && colStyle.font;\r\n    if (font) style.font = font;\r\n\r\n    var alignment = rowStyle && rowStyle.alignment || colStyle && colStyle.alignment;\r\n    if (alignment) style.alignment = alignment;\r\n\r\n    var border = rowStyle && rowStyle.border || colStyle && colStyle.border;\r\n    if (border) style.border = border;\r\n\r\n    var fill = rowStyle && rowStyle.fill || colStyle && colStyle.fill;\r\n    if (fill) style.fill = fill;\r\n\r\n    return style;\r\n  },\r\n\r\n  // =========================================================================\r\n  // return the address for this cell\r\n  get address() {\r\n    return this._address;\r\n  },\r\n\r\n  get row() {\r\n    return this._row.number;\r\n  },\r\n  get col() {\r\n    return this._column.number;\r\n  },\r\n\r\n  get $col$row() {\r\n    return '$' + this._column.letter + '$' + this.row;\r\n  },\r\n\r\n\r\n  // =========================================================================\r\n  // Value stuff\r\n\r\n  get type() {\r\n    return this._value.type;\r\n  },\r\n\r\n  get effectiveType() {\r\n    return this._value.effectiveType;\r\n  },\r\n\r\n  toCsvString: function() {\r\n    return this._value.toCsvString();\r\n  },\r\n\r\n  // =========================================================================\r\n  // Merge stuff\r\n\r\n  addMergeRef: function() {\r\n    this._mergeCount++;\r\n  },\r\n  releaseMergeRef: function() {\r\n    this._mergeCount--;\r\n  },\r\n  get isMerged() {\r\n    return (this._mergeCount > 0) || (this.type == Cell.Types.Merge);\r\n  },\r\n  merge: function(master) {\r\n    this._value.release();\r\n    this._value = Value.create(Cell.Types.Merge, this, master);\r\n    this.style = master.style;\r\n  },\r\n  unmerge: function() {\r\n    if (this.type == Cell.Types.Merge) {\r\n      this._value.release();\r\n      this._value = Value.create(Cell.Types.Null, this);\r\n      this.style = this._mergeStyle(this._row.style, this._column.style, {});\r\n    }\r\n  },\r\n  isMergedTo: function(master) {\r\n    if (this._value.type != Cell.Types.Merge) return false;\r\n    return this._value.isMergedTo(master);\r\n  },\r\n  get master() {\r\n    if (this.type === Cell.Types.Merge) return this._value.master;\r\n    else return this; // an unmerged cell is its own master\r\n  },\r\n\r\n  get isHyperlink() {\r\n    return this._value.type == Cell.Types.Hyperlink;\r\n  },\r\n  get hyperlink() {\r\n    return this._value.hyperlink;\r\n  },\r\n\r\n  // return the value\r\n  get value() {\r\n    return this._value.value;\r\n  },\r\n  // set the value - can be number, string or raw\r\n  set value(v) {\r\n    // special case - merge cells set their master's value\r\n    if (this.type === Cell.Types.Merge) {\r\n      return this._value.master.value = v;\r\n    }\r\n\r\n    this._value.release();\r\n\r\n    // assign value\r\n    this._value = Value.create(Value.getType(v), this, v);\r\n  },\r\n  get text() {\r\n    return this._value.toString();\r\n  } ,\r\n  toString: function() {\r\n    return this.text;\r\n  },\r\n\r\n  _upgradeToHyperlink: function(hyperlink) {\r\n    // if this cell is a string, turn it into a Hyperlink\r\n    if (this.type == Cell.Types.String) {\r\n      this._value = Value.create(Cell.Types.Hyperlink, this, {\r\n        text: this._value._value,\r\n        hyperlink: hyperlink\r\n      });\r\n    }\r\n  },\r\n\r\n  // =========================================================================\r\n  // Name stuff\r\n  get fullAddress() {\r\n    var worksheet = this._row.worksheet;\r\n    return {\r\n      sheetName: worksheet.name,\r\n      address: this.address,\r\n      row: this.row,\r\n      col: this.col\r\n    };\r\n  },\r\n  get name() {\r\n    return this.names[0];\r\n  },\r\n  set name(value) {\r\n    this.names = [value];\r\n  },\r\n  get names() {\r\n    return this.workbook.definedNames.getNamesEx(this.fullAddress);\r\n  },\r\n  set names(value) {\r\n    var self = this;\r\n    var definedNames = this.workbook.definedNames;\r\n    this.workbook.definedNames.removeAllNames(self.fullAddress);\r\n    value.forEach(function(name) {\r\n      definedNames.addEx(self.fullAddress, name);\r\n    });\r\n  },\r\n  addName: function(name) {\r\n    this.workbook.definedNames.addEx(this.fullAddress, name);\r\n  },\r\n  removeName: function(name) {\r\n    this.workbook.definedNames.removeEx(this.fullAddress, name);\r\n  },\r\n  removeAllNames: function() {\r\n    this.workbook.definedNames.removeAllNames(this.fullAddress);\r\n  },\r\n\r\n  // =========================================================================\r\n  // Data Validation stuff\r\n  get _dataValidations() {\r\n    return this.worksheet.dataValidations;\r\n  },\r\n\r\n  get dataValidation() {\r\n    return this._dataValidations.find(this.address)\r\n  },\r\n\r\n  set dataValidation(value) {\r\n    this._dataValidations.add(this.address, value);\r\n  },\r\n\r\n\r\n  // =========================================================================\r\n  // Model stuff\r\n\r\n  get model() {\r\n    var model = this._value.model;\r\n    model.style = this.style;\r\n    return model;\r\n  },\r\n  set model(value) {\r\n    this._value.release();\r\n    this._value = Value.create(value.type, this);\r\n    this._value.model = value;\r\n    if (value.style) {\r\n      this.style = value.style;\r\n    } else {\r\n      this.style = {};\r\n    }\r\n  }\r\n};\r\n\r\n// =============================================================================\r\n// Internal Value Types\r\n\r\nvar NullValue = function(cell) {\r\n  this.model = {\r\n    address: cell.address,\r\n    type: Cell.Types.Null\r\n  };\r\n};\r\nNullValue.prototype = {\r\n  get value() {\r\n    return null;\r\n  },\r\n  set value(value) {\r\n  },\r\n  get type() {\r\n    return Cell.Types.Null;\r\n  },\r\n  get effectiveType() {\r\n    return Cell.Types.Null;\r\n  },\r\n  get address() {\r\n    return this.model.address;\r\n  },\r\n  set address(value) {\r\n    this.model.address = value;\r\n  },\r\n  toCsvString: function() {\r\n    return '';\r\n  },\r\n  release: function() {\r\n  },\r\n  toString: function() {\r\n    return '';\r\n  }\r\n};\r\n\r\nvar NumberValue = function(cell, value) {\r\n  this.model = {\r\n    address: cell.address,\r\n    type: Cell.Types.Number,\r\n    value: value\r\n  };\r\n};\r\nNumberValue.prototype = {\r\n  get value() {\r\n    return this.model.value;\r\n  },\r\n  set value(value) {\r\n    this.model.value = value;\r\n  },\r\n  get type() {\r\n    return Cell.Types.Number;\r\n  },\r\n  get effectiveType() {\r\n    return Cell.Types.Number;\r\n  },\r\n  get address() {\r\n    return this.model.address;\r\n  },\r\n  set address(value) {\r\n    this.model.address = value;\r\n  },\r\n  toCsvString: function() {\r\n    return '' + this.model.value;\r\n  },\r\n  release: function() {\r\n  },\r\n  toString: function() {\r\n    return this.model.value.toString();\r\n  }\r\n};\r\n\r\nvar StringValue = function(cell, value) {\r\n  this.model = {\r\n    address: cell.address,\r\n    type: Cell.Types.String,\r\n    value: value\r\n  };\r\n};\r\nStringValue.prototype = {\r\n  get value() {\r\n    return this.model.value;\r\n  },\r\n  set value(value) {\r\n    this.model.value = value;\r\n  },\r\n  get type() {\r\n    return Cell.Types.String;\r\n  },\r\n  get effectiveType() {\r\n    return Cell.Types.String;\r\n  },\r\n  get address() {\r\n    return this.model.address;\r\n  },\r\n  set address(value) {\r\n    this.model.address = value;\r\n  },\r\n  toCsvString: function() {\r\n    return '\"' + this.model.value.replace(/\"/g, '\"\"') + '\"';\r\n  },\r\n  release: function() {\r\n  },\r\n  toString: function() {\r\n    return this.model.value;\r\n  }\r\n};\r\n\r\nvar RichTextValue = function(cell, value) {\r\n  this.model = {\r\n    address: cell.address,\r\n    type: Cell.Types.String,\r\n    value: value\r\n  };\r\n};\r\nRichTextValue.prototype = {\r\n  get value() {\r\n    return this.model.value;\r\n  },\r\n  set value(value) {\r\n    this.model.value = value;\r\n  },\r\n  toString: function() {\r\n    return this.model.value.richText.map(function(t) {\r\n      return t.text;\r\n    }).join('');\r\n  },\r\n  get type() {\r\n    return Cell.Types.RichText;\r\n  },\r\n  get effectiveType() {\r\n    return Cell.Types.RichText;\r\n  },\r\n  get address() {\r\n    return this.model.address;\r\n  },\r\n  set address(value) {\r\n    this.model.address = value;\r\n  },\r\n  toCsvString: function() {\r\n    return '\"' + this.text.replace(/\"/g, '\"\"') + '\"';\r\n  },\r\n  release: function() {\r\n  }\r\n};\r\n\r\nvar DateValue = function(cell, value) {\r\n  this.model = {\r\n    address: cell.address,\r\n    type: Cell.Types.Date,\r\n    value: value\r\n  };\r\n};\r\nDateValue.prototype = {\r\n  get value() {\r\n    return this.model.value;\r\n  },\r\n  set value(value) {\r\n    this.model.value = value;\r\n  },\r\n  get type() {\r\n    return Cell.Types.Date;\r\n  },\r\n  get effectiveType() {\r\n    return Cell.Types.Date;\r\n  },\r\n  get address() {\r\n    return this.model.address;\r\n  },\r\n  set address(value) {\r\n    this.model.address = value;\r\n  },\r\n  toCsvString: function() {\r\n    return this.model.value.toISOString();\r\n  },\r\n  release: function() {\r\n  },\r\n  toString: function() {\r\n    return this.model.value.toString();\r\n  }\r\n};\r\n\r\nvar HyperlinkValue = function(cell, value) {\r\n  this.model = {\r\n    address: cell.address,\r\n    type: Cell.Types.Hyperlink,\r\n    text: value ? value.text : undefined,\r\n    hyperlink: value ? value.hyperlink : undefined\r\n  };\r\n};\r\nHyperlinkValue.prototype = {\r\n  get value() {\r\n    return {\r\n      text: this.model.text,\r\n      hyperlink: this.model.hyperlink\r\n    };\r\n  },\r\n  set value(value) {\r\n    this.model.text = value.text;\r\n    this.model.hyperlink = value.hyperlink;\r\n  },\r\n\r\n  get text() {\r\n    return this.model.text;\r\n  },\r\n  set text(value) {\r\n    this.model.text = value;\r\n  },\r\n  get hyperlink() {\r\n    return this.model.hyperlink;\r\n  },\r\n  set hyperlink(value) {\r\n    this.model.hyperlink = value;\r\n  },\r\n  get type() {\r\n    return Cell.Types.Hyperlink;\r\n  },\r\n  get effectiveType() {\r\n    return Cell.Types.Hyperlink;\r\n  },\r\n  get address() {\r\n    return this.model.address;\r\n  },\r\n  set address(value) {\r\n    this.model.address = value;\r\n  },\r\n  toCsvString: function() {\r\n    return this.model.hyperlink;\r\n  },\r\n  release: function() {\r\n  },\r\n  toString: function() {\r\n    return this.model.text;\r\n  }\r\n};\r\n\r\nvar MergeValue = function(cell, master) {\r\n  this.model = {\r\n    address: cell.address,\r\n    type: Cell.Types.Merge,\r\n    master: master ? master.address : undefined\r\n  };\r\n  this._master = master;\r\n  if (master) {\r\n    master.addMergeRef();\r\n  }\r\n};\r\nMergeValue.prototype = {\r\n  get value() {\r\n    return this._master.value;\r\n  },\r\n  set value(value) {\r\n    if (value instanceof Cell) {\r\n      if (this._master) {\r\n        this._master.releaseMergeRef();\r\n      }\r\n      value.addMergeRef();\r\n      this._master = value;\r\n    } else {\r\n      this._master.value = value;\r\n    }\r\n  },\r\n\r\n  isMergedTo: function(master) {\r\n    return master === this._master;\r\n  },\r\n  get master() {\r\n    return this._master;\r\n  },\r\n  get type() {\r\n    return Cell.Types.Merge;\r\n  },\r\n  get effectiveType() {\r\n    return this._master.effectiveType;\r\n  },\r\n  get address() {\r\n    return this.model.address;\r\n  },\r\n  set address(value) {\r\n    this.model.address = value;\r\n  },\r\n  toCsvString: function() {\r\n    return '';\r\n  },\r\n  release: function() {\r\n    this._master.releaseMergeRef();\r\n  },\r\n  toString: function() {\r\n    return this.value.toString();\r\n  }\r\n};\r\n\r\nvar FormulaValue = function(cell, value) {\r\n  this.model = {\r\n    address: cell.address,\r\n    type: Cell.Types.Formula,\r\n    formula: value ? value.formula : undefined,\r\n    result: value ? value.result : undefined\r\n  };\r\n};\r\nFormulaValue.prototype = {\r\n  get value() {\r\n    return {\r\n      formula: this.model.formula,\r\n      result: this.model.result\r\n    };\r\n  },\r\n  set value(value) {\r\n    this.model.formula = value.formula;\r\n    this.model.result = value.result;\r\n  },\r\n  validate: function(value) {\r\n    switch (Value.getType(value)) {\r\n      case Cell.Types.Null:\r\n      case Cell.Types.String:\r\n      case Cell.Types.Number:\r\n      case Cell.Types.Date:\r\n        break;\r\n      case Cell.Types.Hyperlink:\r\n      case Cell.Types.Formula:\r\n      default:\r\n        throw new Error('Cannot process that type of result value');\r\n    }\r\n  },\r\n  get dependencies() {\r\n    var ranges = this.formula.match(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}:[A-Z]{1,3}\\d{1,4}/g);\r\n    var cells = this.formula.replace(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}:[A-Z]{1,3}\\d{1,4}/g, '')\r\n      .match(/([a-zA-Z0-9]+!)?[A-Z]{1,3}\\d{1,4}/g);\r\n    return {\r\n      ranges: ranges,\r\n      cells: cells\r\n    };\r\n  },\r\n  get formula() {\r\n    return this.model.formula;\r\n  },\r\n  set formula(value) {\r\n    this.model.formula = value;\r\n  },\r\n  get result() {\r\n    return this.model.result;\r\n  },\r\n  set result(value) {\r\n    this.model.result = value;\r\n  },\r\n  get type() {\r\n    return Cell.Types.Formula;\r\n  },\r\n  get effectiveType() {\r\n    var v = this.model.result;\r\n    if ((v === null) || (v === undefined)) {\r\n      return Enums.ValueType.Null;\r\n    } else if ((v instanceof String) || (typeof v == 'string')) {\r\n      return Enums.ValueType.String;\r\n    } else if (typeof v == 'number') {\r\n      return Enums.ValueType.Number;\r\n    } else if (v instanceof Date) {\r\n      return Enums.ValueType.Date;\r\n    } else if (v.text && v.hyperlink) {\r\n      return Enums.ValueType.Hyperlink;\r\n    } else if (v.formula) {\r\n      return Enums.ValueType.Formula;\r\n    } else {\r\n      return Enums.ValueType.Null;\r\n    }\r\n  },\r\n  get address() {\r\n    return this.model.address;\r\n  },\r\n  set address(value) {\r\n    this.model.address = value;\r\n  },\r\n  toCsvString: function() {\r\n    return '' + (this.model.result || '');\r\n  },\r\n  release: function() {\r\n  },\r\n  toString: function() {\r\n    return this.model.result ? this.model.result.toString() : '';\r\n  }\r\n};\r\n\r\nvar SharedStringValue = function(cell, value) {\r\n  this.model = {\r\n    address: cell.address,\r\n    type: Cell.Types.SharedString,\r\n    value: value\r\n  };\r\n};\r\nSharedStringValue.prototype = {\r\n  get value() {\r\n    return this.model.value;\r\n  },\r\n  set value(value) {\r\n    this.model.value = value;\r\n  },\r\n  get type() {\r\n    return Cell.Types.SharedString;\r\n  },\r\n  get effectiveType() {\r\n    return Cell.Types.SharedString;\r\n  },\r\n  get address() {\r\n    return this.model.address;\r\n  },\r\n  set address(value) {\r\n    this.model.address = value;\r\n  },\r\n  toCsvString: function() {\r\n    return '' + this.model.value;\r\n  },\r\n  release: function() {\r\n  },\r\n  toString: function() {\r\n    return this.model.value.toString();\r\n  }\r\n};\r\n\r\nvar BooleanValue = function(cell, value) {\r\n  this.model = {\r\n    address: cell.address,\r\n    type: Cell.Types.Boolean,\r\n    value: value\r\n  };\r\n};\r\nBooleanValue.prototype = {\r\n  get value() {\r\n    return this.model.value;\r\n  },\r\n  set value(value) {\r\n    this.model.value = value;\r\n  },\r\n  get type() {\r\n    return Cell.Types.Boolean;\r\n  },\r\n  get effectiveType() {\r\n    return Cell.Types.Boolean;\r\n  },\r\n  get address() {\r\n    return this.model.address;\r\n  },\r\n  set address(value) {\r\n    this.model.address = value;\r\n  },\r\n  toCsvString: function() {\r\n    return this.model.value ? 1 : 0;\r\n  },\r\n  release: function() {\r\n  },\r\n  toString: function() {\r\n    return this.model.value.toString();\r\n  }\r\n};\r\n\r\nvar ErrorValue = function(cell, value) {\r\n  this.model = {\r\n    address: cell.address,\r\n    type: Cell.Types.Error,\r\n    value: value\r\n  };\r\n};\r\nErrorValue.prototype = {\r\n  get value() {\r\n    return this.model.value;\r\n  },\r\n  set value(value) {\r\n    this.model.value = value;\r\n  },\r\n  get type() {\r\n    return Cell.Types.Error;\r\n  },\r\n  get effectiveType() {\r\n    return Cell.Types.Error;\r\n  },\r\n  get address() {\r\n    return this.model.address;\r\n  },\r\n  set address(value) {\r\n    this.model.address = value;\r\n  },\r\n  toCsvString: function() {\r\n    return this.toString();\r\n  },\r\n  release: function() {\r\n  },\r\n  toString: function() {\r\n    return this.model.value.error.toString();\r\n  }\r\n};\r\n\r\nvar JSONValue = function(cell, value) {\r\n  this.model = {\r\n    address: cell.address,\r\n    type: Cell.Types.String,\r\n    value: JSON.stringify(value),\r\n    rawValue: value\r\n  };\r\n};\r\nJSONValue.prototype = {\r\n  get value() {\r\n    return this.model.rawValue;\r\n  },\r\n  set value(value) {\r\n    this.model.rawValue = value;\r\n    this.model.value = JSON.stringify(value);\r\n  },\r\n  get type() {\r\n    return Cell.Types.String;\r\n  },\r\n  get effectiveType() {\r\n    return Cell.Types.String;\r\n  },\r\n  get address() {\r\n    return this.model.address;\r\n  },\r\n  set address(value) {\r\n    this.model.address = value;\r\n  },\r\n  toCsvString: function() {\r\n    return this.model.value;\r\n  },\r\n  release: function() {\r\n  },\r\n  toString: function() {\r\n    return this.model.value;\r\n  }\r\n};\r\n\r\n// Value is a place to hold common static Value type functions\r\nvar Value = {\r\n  getType:  function(value) {\r\n    if ((value === null) || (value === undefined)) {\r\n      return Cell.Types.Null;\r\n    } else if ((value instanceof String) || (typeof value === 'string')) {\r\n      return Cell.Types.String;\r\n    } else if (typeof value === 'number') {\r\n      return Cell.Types.Number;\r\n    } else if (typeof value === 'boolean') {\r\n      return Cell.Types.Boolean;\r\n    } else if (value instanceof Date) {\r\n      return Cell.Types.Date;\r\n    } else if (value.text && value.hyperlink) {\r\n      return Cell.Types.Hyperlink;\r\n    } else if (value.formula) {\r\n      return Cell.Types.Formula;\r\n    } else if (value.richText) {\r\n      return Cell.Types.RichText;\r\n    } else if (value.sharedString) {\r\n      return Cell.Types.SharedString;\r\n    } else if (value.error) {\r\n      return Cell.Types.Error;\r\n    } else {\r\n      return Cell.Types.JSON;\r\n      //console.log('Error: value=' + value + ', type=' + typeof value)\r\n      // throw new Error('I could not understand type of value: ' +  JSON.stringify(value) + ' - typeof: ' + typeof value);\r\n    }\r\n  },\r\n\r\n  // map valueType to constructor\r\n  types: [\r\n    {t:Cell.Types.Null, f:NullValue},\r\n    {t:Cell.Types.Number, f:NumberValue},\r\n    {t:Cell.Types.String, f:StringValue},\r\n    {t:Cell.Types.Date, f:DateValue},\r\n    {t:Cell.Types.Hyperlink, f:HyperlinkValue},\r\n    {t:Cell.Types.Formula, f:FormulaValue},\r\n    {t:Cell.Types.Merge, f:MergeValue},\r\n    {t:Cell.Types.JSON, f:JSONValue},\r\n    {t:Cell.Types.SharedString, f:SharedStringValue},\r\n    {t:Cell.Types.RichText, f:RichTextValue},\r\n    {t:Cell.Types.Boolean, f:BooleanValue},\r\n    {t:Cell.Types.Error, f:ErrorValue},\r\n  ].reduce(function(p,t){p[t.t]=t.f; return p;}, []),\r\n\r\n  create: function(type, cell, value) {\r\n    var t = this.types[type];\r\n    if (!t) {\r\n      throw new Error('Could not create Value of type ' + type);\r\n    }\r\n    return new t(cell, value);\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/doc/column.js":"/**\r\n * Copyright (c) 2014 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar _ = require('../utils/under-dash');\r\n\r\nvar colCache = require('../utils/col-cache');\r\n// Column defines the column properties for 1 column.\r\n// This includes header rows, widths, key, (style), etc.\r\n// Worksheet will condense the columns as appropriate during serialization\r\nvar Column = module.exports = function (worksheet, number, defn) {\r\n  this._worksheet = worksheet;\r\n  this._number = number;\r\n  if (defn !== false) {\r\n    // sometimes defn will follow\r\n    this.defn = defn;\r\n  }\r\n};\r\n\r\nColumn.prototype = {\r\n  get number() {\r\n    return this._number;\r\n  },\r\n  get worksheet() {\r\n    return this._worksheet;\r\n  },\r\n  get letter() {\r\n    return colCache.n2l(this._number);\r\n  },\r\n  get isCustomWidth() {\r\n    return (this.width !== undefined) && (this.width !== 8);\r\n  },\r\n  get defn() {\r\n    return {\r\n      header: this._header,\r\n      key: this.key,\r\n      width: this.width,\r\n      style: this.style,\r\n      hidden: this.hidden,\r\n      outlineLevel: this.outlineLevel\r\n    };\r\n  },\r\n  set defn(value) {\r\n    if (value) {\r\n      this.key = value.key;\r\n      this.width = value.width;\r\n      this.outlineLevel = value.outlineLevel;\r\n      if (value.style) {\r\n        this.style = value.style;\r\n      }\r\n      else {\r\n        this.style = {}\r\n      }\r\n\r\n      // headers must be set after style\r\n      this.header = value.header;\r\n      this._hidden = !!value.hidden;\r\n    } else {\r\n      delete this._header;\r\n      delete this.key;\r\n      delete this.width;\r\n      this.style = {};\r\n      this.outlineLevel = 0;\r\n    }\r\n  },\r\n  get headers() {\r\n    return this._header && (this._header instanceof Array) ? this._header : [this._header];\r\n  },\r\n  get header() {\r\n    return this._header;\r\n  },\r\n  set header(value) {\r\n    if (value != undefined) {\r\n      var self = this;\r\n      this._header = value;\r\n      this.headers.forEach(function (text, index) {\r\n        self._worksheet.getCell(index + 1, self.number).value = text;\r\n      });\r\n    } else {\r\n      this._header = [];\r\n    }\r\n  },\r\n  get key() {\r\n    return this._key;\r\n  },\r\n  set key(value) {\r\n    if (this._key && (this._worksheet._keys[this._key] === this)) {\r\n      delete this._worksheet._keys[this._key];\r\n    }\r\n    this._key = value;\r\n    if (value) {\r\n      this._worksheet._keys[this._key] = this;\r\n    }\r\n  },\r\n  get hidden() {\r\n    return !!this._hidden;\r\n  },\r\n  set hidden(value) {\r\n    this._hidden = value;\r\n  },\r\n  get outlineLevel() {\r\n    return this._outlineLevel || 0;\r\n  },\r\n  set outlineLevel(value) {\r\n    this._outlineLevel = value;\r\n  },\r\n  get collapsed() {\r\n    return !!(this._outlineLevel && (this._outlineLevel >= this._worksheet.properties.outlineLevelCol));\r\n  },\r\n\r\n  toString: function () {\r\n    return JSON.stringify({\r\n      key: this.key,\r\n      width: this.width,\r\n      headers: this.headers.length ? this.headers : undefined\r\n    });\r\n  },\r\n  equivalentTo: function (other) {\r\n    return (this.width == other.width) &&\r\n            (this.hidden == other.hidden) &&\r\n            (this.outlineLevel == other.outlineLevel) &&\r\n            _.isEqual(this.style, other.style);\r\n  },\r\n  get isDefault() {\r\n    if (this.isCustomWidth) {\r\n      return false;\r\n    }\r\n    if (this.hidden) {\r\n      return false;\r\n    }\r\n    if (this.outlineLevel) {\r\n      return false;\r\n    }\r\n    var s = this.style;\r\n    if (s && (s.font || s.numFmt || s.alignment || s.border || s.fill)) {\r\n      return false;\r\n    }\r\n    return true;\r\n  },\r\n  get headerCount() {\r\n    return this.headers.length;\r\n  },\r\n\r\n  eachCell: function (options, iteratee) {\r\n    var colNumber = this.number;\r\n    if (!iteratee) {\r\n      iteratee = options;\r\n      options = null;\r\n    }\r\n    if (options && options.includeEmpty) {\r\n      this._worksheet.eachRow(options, function (row, rowNumber) {\r\n        iteratee(row.getCell(colNumber), rowNumber);\r\n      });\r\n    } else {\r\n      this._worksheet.eachRow(function (row, rowNumber) {\r\n        var cell = row.findCell(colNumber);\r\n        if (cell) {\r\n          iteratee(cell, rowNumber);\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  // =========================================================================\r\n  // styles\r\n  _applyStyle: function (name, value) {\r\n    this.style[name] = value;\r\n    this.eachCell(function (cell) {\r\n      cell[name] = value;\r\n    });\r\n    return value;\r\n  },\r\n\r\n  get numFmt() {\r\n    return this.style.numFmt;\r\n  },\r\n  set numFmt(value) {\r\n    this._applyStyle('numFmt', value);\r\n  },\r\n  get font() {\r\n    return this.style.font;\r\n  },\r\n  set font(value) {\r\n    this._applyStyle('font', value);\r\n  },\r\n  get alignment() {\r\n    return this.style.alignment;\r\n  },\r\n  set alignment(value) {\r\n    this._applyStyle('alignment', value);\r\n  },\r\n  get border() {\r\n    return this.style.border;\r\n  },\r\n  set border(value) {\r\n    this._applyStyle('border', value);\r\n  },\r\n  get fill() {\r\n    return this.style.fill;\r\n  },\r\n  set fill(value) {\r\n    this._applyStyle('fill', value);\r\n  }\r\n};\r\n\r\n// =============================================================================\r\n// static functions\r\n\r\nColumn.toModel = function (columns) {\r\n  // Convert array of Column into compressed list cols\r\n  var cols = [];\r\n  var col = null;\r\n  if (columns) {\r\n    columns.forEach(function (column, index) {\r\n      if (column.isDefault) {\r\n        if (col) {\r\n          col = null;\r\n        }\r\n      } else {\r\n        if (!col || !column.equivalentTo(col)) {\r\n          col = {\r\n            min: index + 1,\r\n            max: index + 1,\r\n            width: column.width,\r\n            style: column.style,\r\n            isCustomWidth: column.isCustomWidth,\r\n            hidden: column.hidden,\r\n            outlineLevel: column.outlineLevel,\r\n            collapsed: column.collapsed\r\n          };\r\n          cols.push(col);\r\n        } else {\r\n          col.max = index + 1;\r\n        }\r\n      }\r\n    });\r\n  }\r\n  return cols.length ? cols : undefined;\r\n};\r\n\r\nColumn.fromModel = function (worksheet, cols) {\r\n  cols = cols || [];\r\n  var columns = [];\r\n  var count = 1;\r\n  var index = 0;\r\n  while (index < cols.length) {\r\n    var col = cols[index++];\r\n    while (count < col.min) {\r\n      columns.push(new Column(worksheet, count++));\r\n    }\r\n    while (count <= col.max) {\r\n      columns.push(new Column(worksheet, count++, col));\r\n    }\r\n  }\r\n  return columns.length ? columns : null;\r\n};","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/doc/data-validations.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar DataValidations = module.exports = function(model) {\r\n  this.model = model || {};\r\n};\r\n\r\nDataValidations.prototype = {\r\n  add: function(address, validation) {\r\n    return this.model[address] = validation;\r\n  },\r\n  find: function(address) {\r\n    return this.model[address];\r\n  },\r\n  remove: function(address) {\r\n    this.model[address] = undefined;\r\n  }\r\n};\r\n\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/doc/defined-names.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar _ = require('../utils/under-dash');\r\nvar colCache = require('../utils/col-cache');\r\nvar CellMatrix = require('../utils/cell-matrix');\r\nvar Range = require('./range');\r\nvar rangeRegexp = /\\$(\\w+)\\$(\\d+)(:\\$(\\w+)\\$(\\d+))?/;\r\n\r\nvar DefinedNames = module.exports = function() {\r\n  this.matrixMap = {};\r\n};\r\n\r\nDefinedNames.prototype = {\r\n  getMatrix: function(name) {\r\n    return this.matrixMap[name] || (this.matrixMap[name] = new CellMatrix());\r\n  },\r\n\r\n  // add a name to a cell. locStr in the form SheetName!$col$row or SheetName!$c1$r1:$c2:$r2\r\n  add: function(locStr, name) {\r\n    var location = colCache.decodeEx(locStr);\r\n    this.addEx(location, name);\r\n  },\r\n  addEx: function(location, name) {\r\n    var matrix = this.getMatrix(name);\r\n    if (location.top) {\r\n      for (var col = location.left; col <= location.right; col++) {\r\n        for (var row = location.top; row <= location.bottom; row++) {\r\n          var address = {\r\n            sheetName: location.sheetName,\r\n            address: colCache.n2l(col) + row,\r\n            row: row,\r\n            col: col\r\n          };\r\n\r\n          matrix.addCellEx(address);\r\n        }\r\n      }\r\n    } else {\r\n      matrix.addCellEx(location);\r\n    }\r\n  },\r\n\r\n  remove: function(locStr, name) {\r\n    var location = colCache.decodeEx(locStr);\r\n    this.removeEx(location, name);\r\n  },\r\n  removeEx: function(location, name) {\r\n    var matrix = this.getMatrix(name);\r\n    matrix.removeCellEx(location);\r\n  },\r\n  removeAllNames: function(location) {\r\n    _.each(this.matrixMap, function(matrix) {\r\n      matrix.removeCellEx(location);\r\n    });\r\n  },\r\n\r\n  forEach: function(callback) {\r\n    _.each(this.matrixMap, function(matrix, name) {\r\n      matrix.forEach(function(cell) {\r\n        callback(name, cell);\r\n      });\r\n    });\r\n  },\r\n\r\n  // get all the names of a cell\r\n  getNames: function(addressStr) {\r\n    return this.getNamesEx(colCache.decodeEx(addressStr));\r\n  },\r\n  getNamesEx: function(address) {\r\n    return _.map(this.matrixMap, function(matrix, name) {\r\n      if (matrix.findCellEx(address)) {\r\n        return name;\r\n      }\r\n    }).filter(function(name) { return name; });\r\n  },\r\n\r\n  _explore: function(matrix, cell) {\r\n    cell.mark = false;\r\n    var sheetName = cell.sheetName;\r\n\r\n    var range = new Range(cell.row, cell.col, cell.row, cell.col, sheetName);\r\n    var x, y;\r\n\r\n    // grow vertical - only one col to worry about\r\n    function vGrow(y, edge) {\r\n      var c = matrix.findCellAt(sheetName, y, cell.col);\r\n      if (!c || !c.mark) { return false; }\r\n      range[edge] = y;\r\n      c.mark = false;\r\n      return true;\r\n    }\r\n    for (y = cell.row - 1; vGrow(y, 'top'); y--) {}\r\n    for (y = cell.row + 1; vGrow(y, 'bottom'); y++) {}\r\n\r\n    // grow horizontal - ensure all rows can grow\r\n    function hGrow(x, edge) {\r\n      var c, cells = [];\r\n      for (y = range.top; y <= range.bottom; y++) {\r\n        c = matrix.findCellAt(sheetName, y, x);\r\n        if (c && c.mark) {\r\n          cells.push(c);\r\n        } else {\r\n          return false;\r\n        }\r\n      }\r\n      range[edge] = x;\r\n      for (var i = 0; i < cells.length; i++) {\r\n        cells[i].mark = false;\r\n      }\r\n      return true;\r\n    }\r\n    for (x = cell.col - 1; hGrow(x, 'left'); x--) {}\r\n    for (x = cell.col + 1; hGrow(x, 'right'); x++) {}\r\n\r\n    return range;\r\n  },\r\n\r\n  getRanges: function(name, matrix) {\r\n    var self = this;\r\n    matrix = matrix || this.matrixMap[name];\r\n\r\n    if (!matrix) {\r\n      return { name: name, ranges: [] };\r\n    }\r\n\r\n    // mark and sweep!\r\n    matrix.forEach(function(cell) { cell.mark = true; });\r\n    var ranges = matrix.map(function(cell) {\r\n        return cell.mark && self._explore(matrix, cell);\r\n      })\r\n      .filter(function(range) { return range; })\r\n      .map(function(range) { return range.$shortRange; });\r\n\r\n    return {\r\n      name: name, ranges: ranges\r\n    };\r\n  },\r\n\r\n  get model() {\r\n    var self = this;\r\n    // To get names per cell - just iterate over all names finding cells if they exist\r\n    return _.map(this.matrixMap, function(matrix, name) {\r\n        return self.getRanges(name, matrix);\r\n      })\r\n      .filter(function(definedName) {\r\n        return definedName.ranges.length;\r\n      });\r\n  },\r\n  set model(value) {\r\n    // value is [ { name, ranges }, ... ]\r\n    var matrixMap = this.matrixMap = {};\r\n    value.forEach(function(definedName) {\r\n      var matrix = matrixMap[definedName.name] = new CellMatrix();\r\n      definedName.ranges.forEach(function(rangeStr) {\r\n        if(rangeRegexp.test(rangeStr.split('!').pop() || '')) {\r\n          matrix.addCell(rangeStr);\r\n        }\r\n      });\r\n    });\r\n  }\r\n};\r\n\r\n//<definedNames>\r\n//  <definedName name=\"Corners\">Sheet1!$H$1,Sheet1!$H$3,Sheet1!$J$3,Sheet1!$J$1</definedName>\r\n//  <definedName name=\"CrossSheet\">Sheet2!$A$1,Sheet1!$A$4,Sheet2!$C$1</definedName>\r\n//  <definedName name=\"Ducks\">Sheet1!$A$1:$A$3</definedName>\r\n//  <definedName name=\"Intersection\">Sheet1!$H$1,Sheet1!$L$1</definedName>\r\n//</definedNames>\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/utils/cell-matrix.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar _ = require('./under-dash');\r\n\r\nvar utils = require('./utils');\r\nvar colCache = require('./col-cache');\r\n\r\nvar CellMatrix = function(template) {\r\n  this.template = template;\r\n  this.sheets = {};\r\n};\r\n\r\nCellMatrix.prototype = {\r\n  addCell: function(addressStr) {\r\n    this.addCellEx(colCache.decodeEx(addressStr));\r\n  },\r\n  getCell: function(addressStr) {\r\n    return this.findCellEx(colCache.decodeEx(addressStr), true);\r\n  },\r\n  findCell: function(addressStr) {\r\n    return this.findCellEx(colCache.decodeEx(addressStr), false);\r\n  },\r\n\r\n  findCellAt: function(sheetName, rowNumber, colNumber) {\r\n    var sheet = this.sheets[sheetName];\r\n    var row = sheet && sheet[rowNumber];\r\n    return row && row[colNumber];\r\n  },\r\n  addCellEx: function(address) {\r\n    if (address.top) {\r\n      for (var row = address.top; row <= address.bottom; row++) {\r\n        for (var col = address.left; col <= address.right; col++) {\r\n          this.getCellAt(address.sheetName, row, col);\r\n        }\r\n      }\r\n    } else {\r\n      this.findCellEx(address, true);\r\n    }\r\n  },\r\n  getCellEx: function(address) {\r\n    return this.findCellEx(address, true);\r\n  },\r\n  findCellEx: function(address, create) {\r\n    var sheet = this.findSheet(address, create);\r\n    var row = this.findSheetRow(sheet, address, create);\r\n    return this.findRowCell(row, address, create);\r\n  },\r\n  getCellAt: function(sheetName, rowNumber, colNumber) {\r\n    var sheet = this.sheets[sheetName] || (this.sheets[sheetName] = []);\r\n    var row = sheet[rowNumber] || (sheet[rowNumber] = []);\r\n    return row[colNumber] || (row[colNumber] = {\r\n      sheetName: sheetName,\r\n      address: colCache.n2l(colNumber) + rowNumber,\r\n      row: rowNumber,\r\n      col: colNumber\r\n    });\r\n  },\r\n\r\n  removeCellEx: function(address) {\r\n    var sheet = this.findSheet(address);\r\n    if (!sheet) { return; }\r\n    var row = this.findSheetRow(sheet, address);\r\n    if (!row) { return; }\r\n    delete row[address.col];\r\n  },\r\n\r\n  forEach: function(callback) {\r\n    _.each(this.sheets, function(sheet) {\r\n      if (sheet) sheet.forEach(function(row) {\r\n        if (row) row.forEach(function(cell) {\r\n          if (cell) callback(cell);\r\n        });\r\n      });\r\n    });\r\n  },\r\n  map: function(callback) {\r\n    var results = [];\r\n    this.forEach(function(cell) { results.push(callback(cell)); });\r\n    return results;\r\n  },\r\n\r\n  findSheet: function(address, create) {\r\n    var name = address.sheetName;\r\n    if (this.sheets[name]) {\r\n      return this.sheets[name];\r\n    }\r\n    if (create) {\r\n      return (this.sheets[name] = []);\r\n    }\r\n  },\r\n  findSheetRow: function(sheet, address, create) {\r\n    var row = address.row;\r\n    if (sheet && sheet[row]) {\r\n      return sheet[row];\r\n    }\r\n    if (create) {\r\n      return (sheet[row] = []);\r\n    }\r\n  },\r\n  findRowCell: function(row, address, create) {\r\n    var col = address.col;\r\n    if (row && row[col]) {\r\n      return row[col];\r\n    }\r\n    if (create) {\r\n      return (row[col] = this.template ? Object.assign(address, JSON.parse(JSON.stringify(this.template))) : address);\r\n    }\r\n  }\r\n};\r\n\r\nmodule.exports = CellMatrix;","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xlsx.js":"/**\r\n * Copyright (c) 2014 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar fs = require('fs');\r\nvar ZipStream = require('../utils/zip-stream');\r\nvar StreamBuf = require('../utils/stream-buf');\r\nvar PromishLib = require('../utils/promish');\r\n\r\nvar utils = require('../utils/utils');\r\nvar XmlStream = require('../utils/xml-stream');\r\n\r\nvar StylesXform = require('./xform/style/styles-xform');\r\n\r\nvar CoreXform = require('./xform/core/core-xform');\r\nvar SharedStringsXform = require('./xform/strings/shared-strings-xform');\r\nvar RelationshipsXform = require('./xform/core/relationships-xform');\r\nvar ContentTypesXform = require('./xform/core/content-types-xform');\r\nvar AppXform = require('./xform/core/app-xform');\r\nvar WorkbookXform = require('./xform/book/workbook-xform');\r\nvar WorksheetXform = require('./xform/sheet/worksheet-xform');\r\n\r\nvar theme1Xml = require('./xml/theme1.xml.js');\r\n\r\nvar XLSX = module.exports = function (workbook) {\r\n  this.workbook = workbook;\r\n};\r\n\r\n\r\nXLSX.RelType = require('./rel-type');\r\n\r\n\r\nXLSX.prototype = {\r\n\r\n// ===============================================================================\r\n// Workbook\r\n  // =========================================================================\r\n  // Read\r\n\r\n  readFile: function (filename) {\r\n    var self = this;\r\n    var stream;\r\n    return utils.fs.exists(filename)\r\n      .then(function (exists) {\r\n        if (!exists) {\r\n          throw new Error('File not found: ' + filename);\r\n        }\r\n        stream = fs.createReadStream(filename);\r\n        return self.read(stream);\r\n      })\r\n      .then(function (workbook) {\r\n        stream.close();\r\n        return workbook;\r\n      });\r\n  },\r\n  parseRels: function (stream) {\r\n    var xform = new RelationshipsXform();\r\n    return xform.parseStream(stream);\r\n  },\r\n  parseWorkbook: function (stream) {\r\n    var xform = new WorkbookXform();\r\n    return xform.parseStream(stream);\r\n  },\r\n  parseSharedStrings: function (stream) {\r\n    var xform = new SharedStringsXform();\r\n    return xform.parseStream(stream);\r\n  },\r\n  reconcile: function (model) {\r\n    var workbookXform = new WorkbookXform();\r\n    var worksheetXform = new WorksheetXform();\r\n    \r\n    workbookXform.reconcile(model);\r\n    var sheetOptions = {\r\n      styles: model.styles,\r\n      sharedStrings: model.sharedStrings,\r\n      date1904: model.properties.date1904\r\n    };\r\n    model.worksheets.forEach(function (worksheet) {\r\n      worksheet.relationships = model.worksheetRels[worksheet.sheetNo];\r\n      worksheetXform.reconcile(worksheet, sheetOptions);\r\n    });\r\n\r\n    // delete unnecessary parts\r\n    model.worksheetHash = undefined;\r\n    model.worksheetRels = undefined;\r\n    model.globalRels = undefined;\r\n    model.sharedStrings = undefined;\r\n    model.workbookRels = undefined;\r\n    model.sheetDefs = undefined;\r\n    model.styles = undefined;\r\n  },\r\n  processWorksheetEntry: function(entry, model) {\r\n    var match = entry.path.match(/xl\\/worksheets\\/sheet(\\d+)\\.xml/);\r\n    if (match) {\r\n      var sheetNo = match[1];\r\n      var xform = new WorksheetXform();\r\n      return xform.parseStream(entry)\r\n        .then(function (worksheet) {\r\n          worksheet.sheetNo = sheetNo;\r\n          model.worksheetHash[entry.path] = worksheet;\r\n          model.worksheets.push(worksheet);\r\n        });\r\n    }\r\n  },\r\n  processWorksheetRelsEntry: function(entry, model) {\r\n    var match = entry.path.match(/xl\\/worksheets\\/_rels\\/sheet(\\d+)\\.xml.rels/);\r\n    if (match) {\r\n      var sheetNo = match[1];\r\n      var xform = new RelationshipsXform();\r\n      return xform.parseStream(entry)\r\n        .then(function(relationships) {\r\n          model.worksheetRels[sheetNo] = relationships;\r\n        });\r\n    }\r\n  },\r\n  processThemeEntry: function(entry, model) {\r\n    var match = entry.path.match(/xl\\/theme\\/([a-zA-Z0-9]+)\\.xml/);\r\n    if (match) {\r\n      return new PromishLib.Promish(function(resolve, reject) {\r\n        var name = match[1];\r\n        // TODO: stream entry into buffer and store the xml in the model.themes[]\r\n        var stream = new StreamBuf();\r\n        entry.on('error', reject);\r\n        stream.on('error', reject);\r\n        stream.on('finish', function() {\r\n          model.themes[name] = stream.read().toString();\r\n          resolve();\r\n        });\r\n        entry.pipe(stream);\r\n      });\r\n    }\r\n  },\r\n  processIgnoreEntry: function(entry) {\r\n    entry.autodrain();\r\n  },\r\n  createInputStream: function () {\r\n    var self = this;\r\n    var model = {\r\n      worksheets: [],\r\n      worksheetHash: {},\r\n      worksheetRels: [],\r\n      themes: {},\r\n    };\r\n\r\n    // we have to be prepared to read the zip entries in whatever order they arrive\r\n    var promises = [];\r\n    var stream = new ZipStream.ZipReader();\r\n    stream.on('entry', function (entry) {\r\n      var promise = null;\r\n\r\n      var entryPath = entry.path;\r\n      if (entryPath[0] === '/') {\r\n        entryPath = entryPath.substr(1);\r\n      }\r\n      switch (entryPath) {\r\n        case '_rels/.rels':\r\n          promise = self.parseRels(entry)\r\n            .then(function (relationships) {\r\n              model.globalRels = relationships;\r\n            });\r\n          break;\r\n\r\n        case 'xl/workbook.xml':\r\n          promise = self.parseWorkbook(entry)\r\n            .then(function (workbook) {\r\n              model.sheets = workbook.sheets;\r\n              model.definedNames = workbook.definedNames;\r\n              model.views = workbook.views;\r\n              model.properties = workbook.properties;\r\n            });\r\n          break;\r\n\r\n        case 'xl/_rels/workbook.xml.rels':\r\n          promise = self.parseRels(entry)\r\n            .then(function (relationships) {\r\n              model.workbookRels = relationships;\r\n            });\r\n          break;\r\n\r\n        case 'xl/sharedStrings.xml':\r\n          model.sharedStrings = new SharedStringsXform();\r\n          promise = model.sharedStrings.parseStream(entry);\r\n          break;\r\n\r\n        case 'xl/styles.xml':\r\n          model.styles = new StylesXform();\r\n          promise = model.styles.parseStream(entry);\r\n          break;\r\n\r\n        case 'docProps/app.xml':\r\n          var appXform = new AppXform();\r\n          promise = appXform.parseStream(entry)\r\n            .then(function(appProperties) {\r\n              Object.assign(model, {\r\n                company: appProperties.company,\r\n                manager: appProperties.manager\r\n              });\r\n            });\r\n          break;\r\n\r\n        case 'docProps/core.xml':\r\n          var coreXform = new CoreXform();\r\n          promise = coreXform.parseStream(entry)\r\n            .then(function(coreProperties) {\r\n              Object.assign(model, coreProperties);\r\n            });\r\n          break;\r\n\r\n        default:\r\n          promise =\r\n            self.processWorksheetEntry(entry, model) ||\r\n            self.processWorksheetRelsEntry(entry, model) ||\r\n            self.processThemeEntry(entry, model) ||\r\n            self.processIgnoreEntry(entry);\r\n          break;\r\n      }\r\n\r\n      if (promise) {\r\n        promises.push(promise);\r\n        promise = null;\r\n      }\r\n    });\r\n    stream.on('finished', function () {\r\n      PromishLib.Promish.all(promises)\r\n        .then(function () {\r\n          self.reconcile(model);\r\n\r\n          // apply model\r\n          self.workbook.model = model;\r\n        })\r\n        .then(function () {\r\n          stream.emit('done');\r\n        })\r\n        .catch(function (error) {\r\n          stream.emit('error', error);\r\n        });\r\n    });\r\n    return stream;\r\n  },\r\n\r\n  read: function (stream) {\r\n    var self = this;\r\n    var zipStream = this.createInputStream();\r\n    return new PromishLib.Promish(function(resolve, reject) {\r\n      zipStream.on('done', function () {\r\n        resolve(self.workbook);\r\n      }).on('error', function (error) {\r\n        reject(error);\r\n      });\r\n      stream.pipe(zipStream);\r\n    });\r\n  },\r\n\r\n  load: function(data, options) {\r\n    var self = this;\r\n    if (options === undefined) {\r\n      options = {};\r\n    }\r\n    var zipStream = this.createInputStream();\r\n    return new PromishLib.Promish(function(resolve, reject) {\r\n      zipStream.on('done', function () {\r\n        resolve(self.workbook);\r\n      }).on('error', function (error) {\r\n        reject(error);\r\n      });\r\n\r\n      if (options.base64) {\r\n        var buffer = new Buffer(data.toString(), 'base64');\r\n        zipStream.write(buffer);\r\n      } else {\r\n        zipStream.write(data);\r\n      }\r\n      zipStream.end();\r\n    });\r\n  },\r\n\r\n  // =========================================================================\r\n  // Write\r\n\r\n  addContentTypes: function (zip, model) {\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var xform = new ContentTypesXform();\r\n      var xml = xform.toXml(model);\r\n      zip.append(xml, {name: '[Content_Types].xml'});\r\n      resolve();\r\n    });\r\n  },\r\n\r\n  addApp: function (zip, model) {\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var xform = new AppXform();\r\n      var xml = xform.toXml(model);\r\n      zip.append(xml, {name: 'docProps/app.xml'});\r\n      resolve();\r\n    });\r\n  },\r\n\r\n  addCore: function (zip, model) {\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var coreXform = new CoreXform();\r\n      zip.append(coreXform.toXml(model), {name: 'docProps/core.xml'});\r\n      resolve();\r\n    });\r\n  },\r\n\r\n  addThemes: function (zip, model) {\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var themes = model.themes || { theme1: theme1Xml };\r\n      Object.keys(themes).forEach(function(name) {\r\n        var xml = themes[name];\r\n        var path = 'xl/theme/' + name + '.xml';\r\n        zip.append(xml, {name: path});\r\n      });\r\n      resolve();\r\n    });\r\n  },\r\n\r\n  addOfficeRels: function (zip) {\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var xform = new RelationshipsXform();\r\n      var xml = xform.toXml([\r\n          {rId: 'rId1', type: XLSX.RelType.OfficeDocument, target: 'xl/workbook.xml'}\r\n        ]);\r\n      zip.append(xml, {name: '_rels/.rels'});\r\n      resolve();\r\n    });\r\n  },\r\n\r\n  addWorkbookRels: function (zip, model) {\r\n    var count = 1;\r\n    var relationships = [\r\n        {rId: 'rId' + (count++), type: XLSX.RelType.Styles, target: 'styles.xml'},\r\n        {rId: 'rId' + (count++), type: XLSX.RelType.Theme, target: 'theme/theme1.xml'}\r\n    ];\r\n    if (model.sharedStrings.count) {\r\n      relationships.push(\r\n        {rId: 'rId' + (count++), type: XLSX.RelType.SharedStrings, target: 'sharedStrings.xml'}\r\n      );\r\n    }\r\n    model.worksheets.forEach(function (worksheet) {\r\n      worksheet.rId = 'rId' + (count++);\r\n      relationships.push(\r\n        {rId: worksheet.rId, type: XLSX.RelType.Worksheet, target: 'worksheets/sheet' + worksheet.id + '.xml'}\r\n      );\r\n    });\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var xform = new RelationshipsXform();\r\n      var xml = xform.toXml(relationships);\r\n      zip.append(xml, {name: 'xl/_rels/workbook.xml.rels'});\r\n      resolve();\r\n    });\r\n  },\r\n  addSharedStrings: function (zip, model) {\r\n    if (!model.sharedStrings || !model.sharedStrings.count) {\r\n      return PromishLib.Promish.resolve();\r\n    } else {\r\n      return new PromishLib.Promish(function(resolve) {\r\n        zip.append(model.sharedStrings.xml, {name: 'xl/sharedStrings.xml'});\r\n        resolve();\r\n      });\r\n    }\r\n  },\r\n  addStyles: function(zip, model) {\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var xml = model.styles.xml;\r\n      if (xml) {\r\n        zip.append(xml, {name: 'xl/styles.xml'});\r\n      }\r\n      resolve();\r\n    });\r\n  },\r\n  addWorkbook: function (zip, model, xform) {\r\n    return new PromishLib.Promish(function(resolve) {\r\n      zip.append(xform.toXml(model), {name: 'xl/workbook.xml'});\r\n      resolve();\r\n    });\r\n  },\r\n  addWorksheets: function (zip, model, worksheetXform) {\r\n    return new PromishLib.Promish(function(resolve) {\r\n\r\n      // preparation phase\r\n      var relationshipsXform = new RelationshipsXform();\r\n\r\n      // write sheets\r\n      model.worksheets.forEach(function (worksheet) {\r\n        var xmlStream = new XmlStream();\r\n        worksheetXform.render(xmlStream, worksheet);\r\n        zip.append(xmlStream.xml, {name: 'xl/worksheets/sheet' + worksheet.id + '.xml'});\r\n\r\n        if (worksheet.hyperlinks && worksheet.hyperlinks.length) {\r\n          xmlStream = new XmlStream();\r\n          relationshipsXform.render(xmlStream, worksheet.hyperlinks);\r\n          zip.append(xmlStream.xml, {name: 'xl/worksheets/_rels/sheet' + worksheet.id + '.xml.rels'});\r\n        }\r\n      });\r\n\r\n      resolve();\r\n    });\r\n  },\r\n  _finalize: function (zip) {\r\n    var self = this;\r\n\r\n    return new PromishLib.Promish(function(resolve, reject) {\r\n\r\n      zip.on('finish', function () {\r\n        resolve(self);\r\n      });\r\n      zip.on('error', function (error) {\r\n        reject(error);\r\n      });\r\n\r\n      zip.finalize();\r\n    });\r\n  },\r\n  write: function (stream, options) {\r\n    options = options || {};\r\n    var self = this;\r\n    var model = self.workbook.model;\r\n    var zip = new ZipStream.ZipWriter();\r\n    zip.pipe(stream);\r\n\r\n    // ensure following properties have sane values\r\n    model.creator = model.creator || 'ExcelJS';\r\n    model.lastModifiedBy = model.lastModifiedBy || 'ExcelJS';\r\n    model.created = model.created || new Date();\r\n    model.modified = model.modified || new Date();\r\n\r\n    model.useSharedStrings = options.useSharedStrings !== undefined ?\r\n      options.useSharedStrings :\r\n      true;\r\n    model.useStyles = options.useStyles !== undefined ?\r\n      options.useStyles :\r\n      true;\r\n\r\n    // Manage the shared strings\r\n    model.sharedStrings = new SharedStringsXform();\r\n\r\n    // add a style manager to handle cell formats, fonts, etc.\r\n    model.styles = model.useStyles ? new StylesXform(true) : new StylesXform.Mock();\r\n\r\n    // prepare all of the things before the render\r\n    var workbookXform = new WorkbookXform();\r\n    var worksheetXform = new WorksheetXform();\r\n    var prepareOptions = {\r\n      sharedStrings: model.sharedStrings,\r\n      styles: model.styles,\r\n      date1904: model.properties.date1904\r\n    };\r\n    workbookXform.prepare(model);\r\n    model.worksheets.forEach(function (worksheet) {\r\n      worksheetXform.prepare(worksheet, prepareOptions);\r\n    });\r\n\r\n    // render\r\n    var promises = [\r\n      self.addContentTypes(zip, model),\r\n      self.addApp(zip, model),\r\n      self.addCore(zip, model),\r\n      self.addThemes(zip, model),\r\n      self.addOfficeRels(zip, model)\r\n    ];\r\n    return PromishLib.Promish.all(promises)\r\n      .then(function () {\r\n        return self.addWorksheets(zip, model, worksheetXform);\r\n      })\r\n      .then(function () {\r\n        // Some things can only be done after all the worksheets have been processed\r\n        var afters = [\r\n          self.addSharedStrings(zip, model),\r\n          self.addStyles(zip, model),\r\n          self.addWorkbookRels(zip, model)\r\n        ];\r\n        return PromishLib.Promish.all(afters);\r\n      })\r\n      .then(function () {\r\n        return self.addWorkbook(zip, model, workbookXform);\r\n      })\r\n      .then(function () {\r\n        return self._finalize(zip);\r\n      });\r\n  },\r\n  writeFile: function (filename, options) {\r\n    var self = this;\r\n    var stream = fs.createWriteStream(filename);\r\n\r\n    return new PromishLib.Promish(function(resolve, reject) {\r\n      stream.on('finish', function () {\r\n        resolve();\r\n      });\r\n      stream.on('error', function (error) {\r\n        reject(error);\r\n      });\r\n\r\n      self.write(stream, options)\r\n        .then(function () {\r\n          stream.end();\r\n        })\r\n        .catch(function (error) {\r\n          reject(error);\r\n        });\r\n    });\r\n  },\r\n  writeBuffer: function(options) {\r\n    var self = this;\r\n    var stream = new StreamBuf();\r\n    return self.write(stream, options)\r\n      .then(function() {\r\n        return stream.read();\r\n      });\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/utils/zip-stream.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\n// The purpose of this module is to wrap the js-zip library into a streaming zip library\r\n// since most of the exceljs code uses streams.\r\n// One day I might find (or build) a properly streaming browser safe zip lib\r\n\r\nvar events = require('events');\r\nvar PromishLib = require('./promish');\r\n\r\nvar JSZip = require('jszip');\r\n\r\nvar utils = require('./utils');\r\nvar StreamBuf = require('./stream-buf');\r\n\r\n\r\n// =============================================================================\r\n// The ZipReader class\r\n// Unpacks an incoming zip stream\r\nvar ZipReader = function() {\r\n  var self = this;\r\n  this.count = 0;\r\n  this.jsZip = new JSZip();\r\n  this.stream = new StreamBuf();\r\n  this.stream.on('finish', function() {\r\n    self._process();\r\n  });\r\n};\r\n\r\nutils.inherits(ZipReader, events.EventEmitter, {\r\n  _finished: function() {\r\n    var self = this;\r\n    if (!--this.count) {\r\n      PromishLib.Promish.resolve()\r\n        .then(function() {\r\n          self.emit('finished');\r\n        });\r\n    }\r\n  },\r\n  _process: function() {\r\n    var self = this;\r\n    var content = this.stream.read();\r\n    this.jsZip.loadAsync(content)\r\n      .then(function(zip) {\r\n        zip.forEach(function(path, entry) {\r\n          if (!entry.dir) {\r\n            self.count++;\r\n            entry.async('string')\r\n              .then(function (data) {\r\n                var entryStream = new StreamBuf();\r\n                entryStream.path = path;\r\n                // console.log('data', path, data.toString())\r\n                entryStream.write(data);\r\n                entryStream.autodrain = function () {\r\n                  self._finished();\r\n                };\r\n                entryStream.on('finish', function () {\r\n                  self._finished();\r\n                });\r\n\r\n                self.emit('entry', entryStream);\r\n              })\r\n              .catch(function (error) {\r\n                self.emit('error', error);\r\n              });\r\n          }\r\n        });\r\n      })\r\n      .catch(function (error) {\r\n        self.emit('error', error);\r\n      });\r\n  },\r\n\r\n  // ==========================================================================\r\n  // Stream.Writable interface\r\n  write: function(data, encoding, callback) {\r\n    return this.stream.write(data, encoding, callback);\r\n  },\r\n  cork: function() {\r\n    return this.stream.cork();\r\n  },\r\n  uncork: function() {\r\n    return this.stream.uncork();\r\n  },\r\n  end: function() {\r\n    return this.stream.end();\r\n  }\r\n});\r\n\r\n// =============================================================================\r\n// The ZipWriter class\r\n// Packs streamed data into an output zip stream\r\nvar ZipWriter = function() {\r\n  this.zip = new JSZip();\r\n  this.stream = new StreamBuf();\r\n};\r\n\r\nutils.inherits(ZipWriter, events.EventEmitter, {\r\n\r\n  append: function(data, options) {\r\n    this.zip.file(options.name, data);\r\n  },\r\n  finalize: function() {\r\n    var self = this;\r\n\r\n    var options = {\r\n      type: 'nodebuffer',\r\n      compression: 'DEFLATE'\r\n    };\r\n    return this.zip.generateAsync(options)\r\n      .then(function(content) {\r\n        // console.log('zip finalize', typeof content, content)\r\n        self.stream.end(content);\r\n        self.emit('finish');\r\n      });\r\n  },\r\n\r\n  // ==========================================================================\r\n  // Stream.Readable interface\r\n  read: function(size) {\r\n    return this.stream.read(size);\r\n  },\r\n  setEncoding: function(encoding) {\r\n    return this.stream.setEncoding(encoding);\r\n  },\r\n  pause: function() {\r\n    return this.stream.pause();\r\n  },\r\n  resume: function() {\r\n    return this.stream.resume();\r\n  },\r\n  isPaused: function() {\r\n    return this.stream.isPaused();\r\n  },\r\n  pipe: function(destination, options) {\r\n    return this.stream.pipe(destination, options);\r\n  },\r\n  unpipe: function(destination) {\r\n    return this.stream.unpipe(destination);\r\n  },\r\n  unshift: function(chunk) {\r\n    return this.stream.unshift(chunk);\r\n  },\r\n  wrap: function(stream) {\r\n    return this.stream.wrap(stream);\r\n  }\r\n});\r\n\r\n// =============================================================================\r\n\r\nmodule.exports = {\r\n  ZipReader: ZipReader,\r\n  ZipWriter: ZipWriter\r\n};","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/utils/stream-buf.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar Stream = require('stream');\r\nvar PromishLib = require('./promish');\r\n\r\nvar utils = require('./utils');\r\nvar StringBuf = require('./string-buf');\r\n\r\n\r\n// =============================================================================\r\n// data chunks - encapsulating incoming data\r\nvar StringChunk = function(data, encoding) {\r\n  this._data = data;\r\n  this._encoding = encoding;\r\n};\r\nStringChunk.prototype = {\r\n  get length() {\r\n    return this.toBuffer().length;\r\n  },\r\n  // copy to target buffer\r\n  copy: function(target, targetOffset, offset, length) {\r\n    return this.toBuffer().copy(target, targetOffset, offset, length);\r\n  },\r\n  toBuffer: function() {\r\n    if (!this._buffer) {\r\n      this._buffer = new Buffer(this._data, this._encoding);\r\n    }\r\n    return this._buffer;\r\n  }\r\n};\r\nvar StringBufChunk = function(data) {\r\n  this._data = data;\r\n};\r\nStringBufChunk.prototype = {\r\n  get length() {\r\n    return this._data.length;\r\n  },\r\n  // copy to target buffer\r\n  copy: function(target, targetOffset, offset, length) {\r\n    return this._data._buf.copy(target, targetOffset, offset, length);\r\n  },\r\n  toBuffer: function() {\r\n    return this._data.toBuffer();\r\n  }\r\n};\r\nvar BufferChunk = function(data) {\r\n  this._data = data;\r\n};\r\nBufferChunk.prototype = {\r\n  get length() {\r\n    return this._data.length;\r\n  },\r\n  // copy to target buffer\r\n  copy: function(target, targetOffset, offset, length) {\r\n    this._data.copy(target, targetOffset, offset, length);\r\n  },\r\n  toBuffer: function() {\r\n    return this._data;\r\n  }\r\n};\r\n\r\n// =============================================================================\r\n// ReadWriteBuf - a single buffer supporting simple read-write\r\nvar ReadWriteBuf = function(size) {\r\n  this.size = size;\r\n  // the buffer\r\n  this.buffer = new Buffer(size);\r\n  // read index\r\n  this.iRead = 0;\r\n  // write index\r\n  this.iWrite = 0;\r\n};\r\nReadWriteBuf.prototype = {\r\n  toBuffer: function() {\r\n    if ((this.iRead === 0) && (this.iWrite === this.size)) {\r\n      return this.buffer;\r\n    } else {\r\n      var buf = new Buffer(this.iWrite - this.iRead);\r\n      this.buffer.copy(buf, 0, this.iRead, this.iWrite);\r\n      return buf;\r\n    }\r\n  },\r\n  get length() {\r\n    return this.iWrite - this.iRead;\r\n  },\r\n  get eod() {\r\n    return this.iRead === this.iWrite;\r\n  },\r\n  get full() {\r\n    return this.iWrite === this.size;\r\n  },\r\n  read: function(size) {\r\n    // read size bytes from buffer and return buffer\r\n    if (size === 0) {\r\n      // special case - return null if no data requested\r\n      return null;\r\n    } else if ((size === undefined) || (size >= this.length)) {\r\n      // if no size specified or size is at least what we have then return all of the bytes\r\n      var buf = this.toBuffer();\r\n      this.iRead = this.iWrite;\r\n      return buf;\r\n    } else {\r\n      // otherwise return a chunk\r\n      var buf = new Buffer(size);\r\n      this.buffer.copy(buf, 0, this.iRead, size);\r\n      this.iRead += size;\r\n      return buf;\r\n    }\r\n  },\r\n  write: function(chunk, offset, length) {\r\n    // write as many bytes from data from optional source offset\r\n    // and return number of bytes written\r\n    var size = Math.min(length, this.size - this.iWrite);\r\n    chunk.copy(this.buffer, this.iWrite, offset, offset + size);\r\n    this.iWrite += size;\r\n    return size;\r\n  }\r\n};\r\n\r\n// =============================================================================\r\n// StreamBuf - a multi-purpose read-write stream\r\n//  As MemBuf - write as much data as you like. Then call toBuffer() to consolidate\r\n//  As StreamHub - pipe to multiple writables\r\n//  As readable stream - feed data into the writable part and have some other code read from it.\r\nvar StreamBuf = module.exports = function(options) {\r\n  options = options || {};\r\n  this.bufSize = options.bufSize || 1024 * 1024;\r\n  this.buffers = [];\r\n\r\n  // batch mode fills a buffer completely before passing the data on\r\n  // to pipes or 'readable' event listeners\r\n  this.batch = options.batch || false;\r\n\r\n  this.corked = false;\r\n  // where in the current writable buffer we're up to\r\n  this.inPos = 0;\r\n\r\n  // where in the current readable buffer we've read up to\r\n  this.outPos = 0;\r\n\r\n  // consuming pipe streams go here\r\n  this.pipes = [];\r\n\r\n  // controls emit('data') \r\n  this.paused = false;\r\n\r\n  this.encoding = null;\r\n};\r\n\r\nutils.inherits(StreamBuf, Stream.Duplex, {\r\n  // writable\r\n  // event drain - if write returns false (which it won't), indicates when safe to write again.\r\n  // finish - end() has been called\r\n  // pipe(src) - pipe() has been called on readable\r\n  // unpipe(src) - unpipe() has been called on readable\r\n  // error - duh\r\n\r\n  _getWritableBuffer: function() {\r\n    if (this.buffers.length) {\r\n      var last = this.buffers[this.buffers.length - 1];\r\n      if (!last.full) {\r\n        return last;\r\n      }\r\n    }\r\n    var buf = new ReadWriteBuf(this.bufSize);\r\n    this.buffers.push(buf);\r\n    return buf;\r\n  },\r\n\r\n  _pipe: function(chunk) {\r\n    var write = function(pipe) {\r\n      return new PromishLib.Promish(function(resolve, reject) {\r\n        pipe.write(chunk.toBuffer(), function() {\r\n          resolve();\r\n        });\r\n      });\r\n    };\r\n    var promises = this.pipes.map(write);\r\n    return promises.length ?\r\n      PromishLib.Promish.all(promises).then(utils.nop) :\r\n      PromishLib.Promish.resolve();\r\n  },\r\n  _writeToBuffers: function(chunk) {\r\n    var inPos = 0;\r\n    var inLen = chunk.length;\r\n    while (inPos < inLen) {\r\n      // find writable buffer\r\n      var buffer = this._getWritableBuffer();\r\n\r\n      // write some data\r\n      inPos += buffer.write(chunk, inPos, inLen - inPos);\r\n    }\r\n  },\r\n  write: function(data, encoding, callback) {\r\n    if (encoding instanceof Function) {\r\n      callback = encoding;\r\n      encoding = 'utf8';\r\n    }\r\n    callback = callback || utils.nop;\r\n\r\n    // encapsulate data into a chunk\r\n    var chunk;\r\n    if (data instanceof StringBuf) {\r\n      chunk = new StringBufChunk(data);\r\n    } else if (data instanceof Buffer) {\r\n      chunk = new BufferChunk(data);\r\n    } else {\r\n      // assume string\r\n      chunk = new StringChunk(data, encoding);\r\n    }\r\n\r\n    // now, do something with the chunk\r\n    if (this.pipes.length) {\r\n      if (this.batch) {\r\n        this._writeToBuffers(chunk);\r\n        while (!this.corked && (this.buffers.length > 1)) {\r\n          this._pipe(this.buffers.shift());\r\n        }\r\n      } else {\r\n        if (!this.corked) {\r\n          this._pipe(chunk).then(callback);\r\n        } else {\r\n          this._writeToBuffers(chunk);\r\n          process.nextTick(callback);\r\n        }\r\n      }\r\n    } else {\r\n      if (!this.paused) {\r\n        this.emit('data', chunk.toBuffer());\r\n      }\r\n\r\n      this._writeToBuffers(chunk);\r\n      this.emit('readable');\r\n    }\r\n\r\n    return true;\r\n  },\r\n  cork: function() {\r\n    this.corked = true;\r\n  },\r\n  _flush: function(destination) {\r\n    // if we have comsumers...\r\n    if (this.pipes.length) {\r\n      // and there's stuff not written\r\n      while (this.buffers.length) {\r\n        this._pipe(this.buffers.shift());\r\n      }\r\n    }\r\n  },\r\n  uncork: function() {\r\n    this.corked = false;\r\n    this._flush();\r\n  },\r\n  end: function(chunk, encoding, callback) {\r\n    var self = this;\r\n    var writeComplete = function(error) {\r\n      if (error) {\r\n        callback(error);\r\n      } else {\r\n        self._flush();\r\n        self.pipes.forEach(function(pipe) {\r\n          pipe.end();\r\n        });\r\n        self.emit('finish');\r\n      }\r\n    };\r\n    if (chunk) {\r\n      this.write(chunk, encoding, writeComplete);\r\n    } else {\r\n      writeComplete();\r\n    }\r\n  },\r\n\r\n  // readable\r\n  // event readable - some data is now available\r\n  // event data - switch to flowing mode - feeds chunks to handler\r\n  // event end - no more data\r\n  // event close - optional, indicates upstream close\r\n  // event error - duh\r\n  read: function(size) {\r\n    // read min(buffer, size || infinity)\r\n    if (size) {\r\n      var buffers = [];\r\n      while (size && this.buffers.length && !this.buffers[0].eod) {\r\n        var first = this.buffers[0];\r\n        var buffer = first.read(size);\r\n        size -= buffer.length;\r\n        buffers.push(buffer);\r\n        if (first.eod && first.full) {\r\n          this.buffers.shift();\r\n        }\r\n      }\r\n      return Buffer.concat(buffers);\r\n    } else {\r\n      var buffers = this.buffers.map(function(buffer) {\r\n        return buffer.toBuffer();\r\n      }).filter(function(data) {\r\n        return data;\r\n      });\r\n      this.buffers = [];\r\n      return Buffer.concat(buffers);\r\n    }\r\n  },\r\n  setEncoding: function(encoding) {\r\n    // causes stream.read or stream.on('data) to return strings of encoding instead of Buffer objects\r\n    this.encoding = encoding;\r\n  },\r\n  pause: function() {\r\n    this.paused = true;\r\n  },\r\n  resume: function() {\r\n    this.paused = false;\r\n  },\r\n  isPaused: function() {\r\n    return this.paused ? true : false;\r\n  },\r\n  pipe: function(destination, options) {\r\n    // add destination to pipe list & write current buffer\r\n    this.pipes.push(destination);\r\n    if (!this.paused && this.buffers.length) {\r\n      this.end();\r\n    }\r\n  },\r\n  unpipe: function(destination) {\r\n    // remove destination from pipe list\r\n    this.pipes = this.pipes.filter(function(pipe) {\r\n      return pipe !== destination;\r\n    });\r\n  },\r\n  unshift: function(chunk) {\r\n    // some numpty has read some data that's not for them and they want to put it back!\r\n    // Might implement this some day\r\n    throw new Error('Not Implemented');\r\n  },\r\n  wrap: function(stream) {\r\n    // not implemented\r\n    throw new Error('Not Implemented');\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/utils/string-buf.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('./utils');\r\n\r\n// StringBuf - a way to keep string memory operations to a minimum\r\n// while building the strings for the xml files\r\nvar StringBuf = module.exports = function(options) {\r\n  this._buf = new Buffer((options && options.size) || 16384);\r\n  this._encoding = (options && options.encoding) || 'utf8';\r\n\r\n  // where in the buffer we are at\r\n  this._inPos = 0;\r\n\r\n  // for use by toBuffer()\r\n  this._buffer = undefined;\r\n};\r\n\r\nStringBuf.prototype = {\r\n\r\n  get length() {\r\n    return this._inPos;\r\n  },\r\n  get capacity() {\r\n    return this._buf.length;\r\n  },\r\n  get buffer() {\r\n    return this._buf;\r\n  },\r\n\r\n  toBuffer: function() {\r\n    // return the current data as a single enclosing buffer\r\n    if (!this._buffer) {\r\n      this._buffer = new Buffer(this.length);\r\n      this._buf.copy(this._buffer, 0, 0, this.length);\r\n    }\r\n    return this._buffer;\r\n  },\r\n\r\n  reset: function(position) {\r\n    position = position || 0;\r\n    this._buffer = undefined;\r\n    this._inPos = position;\r\n  },\r\n\r\n  _grow: function(min) {\r\n    for (var size = this._buf.length * 2; size < min; size *= 2);\r\n    //console.log(\"Grow: min=\"+min + \", size=\"+size);\r\n    var buf = new Buffer(size);\r\n    this._buf.copy(buf, 0);\r\n    this._buf = buf;\r\n  },\r\n\r\n  addText: function(text) {\r\n    this._buffer = undefined;\r\n\r\n    //console.log(\"addText: writing \" + text.length + ' at ' + this._inPos + \", size= \"+ this._buf.length);\r\n    var inPos = this._inPos + this._buf.write(text, this._inPos, this._encoding);\r\n\r\n    // if we've hit (or nearing capacity), grow the buf\r\n    while (inPos >= this._buf.length - 4) {\r\n      this._grow(this._inPos + text.length);\r\n\r\n      // keep trying to write until we've completely written the text\r\n      inPos = this._inPos + this._buf.write(text, this._inPos, this._encoding);\r\n    }\r\n\r\n    this._inPos = inPos;\r\n  },\r\n\r\n  addStringBuf: function(inBuf) {\r\n    if (inBuf.length) {\r\n      this._buffer = undefined;\r\n\r\n      if (this.length + inBuf.length > this.capacity) {\r\n        this._grow(this.length + inBuf.length);\r\n      }\r\n      inBuf._buf.copy(this._buf, this._inPos, 0, inBuf.length);\r\n      this._inPos += inBuf.length;\r\n    }\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/utils/xml-stream.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar _ = require('./under-dash');\r\n\r\nvar utils = require('./utils');\r\n\r\n// constants\r\nvar OPEN_ANGLE = '<';\r\nvar CLOSE_ANGLE = '>';\r\nvar OPEN_ANGLE_SLASH = '</';\r\nvar CLOSE_SLASH_ANGLE = '/>';\r\nvar EQUALS_QUOTE = '=\"';\r\nvar QUOTE = '\"';\r\nvar SPACE = ' ';\r\n\r\nfunction pushAttribute(xml, name, value) {\r\n  xml.push(SPACE);\r\n  xml.push(name);\r\n  xml.push(EQUALS_QUOTE);\r\n  xml.push(utils.xmlEncode(value.toString()));\r\n  xml.push(QUOTE);\r\n}\r\nfunction pushAttributes(xml, attributes) {\r\n  if (attributes) {\r\n    _.each(attributes, function(value, name) {\r\n      if (value !== undefined) {\r\n        pushAttribute(xml, name, value);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nvar XmlStream = module.exports = function() {\r\n  this._xml = [];\r\n  this._stack = [];\r\n  this._rollbacks = [];\r\n};\r\n\r\nXmlStream.StdDocAttributes = {\r\n  version: '1.0',\r\n  encoding: 'UTF-8',\r\n  standalone: 'yes'\r\n};\r\n\r\nXmlStream.prototype = {\r\n  get tos() {\r\n    return this._stack.length ? this._stack[this._stack.length-1] : undefined;\r\n  },\r\n  \r\n  openXml: function(docAttributes) {\r\n    var xml = this._xml;\r\n    // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n    xml.push('<?xml');\r\n    pushAttributes(xml, docAttributes);\r\n    xml.push('?>\\n');\r\n  },\r\n  \r\n  openNode: function(name, attributes) {\r\n    var parent = this.tos;\r\n    var xml = this._xml;\r\n    if (parent && this.open) {\r\n      xml.push(CLOSE_ANGLE);\r\n    }\r\n\r\n    this._stack.push(name);\r\n\r\n    // start streaming node\r\n    xml.push(OPEN_ANGLE);\r\n    xml.push(name);\r\n    pushAttributes(xml, attributes);\r\n    this.leaf = true;\r\n    this.open = true;\r\n  },\r\n  addAttribute: function(name, value) {\r\n    if (!this.open) {\r\n      throw new Error('Cannot write attributes to node if it is not open');\r\n    }\r\n    pushAttribute(this._xml, name, value);\r\n  },\r\n  addAttributes: function(attrs) {\r\n    if (!this.open) {\r\n      throw new Error('Cannot write attributes to node if it is not open');\r\n    }\r\n    pushAttributes(this._xml, attrs);\r\n  },\r\n  writeText: function(text) {\r\n    var xml = this._xml;\r\n    if (this.open) {\r\n      xml.push(CLOSE_ANGLE);\r\n      this.open = false;\r\n    }\r\n    this.leaf = false;\r\n    xml.push(utils.xmlEncode(text.toString()));\r\n  },\r\n  writeXml: function(xml) {\r\n    if (this.open) {\r\n      this._xml.push(CLOSE_ANGLE);\r\n      this.open = false;\r\n    }\r\n    this.leaf = false;\r\n    this._xml.push(xml);\r\n  },\r\n  closeNode: function() {\r\n    var node = this._stack.pop();\r\n    var xml = this._xml;\r\n    if (this.leaf) {\r\n      xml.push(CLOSE_SLASH_ANGLE);\r\n    } else {\r\n      xml.push(OPEN_ANGLE_SLASH);\r\n      xml.push(node);\r\n      xml.push(CLOSE_ANGLE);\r\n    }\r\n    this.open = false;\r\n    this.leaf = false;\r\n  },\r\n  leafNode: function(name, attributes, text) {\r\n    this.openNode(name, attributes);\r\n    if (text !== undefined) { // zeros need to be written\r\n      this.writeText(text);\r\n    }\r\n    this.closeNode();\r\n  },\r\n\r\n  closeAll: function() {\r\n    while (this._stack.length) {\r\n      this.closeNode();\r\n    }\r\n  },\r\n\r\n  addRollback: function() {\r\n    this._rollbacks.push({\r\n      xml: this._xml.length,\r\n      stack: this._stack.length,\r\n      leaf: this.leaf,\r\n      open: this.open\r\n    });\r\n  },\r\n  commit: function() {\r\n    this._rollbacks.pop();\r\n  },\r\n  rollback: function() {\r\n    var r = this._rollbacks.pop();\r\n    if (this._xml.length > r.xml) {\r\n      this._xml.splice(r.xml, this._xml.length - r.xml);\r\n    }\r\n    if (this._stack.length > r.stack) {\r\n      this._stack.splice(r.stack, this._stack.length - r.stack);\r\n    }\r\n    this.leaf = r.leaf;\r\n    this.open = r.open;\r\n  },\r\n\r\n  get xml() {\r\n    this.closeAll();\r\n    return this._xml.join('');\r\n  }\r\n};","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/style/styles-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar events = require('events');\r\nvar PromishLib = require('../../../utils/promish');\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar Enums = require('../../../doc/enums');\r\nvar XmlStream = require('../../../utils/xml-stream');\r\n\r\nvar BaseXform = require('../base-xform');\r\nvar StaticXform = require('../static-xform');\r\nvar ListXform = require('../list-xform');\r\nvar FontXform = require('./font-xform');\r\nvar FillXform = require('./fill-xform');\r\nvar BorderXform = require('./border-xform');\r\nvar NumFmtXform = require('./numfmt-xform');\r\nvar StyleXform = require('./style-xform');\r\n\r\n// custom numfmt ids start here\r\nvar NUMFMT_BASE = 164;\r\n\r\n// =============================================================================\r\n// StylesXform is used to generate and parse the styles.xml file\r\n// it manages the collections of fonts, number formats, alignments, etc\r\nvar StylesXform = module.exports = function(initialise) {\r\n  this.map = {\r\n    numFmts: new ListXform({tag: 'numFmts', count: true, childXform: new NumFmtXform()}),\r\n    fonts: new ListXform({tag: 'fonts', count: true, childXform: new FontXform(), $: {\"x14ac:knownFonts\": 1}}),\r\n    fills: new ListXform({tag: 'fills', count: true, childXform: new FillXform()}),\r\n    borders: new ListXform({tag: 'borders', count: true, childXform: new BorderXform()}),\r\n    cellStyleXfs: new ListXform({tag: 'cellStyleXfs', count: true, childXform: new StyleXform()}),\r\n    cellXfs: new ListXform({tag: 'cellXfs', count: true, childXform: new StyleXform({xfId: true})}),\r\n    \r\n    // for style manager\r\n    numFmt: new NumFmtXform(),\r\n    font: new FontXform(),\r\n    fill: new FillXform(),\r\n    border:  new BorderXform(),\r\n    style: new StyleXform({xfId: true}),\r\n\r\n    cellStyles: StylesXform.STATIC_XFORMS.cellStyles,\r\n    dxfs: StylesXform.STATIC_XFORMS.dxfs,\r\n    tableStyles: StylesXform.STATIC_XFORMS.tableStyles,\r\n    extLst: StylesXform.STATIC_XFORMS.extLst\r\n  };\r\n\r\n  if (initialise) {\r\n    // StylesXform also acts as style manager and is used to build up styles-model during worksheet processing\r\n    this.init();\r\n  }\r\n};\r\n\r\nutils.inherits(StylesXform, BaseXform, {\r\n  STYLESHEET_ATTRIBUTES: {\r\n    'xmlns': \"http://schemas.openxmlformats.org/spreadsheetml/2006/main\",\r\n    'xmlns:mc': \"http://schemas.openxmlformats.org/markup-compatibility/2006\",\r\n    'mc:Ignorable': \"x14ac x16r2\",\r\n    'xmlns:x14ac': \"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\",\r\n    'xmlns:x16r2': \"http://schemas.microsoft.com/office/spreadsheetml/2015/02/main\"\r\n  },\r\n  STATIC_XFORMS: {\r\n    cellStyles: new StaticXform({tag: 'cellStyles', $: {count:1}, c: [{tag:'cellStyle', $: {name:'Normal', xfId:0, builtinId:0}}]}),\r\n    dxfs: new StaticXform({tag: 'dxfs', $: {count:0}}),\r\n    tableStyles: new StaticXform({tag: 'tableStyles', $: {count: 0, defaultTableStyle: 'TableStyleMedium2', defaultPivotStyle: 'PivotStyleLight16'}}),\r\n    extLst: new StaticXform({tag: 'extLst', c: [\r\n      {tag: 'ext', $: {uri:'{EB79DEF2-80B8-43e5-95BD-54CBDDF9020C}', 'xmlns:x14': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/main'}, c: [\r\n        {tag: 'x14:slicerStyles', $:{defaultSlicerStyle: 'SlicerStyleLight1'}}\r\n      ]},\r\n      {tag: 'ext', $: {uri:'{9260A510-F301-46a8-8635-F512D64BE5F5}', 'xmlns:x15': 'http://schemas.microsoft.com/office/spreadsheetml/2010/11/main'}, c: [\r\n        {tag: 'x15:timelineStyles', $:{defaultTimelineStyle: 'TimeSlicerStyleLight1'}}\r\n      ]}\r\n    ]})\r\n  }\r\n},{\r\n\r\n  initIndex: function() {\r\n    this.index = {\r\n      style: {},\r\n      numFmt: {},\r\n      numFmtNextId: 164, // start custom format ids here\r\n      font: {},\r\n      border: {},\r\n      fill: {}\r\n    };\r\n  },\r\n\r\n  init: function() {\r\n    // Prepare for Style Manager role\r\n    this.model = {\r\n      styles: [],\r\n      numFmts: [],\r\n      fonts: [],\r\n      borders: [],\r\n      fills: []\r\n    };\r\n\r\n    this.initIndex();\r\n\r\n    // default (zero) font\r\n    this._addFont({size: 11, color: {theme:1}, name: 'Calibri', family:2, scheme:'minor'});\r\n\r\n    // default (zero) border\r\n    this._addBorder({});\r\n\r\n    // add default (all zero) style\r\n    this._addStyle({numFmtId: 0, fontId: 0, fillId: 0, borderId: 0, xfId: 0});\r\n\r\n    // add default fills\r\n    this._addFill({type: 'pattern', pattern:'none'});\r\n    this._addFill({type: 'pattern', pattern:'gray125'});\r\n  },\r\n\r\n  render: function(xmlStream, model) {\r\n    model = model || this.model;\r\n    //\r\n    //   <fonts count=\"2\" x14ac:knownFonts=\"1\">\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n\r\n    xmlStream.openNode('styleSheet', StylesXform.STYLESHEET_ATTRIBUTES);\r\n\r\n    if (this.index) {\r\n      // model has been built by style manager role (contains xml)\r\n      if (model.numFmts && model.numFmts.length) {\r\n        xmlStream.openNode('numFmts', {count: model.numFmts.length});\r\n        model.numFmts.forEach(function(numFmtXml) {\r\n          xmlStream.writeXml(numFmtXml);\r\n        });\r\n        xmlStream.closeNode();\r\n      }\r\n\r\n      xmlStream.openNode('fonts', {count: model.fonts.length});\r\n      model.fonts.forEach(function(fontXml) {\r\n        xmlStream.writeXml(fontXml);\r\n      });\r\n      xmlStream.closeNode();\r\n\r\n      xmlStream.openNode('fills', {count: model.fills.length});\r\n      model.fills.forEach(function(fillXml) {\r\n        xmlStream.writeXml(fillXml);\r\n      });\r\n      xmlStream.closeNode();\r\n\r\n      xmlStream.openNode('borders', {count: model.borders.length});\r\n      model.borders.forEach(function(borderXml) {\r\n        xmlStream.writeXml(borderXml);\r\n      });\r\n      xmlStream.closeNode();\r\n\r\n      this.map.cellStyleXfs.render(xmlStream, [{numFmtId: 0, fontId: 0, fillId: 0, borderId: 0, xfId: 0}]);\r\n\r\n      xmlStream.openNode('cellXfs', {count: model.styles.length});\r\n      model.styles.forEach(function(styleXml) {\r\n        xmlStream.writeXml(styleXml);\r\n      });\r\n      xmlStream.closeNode();\r\n    } else {\r\n      // model is plain JSON and needs to be xformed\r\n      this.map.numFmts.render(xmlStream, model.numFmts);\r\n      this.map.fonts.render(xmlStream, model.fonts);\r\n      this.map.fills.render(xmlStream, model.fills);\r\n      this.map.borders.render(xmlStream, model.borders);\r\n      this.map.cellStyleXfs.render(xmlStream, [{numFmtId: 0, fontId: 0, fillId: 0, borderId: 0, xfId: 0}]);\r\n      this.map.cellXfs.render(xmlStream, model.styles);\r\n    }\r\n\r\n    // trailing static stuff\r\n    StylesXform.STATIC_XFORMS.cellStyles.render(xmlStream);\r\n    StylesXform.STATIC_XFORMS.dxfs.render(xmlStream);\r\n    StylesXform.STATIC_XFORMS.tableStyles.render(xmlStream);\r\n    StylesXform.STATIC_XFORMS.extLst.render(xmlStream);\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch(node.name) {\r\n        case 'styleSheet':\r\n          this.initIndex();\r\n          return true;\r\n        default:\r\n          this.parser = this.map[node.name];\r\n          if (this.parser) {\r\n            this.parser.parseOpen(node);\r\n          }\r\n          return true;\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      switch(name) {\r\n        case 'styleSheet':\r\n          var model = this.model = {};\r\n          var add = function(name, xform) {\r\n            if (xform.model && xform.model.length) {\r\n              model[name] = xform.model;\r\n            }\r\n          };\r\n          add('numFmts', this.map.numFmts);\r\n          add('fonts', this.map.fonts);\r\n          add('fills', this.map.fills);\r\n          add('borders', this.map.borders);\r\n          add('styles', this.map.cellXfs);\r\n\r\n          // index numFmts\r\n          this.index = {\r\n            model:[],\r\n            numFmt:  []\r\n          };\r\n          if (model.numFmts) {\r\n            var numFmtIndex = this.index.numFmt;\r\n            model.numFmts.forEach(function (numFmt) {\r\n              numFmtIndex[numFmt.id] = numFmt.formatCode;\r\n            });\r\n          }\r\n\r\n          return false;\r\n        default:\r\n          // not quite sure how we get here!\r\n          return true;\r\n      }\r\n    }\r\n  },\r\n\r\n  // add a cell's style model to the collection\r\n  // each style property is processed and cross-referenced, etc.\r\n  // the styleId is returned. Note: cellType is used when numFmt not defined\r\n  addStyleModel: function(model, cellType) {\r\n    if (!model) {\r\n      return 0;\r\n    }\r\n\r\n    // if we have seen this style object before, assume it has the same styleId\r\n    if (this.weakMap && this.weakMap.has(model)) {\r\n      return this.weakMap.get(model);\r\n    }\r\n\r\n    var style = {};\r\n    cellType = cellType || Enums.ValueType.Number;\r\n\r\n    if (model.numFmt) {\r\n      style.numFmtId = this._addNumFmtStr(model.numFmt);\r\n    } else {\r\n      switch(cellType) {\r\n        case Enums.ValueType.Number:\r\n          style.numFmtId = this._addNumFmtStr('General');\r\n          break;\r\n        case Enums.ValueType.Date:\r\n          style.numFmtId = this._addNumFmtStr('mm-dd-yy');\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (model.font) {\r\n      style.fontId = this._addFont(model.font);\r\n    }\r\n\r\n    if (model.border) {\r\n      style.borderId = this._addBorder(model.border);\r\n    }\r\n\r\n    if (model.fill) {\r\n      style.fillId = this._addFill(model.fill);\r\n    }\r\n\r\n    if (model.alignment) {\r\n      style.alignment =  model.alignment;\r\n    }\r\n\r\n    var styleId = this._addStyle(style);\r\n    if (this.weakMap) {\r\n      this.weakMap.set(model, styleId);\r\n    }\r\n    return styleId;\r\n  },\r\n\r\n  // given a styleId (i.e. s=\"n\"), get the cell's style model\r\n  // objects are shared where possible.\r\n  getStyleModel: function(id) {\r\n    // have we built this model before?\r\n    var model = this.index.model[id];\r\n    if (model) return model;\r\n\r\n    // if the style doesn't exist return null\r\n    var style = this.model.styles[id];\r\n    if (!style) return null;\r\n\r\n    // build a new model\r\n    model = this.index.model[id] = {};\r\n\r\n    // -------------------------------------------------------\r\n    // number format\r\n    if (style.numFmtId) {\r\n      var numFmt = this.index.numFmt[style.numFmtId] || NumFmtXform.getDefaultFmtCode(style.numFmtId);\r\n      if (numFmt) {\r\n        model.numFmt = numFmt;\r\n      }\r\n    }\r\n\r\n    function addStyle(name, group, id) {\r\n      if (id) {\r\n        var part = group[id];\r\n        if (part) {\r\n          model[name] = part;\r\n        }\r\n      }\r\n    }\r\n\r\n    addStyle('font', this.model.fonts, style.fontId);\r\n    addStyle('border', this.model.borders, style.borderId);\r\n    addStyle('fill', this.model.fills, style.fillId);\r\n\r\n    // -------------------------------------------------------\r\n    // alignment\r\n    if (style.alignment) {\r\n      model.alignment = style.alignment;\r\n    }\r\n\r\n    return model;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Private Interface\r\n  _addStyle: function(style) {\r\n    var xml = this.map.style.toXml(style);\r\n    var index = this.index.style[xml];\r\n    if (index === undefined) {\r\n      index = this.index.style[xml] = this.model.styles.length;\r\n      this.model.styles.push(xml);\r\n    }\r\n    return index;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Number Formats\r\n  _addNumFmtStr: function(formatCode) {\r\n    // check if default format\r\n    var index = NumFmtXform.getDefaultFmtId(formatCode);\r\n    if (index !== undefined) return index;\r\n\r\n    // check if already in\r\n    index = this.index.numFmt[formatCode];\r\n    if (index !== undefined) return index;\r\n\r\n\r\n    index = this.index.numFmt[formatCode] = NUMFMT_BASE + this.model.numFmts.length;\r\n    var xml = this.map.numFmt.toXml({id: index, formatCode: formatCode});\r\n    this.model.numFmts.push(xml);\r\n    return index;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Fonts\r\n  _addFont: function(font) {\r\n    var xml = this.map.font.toXml(font);\r\n    var index = this.index.font[xml];\r\n    if (index === undefined) {\r\n      index = this.index.font[xml] = this.model.fonts.length;\r\n      this.model.fonts.push(xml);\r\n    }\r\n    return index;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Borders\r\n  _addBorder: function(border) {\r\n    var xml = this.map.border.toXml(border);\r\n    var index = this.index.border[xml];\r\n    if (index === undefined) {\r\n      index = this.index.border[xml] = this.model.borders.length;\r\n      this.model.borders.push(xml);\r\n    }\r\n    return index;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Fills\r\n  _addFill: function(fill) {\r\n    var xml = this.map.fill.toXml(fill);\r\n    var index = this.index.fill[xml];\r\n    if (index === undefined) {\r\n      index = this.index.fill[xml] = this.model.fills.length;\r\n      this.model.fills.push(xml);\r\n    }\r\n    return index;\r\n  }\r\n\r\n  // =========================================================================\r\n});\r\n\r\n// the stylemanager mock acts like StyleManager except that it always returns 0 or {}\r\nStylesXform.Mock = function() {\r\n  StylesXform.call(this);\r\n  this.model = {\r\n    styles: [{numFmtId: 0, fontId: 0, fillId: 0, borderId: 0, xfId: 0}],\r\n    numFmts: [],\r\n    fonts: [{size: 11, color: {theme:1}, name: 'Calibri', family:2, scheme:'minor'}],\r\n    borders: [{}],\r\n    fills:  [\r\n      {type: 'pattern', pattern:'none'},\r\n      {type: 'pattern', pattern:'gray125'}\r\n    ]\r\n  };\r\n};\r\n\r\nutils.inherits(StylesXform.Mock, StylesXform, {\r\n  // =========================================================================\r\n  // Style Manager Interface\r\n\r\n  // override normal behaviour - consume and dispose\r\n  parseStream: function(stream) {\r\n    stream.autodrain();\r\n    return PromishLib.Promish.resolve();\r\n  },\r\n\r\n  // add a cell's style model to the collection\r\n  // each style property is processed and cross-referenced, etc.\r\n  // the styleId is returned. Note: cellType is used when numFmt not defined\r\n  addStyleModel: function(model, cellType) {\r\n    switch (cellType) {\r\n      case Enums.ValueType.Date:\r\n        return this.dateStyleId;\r\n      default:\r\n        return 0;\r\n    }\r\n  },\r\n\r\n  get dateStyleId() {\r\n    if (!this._dateStyleId) {\r\n      var dateStyle = {\r\n        numFmtId: NumFmtXform.getDefaultFmtId('mm-dd-yy')\r\n      };\r\n      this._dateStyleId = this.model.styles.length;\r\n      this.model.styles.push(dateStyle);\r\n    }\r\n    return this._dateStyleId;\r\n  },\r\n\r\n  // given a styleId (i.e. s=\"n\"), get the cell's style model\r\n  // objects are shared where possible.\r\n  getStyleModel: function(/*id*/) {\r\n    return {}\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/base-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar Sax = require('sax');\r\nvar PromishLib = require('../../utils/promish');\r\n\r\nvar XmlStream = require('../../utils/xml-stream');\r\n\r\n// Base class for Xforms\r\nvar BaseXform = module.exports = function(model, name) {\r\n};\r\n\r\nBaseXform.prototype = {\r\n  // ============================================================\r\n  // Virtual Interface\r\n  prepare:  function(model, options) {\r\n    // optional preparation (mutation) of model so it is ready for write\r\n  },\r\n  render: function(xmlStream, model) {\r\n    // convert model to xml\r\n  },\r\n  parseOpen:  function(node) {\r\n    // Sax Open Node event\r\n  },\r\n  parseText: function(node) {\r\n    // Sax Text event\r\n  },\r\n  parseClose: function(name) {\r\n    // Sax Close Node event\r\n  },\r\n  reconcile: function(model, options) {\r\n    // optional post-parse step (opposite to prepare)\r\n  },\r\n  \r\n  // ============================================================\r\n  reset: function(model) {\r\n    // to make sure parses don't bleed to next iteration\r\n    this.model = model;\r\n  },\r\n  parse: function(parser) {\r\n    var self = this;\r\n    return new PromishLib.Promish(function(resolve, reject){\r\n      parser.on('opentag', function(node) {\r\n        self.parseOpen(node);\r\n      });\r\n      parser.on('text', function(text) {\r\n        self.parseText(text);\r\n      });\r\n      parser.on('closetag', function(name) {\r\n        if (!self.parseClose(name)) {\r\n          resolve(self.model);\r\n        }\r\n      });\r\n      parser.on('end', function() {\r\n        resolve(self.model);\r\n      });\r\n      parser.on('error', function(error) {\r\n        reject(error);\r\n      });\r\n    });\r\n  },\r\n  parseStream: function(stream) {\r\n    var parser = Sax.createStream(true, {});\r\n    var promise = this.parse(parser);\r\n    stream.pipe(parser);\r\n    return promise;\r\n  },\r\n  \r\n  get xml() {\r\n    // convenience function to get the xml of this.model\r\n    // useful for manager types that are built during the prepare phase\r\n    return this.toXml(this.model);\r\n  },\r\n  \r\n  toXml: function(model) {\r\n    var xmlStream = new XmlStream();\r\n    this.render(xmlStream, model);\r\n    return xmlStream.xml;\r\n  }\r\n};","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/static-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../utils/utils');\r\nvar BaseXform = require('./base-xform');\r\nvar XmlStream = require('../../utils/xml-stream');\r\n\r\n// var model = {\r\n//   tag: 'name',\r\n//   $: {attr: 'value'},\r\n//   c: [\r\n//     { tag: 'child' }\r\n//   ],\r\n//   t: 'some text'\r\n// };\r\n\r\nfunction build(xmlStream, model) {\r\n  xmlStream.openNode(model.tag, model.$);\r\n  if (model.c) {\r\n    model.c.forEach(function (child) {\r\n      build(xmlStream, child);\r\n    });\r\n  }\r\n  if (model.t) {\r\n    xmlStream.writeText(model.t);\r\n  }\r\n  xmlStream.closeNode();\r\n}\r\n\r\nvar StaticXform = module.exports = function(model) {\r\n  // This class is an optimisation for static (unimportant and unchanging) xml\r\n  // It is stateless - apart from its static model and so can be used as a singleton\r\n  // Being stateless - it will only track entry to and exit from it's root xml tag during parsing and nothing else\r\n  // Known issues:\r\n  //    since stateless - parseOpen always returns true. Parent xform must know when to start using this xform\r\n  //    if the root tag is recursive, the parsing will behave unpredictably\r\n  this._model = model;\r\n};\r\n\r\nutils.inherits(StaticXform, BaseXform, {\r\n  render: function(xmlStream) {\r\n    if (!this._xml) {\r\n      var stream = new XmlStream();\r\n      build(stream, this._model);\r\n      this._xml = stream.xml;\r\n    }\r\n    xmlStream.writeXml(this._xml);\r\n  },\r\n\r\n  parseOpen: function() {\r\n    return true;\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function(name) {\r\n    switch(name) {\r\n      case this._model.tag:\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/list-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../utils/utils');\r\nvar BaseXform = require('./base-xform');\r\n\r\nvar ListXform = module.exports = function(options) {\r\n  this.tag = options.tag;\r\n  this.count = options.count;\r\n  this.empty = options.empty;\r\n  this.$count = options.$count || 'count';\r\n  this.$ = options.$;\r\n  this.childXform = options.childXform;\r\n};\r\n\r\nutils.inherits(ListXform, BaseXform, {\r\n  prepare: function(model, options) {\r\n    var childXform = this.childXform;\r\n    if (model) {\r\n      model.forEach(function (childModel) {\r\n        childXform.prepare(childModel, options);\r\n      });\r\n    }\r\n  },\r\n  \r\n  render: function(xmlStream, model) {\r\n    if (model && model.length) {\r\n      xmlStream.openNode(this.tag, this.$);\r\n      if (this.count) {\r\n        xmlStream.addAttribute(this.$count, model.length);\r\n      }\r\n\r\n      var childXform = this.childXform;\r\n      model.forEach(function (childModel) {\r\n        childXform.render(xmlStream, childModel);\r\n      });\r\n\r\n      xmlStream.closeNode();\r\n    } else if (this.empty) {\r\n      xmlStream.leafNode(this.tag);\r\n    }\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch(node.name) {\r\n        case this.tag:\r\n          this.model = [];\r\n          return true;\r\n        default:\r\n          if (this.childXform.parseOpen(node)) {\r\n            this.parser = this.childXform;\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.push(this.parser.model);\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  reconcile: function(model, options) {\r\n    if (model) {\r\n      var childXform = this.childXform;\r\n      model.forEach(function (childModel) {\r\n        childXform.reconcile(childModel, options);\r\n      });\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/style/font-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar ColorXform = require('./color-xform');\r\nvar BooleanXform = require('../simple/boolean-xform');\r\nvar IntegerXform = require('../simple/integer-xform');\r\nvar StringXform = require('../simple/string-xform');\r\nvar UnderlineXform = require('./underline-xform');\r\n\r\nvar _ = require('../../../utils/under-dash');\r\nvar utils  = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\n// Font encapsulates translation from font model to xlsx\r\nvar FontXform = module.exports = function(options) {\r\n  this.options = options || FontXform.OPTIONS;\r\n\r\n  this.map = {\r\n    b: { prop: 'bold', xform: new BooleanXform({tag: 'b', attr: 'val'}) },\r\n    i: { prop: 'italic', xform: new BooleanXform({tag: 'i', attr: 'val'}) },\r\n    u: { prop: 'underline', xform: new UnderlineXform() },\r\n    charset: { prop: 'charset', xform: new IntegerXform({tag: 'charset', attr: 'val'}) },\r\n    color: { prop: 'color', xform: new ColorXform() },\r\n    condense: { prop: 'condense', xform: new BooleanXform({tag: 'condense', attr: 'val'}) },\r\n    extend: { prop: 'extend', xform: new BooleanXform({tag: 'extend', attr: 'val'}) },\r\n    family: { prop: 'family', xform: new IntegerXform({tag: 'family', attr: 'val'}) },\r\n    outline: { prop: 'outline', xform: new BooleanXform({tag: 'outline', attr: 'val'}) },\r\n    scheme: { prop: 'scheme', xform: new StringXform({tag: 'scheme', attr: 'val'}) },\r\n    shadow: { prop: 'shadow', xform: new BooleanXform({tag: 'shadow', attr: 'val'}) },\r\n    strike: { prop: 'strike', xform: new BooleanXform({tag: 'strike', attr: 'val'}) },\r\n    sz: { prop: 'size', xform: new IntegerXform({tag: 'sz', attr: 'val'}) }\r\n  };\r\n  this.map[this.options.fontNameTag] = { prop: 'name', xform: new StringXform({tag: this.options.fontNameTag, attr: 'val'}) };\r\n};\r\n\r\nFontXform.OPTIONS = {\r\n  tagName: 'font',\r\n  fontNameTag: 'name'\r\n};\r\n\r\nutils.inherits(FontXform, BaseXform, {\r\n\r\n  get tag() { return this.options.tagName; },\r\n\r\n  render: function(xmlStream, model) {\r\n    var map =  this.map;\r\n\r\n    xmlStream.openNode(this.options.tagName);\r\n    _.each(this.map, function(defn, tag) {\r\n      map[tag].xform.render(xmlStream, model[defn.prop]);\r\n    });\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else if(this.map[node.name]) {\r\n      this.parser = this.map[node.name].xform;\r\n      return this.parser.parseOpen(node);\r\n    } else {\r\n      switch (node.name) {\r\n        case this.options.tagName:\r\n          this.model = {};\r\n          return true;\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n  },\r\n  parseText:  function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser && !this.parser.parseClose(name)) {\r\n      var item = this.map[name];\r\n      if (this.parser.model) {\r\n        this.model[item.prop] = this.parser.model;\r\n      }\r\n      this.parser  = undefined;\r\n      return true;\r\n    } else {\r\n      switch (name) {\r\n        case this.options.tagName:\r\n          return false;\r\n        default:\r\n          return true;\r\n      }\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/style/color-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\n//<color auto=\"1\"/>\r\n//<color rgb=\"FFFF0000\"/>\r\n//<color theme=\"0\" tint=\"-0.499984740745262\"/>\r\n//<color indexed=\"64\"/>\r\n\r\n// var modelSchema = {\r\n//   // argb style\r\n//   argb: 'AARRGGBB',\r\n//\r\n//   // theme style\r\n//   theme: 0, // any valid theme integer\r\n//   tint: 0.5, // optional. float value from -1 to 1\r\n//\r\n//   // indexed style\r\n//   indexed: 64, // a valid color index colour\r\n//\r\n//   // auto\r\n//   auto: true // optional - is the default state\r\n// };\r\n\r\n// Color encapsulates translation from color model to/from xlsx\r\nvar ColorXform = module.exports = function(name) {\r\n  // this.name controls the xm node name\r\n  this.name = name || 'color';\r\n};\r\n\r\nutils.inherits(ColorXform, BaseXform, {\r\n\r\n  get tag() { return this.name; },\r\n\r\n  render: function(xmlStream, model) {\r\n    if (model) {\r\n      xmlStream.openNode(this.name);\r\n      if (model.argb) {\r\n        xmlStream.addAttribute('rgb', model.argb);\r\n      } else if (model.theme !== undefined) {\r\n        xmlStream.addAttribute('theme', model.theme);\r\n        if (model.tint !== undefined) {\r\n          xmlStream.addAttribute('tint', model.tint);\r\n        }\r\n      } else if (model.indexed !== undefined) {\r\n        xmlStream.addAttribute('indexed', model.indexed)\r\n      } else {\r\n        xmlStream.addAttribute('auto', '1');\r\n      }\r\n      xmlStream.closeNode();\r\n      return true;\r\n    }\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    if (node.name === this.name) {\r\n      if (node.attributes.rgb) {\r\n        this.model = {argb: node.attributes.rgb};\r\n      } else if (node.attributes.theme) {\r\n        this.model = {theme: parseInt(node.attributes.theme)};\r\n        if (node.attributes.tint) {\r\n          this.model.tint = parseFloat(node.attributes.tint);\r\n        }\r\n      } else if (node.attributes.indexed) {\r\n        this.model = {indexed: parseInt(node.attributes.indexed)};\r\n      } else {\r\n        this.model = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/simple/boolean-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar BooleanXform = module.exports = function(options) {\r\n  this.tag = options.tag;\r\n  this.attr = options.attr;\r\n};\r\n\r\nutils.inherits(BooleanXform, BaseXform, {\r\n  \r\n  render: function(xmlStream, model) {\r\n    if (model) {\r\n      xmlStream.openNode(this.tag);\r\n      xmlStream.closeNode();\r\n    }\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (node.name === this.tag) {\r\n      this.model = true;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/simple/integer-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar IntegerXform = module.exports = function(options) {\r\n  this.tag = options.tag;\r\n  this.attr = options.attr;\r\n  this.attrs = options.attrs;\r\n};\r\n\r\nutils.inherits(IntegerXform, BaseXform, {\r\n  \r\n  render: function(xmlStream, model) {\r\n    // int is different to float in that zero is not rendered\r\n    if (model) {\r\n      xmlStream.openNode(this.tag);\r\n      if (this.attrs) {\r\n        xmlStream.addAttributes(this.attrs);\r\n      }\r\n      if (this.attr) {\r\n        xmlStream.addAttribute(this.attr, model);\r\n      } else {\r\n        xmlStream.writeText(model);\r\n      }\r\n      xmlStream.closeNode();\r\n    }\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (node.name === this.tag) {\r\n      if (this.attr) {\r\n        this.model = parseInt(node.attributes[this.attr]);\r\n      } else {\r\n        this.text = [];\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (!this.attr) {\r\n      this.text.push(text);\r\n    }\r\n  },\r\n  parseClose: function() {\r\n    if (!this.attr) {\r\n      this.model = parseInt(this.text.join('') || 0);\r\n    }\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/simple/string-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar StringXform = module.exports = function(options) {\r\n  this.tag = options.tag;\r\n  this.attr = options.attr;\r\n  this.attrs = options.attrs;\r\n};\r\n\r\nutils.inherits(StringXform, BaseXform, {\r\n  \r\n  render: function(xmlStream, model) {\r\n    if (model !== undefined) {\r\n      xmlStream.openNode(this.tag);\r\n      if (this.attrs) {\r\n        xmlStream.addAttributes(this.attrs);\r\n      }\r\n      if (this.attr) {\r\n        xmlStream.addAttribute(this.attr, model);\r\n      } else {\r\n        xmlStream.writeText(model);\r\n      }\r\n      xmlStream.closeNode();\r\n    }\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (node.name === this.tag) {\r\n      if (this.attr) {\r\n        this.model = node.attributes[this.attr];\r\n      } else {\r\n        this.text = [];\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (!this.attr) {\r\n      this.text.push(text);\r\n    }\r\n  },\r\n  parseClose: function() {\r\n    if (!this.attr) {\r\n      this.model = this.text.join('');\r\n    }\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/style/underline-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\n// | underline | Font <u>underline</u> style | true, false, 'none', 'single', 'double', 'singleAccounting', 'doubleAccounting' |\r\n\r\nvar UnderlineXform = module.exports = function(model) {\r\n  this.model = model;\r\n};\r\n\r\nUnderlineXform.Attributes = {\r\n  single: {},\r\n  double: { val: 'double' },\r\n  singleAccounting: { val: 'singleAccounting' },\r\n  doubleAccounting: { val: 'doubleAccounting' }\r\n};\r\n\r\nutils.inherits(UnderlineXform, BaseXform, {\r\n\r\n  get tag() { return 'u'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    model = model || this.model;\r\n\r\n    if (model === true) {\r\n      xmlStream.leafNode('u')\r\n    } else {\r\n      var attr = UnderlineXform.Attributes[model];\r\n      if (attr) {\r\n        xmlStream.leafNode('u', attr);\r\n      }\r\n    }\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (node.name === 'u') {\r\n      this.model = node.attributes.val || true;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/style/fill-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar ColorXform = require('./color-xform');\r\n\r\n// pattern fill: fgColor is pattern, gbColor is solid gb fill\r\n//<fill>\r\n//    <patternFill patternType=\"solid\">\r\n//        <fgColor theme=\"0\" tint=\"-4.9989318521683403E-2\"/>\r\n//        <bgColor indexed=\"64\"/>\r\n//    </patternFill>\r\n//</fill>\r\n//\r\n// angle gradient. degree=[0-180] 0=L->R, 1-359=rotate clockwise\r\n// stop sequence specifies way points for the color to travel through\r\n//<fill>\r\n//    <gradientFill degree=\"30\">\r\n//        <stop position=\"0\"><color theme=\"0\"/></stop>\r\n//        <stop position=\"1\"><color theme=\"4\"/></stop>\r\n//    </gradientFill>\r\n//</fill>\r\n//\r\n// \"path\" gradient. Outwards from a point (or rectangle) where left=right=x, top=bottom=y\r\n//<fill>\r\n//    <gradientFill type=\"path\" left=\"0.3\" right=\"0.3\" top=\"0.7\" bottom=\"0.7\">\r\n//        <stop position=\"0\"><color rgb=\"FFFF0000\"/></stop>\r\n//        <stop position=\"0.5\"><color rgb=\"FF00FF00\"/></stop>\r\n//        <stop position=\"1\"><color rgb=\"FF0000FF\"/></stop>\r\n//    </gradientFill>\r\n//</fill>\r\n\r\n// var modelSchema = {\r\n//   // fill will be one of these types\r\n//   type: ['pattern', 'gradient'],\r\n//\r\n//   // ============================================================\r\n//   // pattern properties\r\n//\r\n//   // pattern style, required\r\n//   pattern: ['solid', 'darkGray', 'mediumGray', 'lightGray', 'gray125', 'gray0625',\r\n//     'darkHorizontal', 'darkVertical', 'darkDown', 'darkUp', 'darkGrid', 'darkTrellis',\r\n//     'lightHorizontal', 'lightVertical', 'lightDown', 'lightUp', 'lightGrid', 'lightTrellis'],\r\n//\r\n//   // foreground colour, default is auto (i.e. black)\r\n//   fgColor: new ColorXform('fgColor'),\r\n//\r\n//   // background (solid fill) colour, default is auto (i.e. white)\r\n//   bgColor: new ColorXform('bgColor'),\r\n//\r\n//   // ============================================================\r\n//   // gradient properties\r\n//   gradient: ['angle', 'path'],\r\n//   degree: [0,359], // for angle gradients 0=left to right, then clockwise from that\r\n//   center: { left:[0,1], top:[0,1] }, // for path gradients optional right, bottom for a square\r\n//   stops: [ //  start at position 0 and end at position 1\r\n//     {position:0, color: {argb:''}},\r\n//     {position:(0,1), color: {argb:''}}, // intermediate steps optional\r\n//     {position:1, color: {argb:''}}\r\n//   ]\r\n// };\r\n\r\nvar StopXform = function() {\r\n  this.map = {\r\n    color: new ColorXform()\r\n  };\r\n};\r\n\r\nutils.inherits(StopXform, BaseXform, {\r\n\r\n  get tag() { return 'stop'; },\r\n\r\n  render:  function(xmlStream, model) {\r\n    xmlStream.openNode('stop');\r\n    xmlStream.addAttribute('position', model.position);\r\n    this.map.color.render(xmlStream, model.color);\r\n    xmlStream.closeNode();\r\n  },\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch (node.name) {\r\n        case 'stop':\r\n          this.model = {\r\n            position: parseFloat(node.attributes.position)\r\n          };\r\n          return true;\r\n        case 'color':\r\n          this.parser = this.map.color;\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.color = this.parser.model;\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n});\r\n\r\nvar PatternFillXform = function() {\r\n  this.map = {\r\n    fgColor: new ColorXform('fgColor'),\r\n    bgColor: new ColorXform('bgColor')\r\n  };\r\n};\r\nutils.inherits(PatternFillXform, BaseXform, {\r\n\r\n  get name() { return 'pattern'; },\r\n  get tag() { return 'patternFill'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openNode('patternFill');\r\n    xmlStream.addAttribute('patternType', model.pattern);\r\n    if (model.fgColor) {\r\n      this.map.fgColor.render(xmlStream, model.fgColor);\r\n    }\r\n    if (model.bgColor) {\r\n      this.map.bgColor.render(xmlStream, model.bgColor);\r\n    }\r\n    xmlStream.closeNode();\r\n  },\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch(node.name) {\r\n        case 'patternFill':\r\n          this.model = {\r\n              type: 'pattern',\r\n              pattern: node.attributes.patternType\r\n            };\r\n          return true;\r\n        default:\r\n          if ((this.parser = this.map[node.name])) {\r\n            this.parser.parseOpen(node);\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        if (this.parser.model) {\r\n          this.model[name] = this.parser.model;\r\n        }\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n});\r\n\r\nvar GradientFillXform = function() {\r\n  this.map = {\r\n    stop: new StopXform()\r\n  };\r\n  // if (model) {\r\n  //   this.gradient = model.gradient;\r\n  //   if (model.center) {\r\n  //     this.center = model.center;\r\n  //   }\r\n  //   if (model.degree !== undefined) {\r\n  //     this.degree = model.degree;\r\n  //   }\r\n  //   this.stops = model.stops.map(function(stop) { return new StopXform(stop); });\r\n  // } else {\r\n  //   this.stops = [];\r\n  // }\r\n};\r\nutils.inherits(GradientFillXform, BaseXform, {\r\n  get name() { return 'gradient'; },\r\n  get tag() { return 'gradientFill'; },\r\n  \r\n  render: function(xmlStream, model) {\r\n    xmlStream.openNode('gradientFill');\r\n    switch(model.gradient) {\r\n      case 'angle':\r\n        xmlStream.addAttribute('degree', model.degree);\r\n        break;\r\n      case 'path':\r\n        xmlStream.addAttribute('type', 'path');\r\n        if (model.center.left) {\r\n          xmlStream.addAttribute('left', model.center.left);\r\n          if (model.center.right === undefined) {\r\n            xmlStream.addAttribute('right', model.center.left);\r\n          }\r\n        }\r\n        if (model.center.right) {\r\n          xmlStream.addAttribute('right', model.center.right);\r\n        }\r\n        if (model.center.top) {\r\n          xmlStream.addAttribute('top', model.center.top);\r\n          if (model.center.bottom === undefined) {\r\n            xmlStream.addAttribute('bottom', model.center.top);\r\n          }\r\n        }\r\n        if (model.center.bottom) {\r\n          xmlStream.addAttribute('bottom', model.center.bottom);\r\n        }\r\n        break;\r\n    }\r\n\r\n    var stopXform = this.map.stop;\r\n    model.stops.forEach(function(stopModel) {\r\n      stopXform.render(xmlStream, stopModel);\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch (node.name) {\r\n        case 'gradientFill':\r\n          var model = this.model = {\r\n            stops: []\r\n          };\r\n          if (node.attributes.degree) {\r\n            model.gradient = 'angle';\r\n            model.degree = parseInt(node.attributes.degree);\r\n          } else if (node.attributes.type == 'path') {\r\n            model.gradient = 'path';\r\n            model.center = {\r\n              left: node.attributes.left ? parseFloat(node.attributes.left) : 0,\r\n              top: node.attributes.top ? parseFloat(node.attributes.top) : 0\r\n            };\r\n            if (node.attributes.right != node.attributes.left) {\r\n              model.center.right = node.attributes.right ? parseFloat(node.attributes.right) : 0;\r\n            }\r\n            if (node.attributes.bottom != node.attributes.top) {\r\n              model.center.bottom = node.attributes.bottom ? parseFloat(node.attributes.bottom) : 0;\r\n            }\r\n          }\r\n          return true;\r\n        case 'stop':\r\n          this.parser = this.map.stop;\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n          break;\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose:  function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.stops.push(this.parser.model);\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n});\r\n\r\n\r\n// Fill encapsulates translation from fill model to/from xlsx\r\nvar FillXform = module.exports = function() {\r\n  this.map = {\r\n    patternFill:  new PatternFillXform(),\r\n    gradientFill: new GradientFillXform()\r\n  };\r\n  // if (model) {\r\n  //   if (model.pattern) {\r\n  //     this._model = new PatternFillXform(model);\r\n  //   } else if (model.gradient) {\r\n  //     this._model = new GradientFill(model);\r\n  //   } else {\r\n  //     throw new Error('Did not recognise this fill model: ' + JSON.stringify(model));\r\n  //   }\r\n  // }\r\n};\r\n\r\nutils.inherits(FillXform, BaseXform, {\r\n  StopXform: StopXform,\r\n  PatternFillXform: PatternFillXform,\r\n  GradientFillXform: GradientFillXform\r\n},{\r\n  get tag() { return 'fill'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.addRollback();\r\n    xmlStream.openNode('fill');\r\n    switch(model.type) {\r\n      case 'pattern':\r\n        this.map.patternFill.render(xmlStream, model);\r\n        break;\r\n      case 'gradient':\r\n        this.map.gradientFill.render(xmlStream, model);\r\n        break;\r\n      default:\r\n        xmlStream.rollback();\r\n        return;\r\n    }\r\n    xmlStream.closeNode();\r\n    xmlStream.commit();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch (node.name) {\r\n        case 'fill':\r\n          this.model = {};\r\n          return true;\r\n        default:\r\n          if ((this.parser = this.map[node.name])) {\r\n            this.parser.parseOpen(node);\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n      }\r\n    }\r\n  },\r\n\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose:  function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model = this.parser.model;\r\n        this.model.type = this.parser.name;\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n\r\n  validPatternValues: [\r\n    'none',\r\n    'solid',\r\n    'darkVertical',\r\n    'darkGray',\r\n    'mediumGray',\r\n    'lightGray',\r\n    'gray125',\r\n    'gray0625',\r\n    'darkHorizontal',\r\n    'darkVertical',\r\n    'darkDown',\r\n    'darkUp',\r\n    'darkGrid',\r\n    'darkTrellis',\r\n    'lightHorizontal',\r\n    'lightVertical',\r\n    'lightDown',\r\n    'lightUp',\r\n    'lightGrid',\r\n    'lightTrellis',\r\n    'lightGrid'\r\n  ].reduce(function(p,v){p[v]=true; return p;}, {}),\r\n  validStyle: function(value) {\r\n    return this.validStyleValues[value];\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/style/border-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar ColorXform = require('./color-xform');\r\n\r\n//var model = {\r\n//    color: { argb: \"12345678\" }, // default colour for individual directions\r\n//    top: { style: \"thick\" }, // gets default colour\r\n//    left: { style: \"thin\", color:{auto:true} }, // overrides with auto colour\r\n//    diagonal: { up: true, down: true, style: \"thin\" }\r\n//}\r\n\r\nvar EdgeXform = function(name) {\r\n  this.name = name;\r\n  this.map = {\r\n    color: new ColorXform()\r\n  };\r\n};\r\n\r\nutils.inherits(EdgeXform, BaseXform, {\r\n\r\n  get tag() { return this.name; },\r\n\r\n  render: function(xmlStream, model, defaultColor) {\r\n    var color = model && model.color || defaultColor || this.defaultColor;\r\n    xmlStream.openNode(this.name);\r\n    if (model && model.style) {\r\n      xmlStream.addAttribute('style', model.style);\r\n      if (color) {\r\n        this.map.color.render(xmlStream, color);\r\n      }\r\n    }\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch (node.name) {\r\n        case this.name:\r\n          var style = node.attributes.style;\r\n          if (style) {\r\n            this.model = {\r\n              style: style\r\n            };\r\n          } else {\r\n            this.model = undefined;\r\n          }\r\n          return true;\r\n        case 'color':\r\n          this.parser  = this.map.color;\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      if (name === this.name) {\r\n        if (this.map.color.model) {\r\n          if(!this.model)\r\n            this.model={};\r\n          this.model.color = this.map.color.model;\r\n        }\r\n      }\r\n      return false;\r\n    }\r\n  },\r\n\r\n  validStyleValues: [\r\n    'thin',\r\n    'dotted',\r\n    'dashDot',\r\n    'hair',\r\n    'dashDotDot',\r\n    'slantDashDot',\r\n    'mediumDashed',\r\n    'mediumDashDotDot',\r\n    'mediumDashDot',\r\n    'medium',\r\n    'double',\r\n    'thick'\r\n  ].reduce(function(p,v){p[v]=true; return p;}, {}),\r\n  validStyle: function(value) {\r\n    return this.validStyleValues[value];\r\n  }\r\n});\r\n\r\n// Border encapsulates translation from border model to/from xlsx\r\nvar BorderXform = module.exports = function() {\r\n  this.map = {\r\n    top: new EdgeXform('top'),\r\n    left: new EdgeXform('left'),\r\n    bottom: new EdgeXform('bottom'),\r\n    right: new EdgeXform('right'),\r\n    diagonal: new EdgeXform('diagonal')\r\n  };\r\n};\r\n\r\nutils.inherits(BorderXform, BaseXform, {\r\n  render: function(xmlStream, model) {\r\n    var color = model.color;\r\n    xmlStream.openNode('border');\r\n    if (model.diagonal && model.diagonal.style) {\r\n      if (model.diagonal.up) {\r\n        xmlStream.addAttribute('diagonalUp', '1');\r\n      }\r\n      if (model.diagonal.down) {\r\n        xmlStream.addAttribute('diagonalDown', '1');\r\n      }\r\n    }\r\n    function add(edgeModel, edgeXform) {\r\n      if (edgeModel && !edgeModel.color && model.color) {\r\n        // don't mess with incoming models\r\n        edgeModel = Object.assign({}, edgeModel, {color: model.color});\r\n      }\r\n      edgeXform.render(xmlStream, edgeModel, color);\r\n    }\r\n    add(model.left, this.map.left);\r\n    add(model.right, this.map.right);\r\n    add(model.top, this.map.top);\r\n    add(model.bottom, this.map.bottom);\r\n    add(model.diagonal, this.map.diagonal);\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n    } else {\r\n      switch(node.name) {\r\n        case 'border':\r\n          this.diagonalUp = node.attributes.diagonalUp ? true : false;\r\n          this.diagonalDown = node.attributes.diagonalDown ? true : false;\r\n          this.map.left.reset();\r\n          this.map.right.reset();\r\n          this.map.top.reset();\r\n          this.map.bottom.reset();\r\n          this.map.diagonal.reset();\r\n          return true;\r\n        default:\r\n          this.parser = this.map[node.name];\r\n          if (this.parser) {\r\n            this.parser.parseOpen(node);\r\n            return true;\r\n          } else {\r\n            return false;\r\n          }\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      if (name === 'border') {\r\n        var model = this.model = {};\r\n        var add = function(name, edgeModel, extensions) {\r\n          if (edgeModel) {\r\n            if (extensions) {\r\n              Object.assign(edgeModel, extensions);\r\n            }\r\n            model[name] = edgeModel;\r\n          }\r\n        };\r\n        add('left', this.map.left.model);\r\n        add('right', this.map.right.model);\r\n        add('top', this.map.top.model);\r\n        add('bottom', this.map.bottom.model);\r\n        add('diagonal', this.map.diagonal.model, {up: this.diagonalUp, down: this.diagonalDown});\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/style/numfmt-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar _ = require('../../../utils/under-dash');\r\nvar utils = require('../../../utils/utils');\r\nvar defaultNumFormats = require('../../defaultnumformats');\r\n\r\nvar BaseXform = require('../base-xform');\r\n\r\n\r\nfunction hashDefaultFormats() {\r\n  var hash = {};\r\n  _.each(defaultNumFormats, function(dnf, id) {\r\n    if (dnf.f) {\r\n      hash[dnf.f] = parseInt(id);\r\n    }\r\n    // at some point, add the other cultures here...\r\n  });\r\n  return hash;\r\n}\r\nvar defaultFmtHash = hashDefaultFormats();\r\n\r\n\r\n// NumFmt encapsulates translation between number format and xlsx\r\nvar NumFmtXform = module.exports = function(id, formatCode) {\r\n  this.id = id;\r\n  this.formatCode = formatCode;\r\n};\r\n\r\n\r\nutils.inherits(NumFmtXform, BaseXform, {\r\n\r\n  get tag() { return 'numFmt'; },\r\n\r\n  getDefaultFmtId: function(formatCode) {\r\n    return defaultFmtHash[formatCode];\r\n  },\r\n  getDefaultFmtCode: function(numFmtId) {\r\n    return defaultNumFormats[numFmtId] && defaultNumFormats[numFmtId].f;\r\n  }\r\n},{\r\n  render: function(xmlStream, model) {\r\n    //var formatCode = model.formatCode.replace(/([\\s\\-\\(\\)])/g, '\\\\$1');\r\n    xmlStream.leafNode('numFmt', {numFmtId: model.id, formatCode: model.formatCode});\r\n  },\r\n  parseOpen:  function(node) {\r\n    switch(node.name) {\r\n      case 'numFmt':\r\n        this.model = {\r\n          id: parseInt(node.attributes.numFmtId),\r\n          formatCode: node.attributes.formatCode.replace(/[\\\\](.)/g, '$1')\r\n        };\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/defaultnumformats.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n\"use strict\";\r\n\r\nmodule.exports = {\r\n  0:  { \"f\": 'General' },\r\n  1:  { \"f\": '0' },\r\n  2:  { \"f\": '0.00' },\r\n  3:  { \"f\": '#,##0' },\r\n  4:  { \"f\": '#,##0.00' },\r\n  9:  { \"f\": '0%' },\r\n  10: { \"f\": '0.00%' },\r\n  11: { \"f\": '0.00E+00' },\r\n  12: { \"f\": '# ?/?'},\r\n  13: { \"f\": '# ??/??'},\r\n  14: { \"f\": 'mm-dd-yy'},\r\n  15: { \"f\": 'd-mmm-yy'},\r\n  16: { \"f\": 'd-mmm'},\r\n  17: { \"f\": 'mmm-yy'},\r\n  18: { \"f\": 'h:mm AM/PM'},\r\n  19: { \"f\": 'h:mm:ss AM/PM'},\r\n  20: { \"f\": 'h:mm'},\r\n  21: { \"f\": 'h:mm:ss'},\r\n  22: { \"f\": 'm/d/yy \"h\":mm'},\r\n\r\n  27: { \"zh-tw\": '[$-404]e/m/d', \"zh-cn\": 'yyyy\"年\"m\"月\"', \"ja-jp\": '[$-411]ge.m.d', \"ko-kr\": 'yyyy\"年\" mm\"月\" dd\"日\"' },\r\n  28: { \"zh-tw\": '[$-404]e\"年\"m\"月\"d\"日\"', \"zh-cn\": 'm\"月\"d\"日\"', \"ja-jp\": '[$-411]ggge\"年\"m\"月\"d\"日\"', \"ko-kr\": 'mm-dd' },\r\n  29: { \"zh-tw\": '[$-404]e\"年\"m\"月\"d\"日\"', \"zh-cn\": 'm\"月\"d\"日\"', \"ja-jp\": '[$-411]ggge\"年\"m\"月\"d\"日\"', \"ko-kr\": 'mm-dd' },\r\n  30: { \"zh-tw\": 'm/d/yy ', \"zh-cn\": 'm-d-yy', \"ja-jp\": 'm/d/yy', \"ko-kr\": 'mm-dd-yy' },\r\n  31: { \"zh-tw\": 'yyyy\"年\"m\"月\"d\"日\"', \"zh-cn\": 'yyyy\"年\"m\"月\"d\"日\"', \"ja-jp\": 'yyyy\"年\"m\"月\"d\"日\"', \"ko-kr\": 'yyyy\"년\" mm\"월\" dd\"일\"' },\r\n  32: { \"zh-tw\": 'hh\"時\"mm\"分\"', \"zh-cn\": 'h\"时\"mm\"分\"', \"ja-jp\": 'h\"時\"mm\"分\"', \"ko-kr\": 'h\"시\" mm\"분\"' },\r\n  33: { \"zh-tw\": 'hh\"時\"mm\"分\"ss\"秒\"', \"zh-cn\": 'h\"时\"mm\"分\"ss\"秒\"', \"ja-jp\": 'h\"時\"mm\"分\"ss\"秒\"', \"ko-kr\": 'h\"시\" mm\"분\" ss\"초\"' },\r\n  34: { \"zh-tw\": '上午/下午 hh\"時\"mm\"分\"', \"zh-cn\": '上午/下午 h\"时\"mm\"分\"', \"ja-jp\": 'yyyy\"年\"m\"月\"', \"ko-kr\": 'yyyy-mm-dd'},\r\n  35: { \"zh-tw\": '上午/下午 hh\"時\"mm\"分\"ss\"秒\"', \"zh-cn\": '上午/下午 h\"时\"mm\"分\"ss\"秒\"', \"ja-jp\": 'm\"月\"d\"日\"', \"ko-kr\": 'yyyy-mm-dd' },\r\n  36: { \"zh-tw\": '[$-404]e/m/d', \"zh-cn\": 'yyyy\"年\"m\"月\"', \"ja-jp\": '[$-411]ge.m.d', \"ko-kr\": 'yyyy\"年\" mm\"月\" dd\"日\"' },\r\n\r\n  37: { \"f\": '#,##0 ;(#,##0)'},\r\n  38: { \"f\": '#,##0 ;[Red](#,##0)'},\r\n  39: { \"f\": '#,##0.00 ;(#,##0.00)'},\r\n  40: { \"f\": '#,##0.00 ;[Red](#,##0.00)'},\r\n  45: { \"f\": 'mm:ss'},\r\n  46: { \"f\": '[h]:mm:ss'},\r\n  47: { \"f\": 'mmss.0'},\r\n  48: { \"f\": '##0.0E+0'},\r\n  49: { \"f\": '@' },\r\n\r\n  50: { \"zh-tw\": '[$-404]e/m/d', \"zh-cn\": 'yyyy\"年\"m\"月\"', \"ja-jp\": '[$-411]ge.m.d', \"ko-kr\": 'yyyy\"年\" mm\"月\" dd\"日\"' },\r\n  51: { \"zh-tw\": '[$-404]e\"年\"m\"月\"d\"日\"', \"zh-cn\": 'm\"月\"d\"日\"', \"ja-jp\": '[$-411]ggge\"年\"m\"月\"d\"日\"', \"ko-kr\": 'mm-dd' },\r\n  52: { \"zh-tw\": '上午/下午 hh\"時\"mm\"分\"', \"zh-cn\": 'yyyy\"年\"m\"月\"', \"ja-jp\": 'yyyy\"年\"m\"月\"', \"ko-kr\": 'yyyy-mm-dd' },\r\n  53: { \"zh-tw\": '上午/下午 hh\"時\"mm\"分\"ss\"秒\"', \"zh-cn\": 'm\"月\"d\"日\"', \"ja-jp\": 'm\"月\"d\"日\"', \"ko-kr\": 'yyyy-mm-dd' },\r\n  54: { \"zh-tw\": '[$-404]e\"年\"m\"月\"d\"日\"', \"zh-cn\": 'm\"月\"d\"日\"', \"ja-jp\": '[$-411]ggge\"年\"m\"月\"d\"日\"', \"ko-kr\": 'mm-dd' },\r\n  55: { \"zh-tw\": '上午/下午 hh\"時\"mm\"分\"', \"zh-cn\": '上午/下午 h\"时\"mm\"分\"', \"ja-jp\": 'yyyy\"年\"m\"月\"', \"ko-kr\": 'yyyy-mm-dd' },\r\n  56: { \"zh-tw\": '上午/下午 hh\"時\"mm\"分\"ss\"秒\"', \"zh-cn\": '上午/下午 h\"时\"mm\"分\"ss\"秒\"', \"ja-jp\": 'm\"月\"d\"日\"', \"ko-kr\": 'yyyy-mm-dd' },\r\n  57: { \"zh-tw\": '[$-404]e/m/d', \"zh-cn\": 'yyyy\"年\"m\"月\"', \"ja-jp\": '[$-411]ge.m.d', \"ko-kr\": 'yyyy\"年\" mm\"月\" dd\"日\"' },\r\n  58: { \"zh-tw\": '[$-404]e\"年\"m\"月\"d\"日\"', \"zh-cn\": 'm\"月\"d\"日\"', \"ja-jp\": '[$-411]ggge\"年\"m\"月\"d\"日\"', \"ko-kr\": 'mm-dd' },\r\n\r\n  59: { \"th-th\": 't0' },\r\n  60: { \"th-th\": 't0.00' },\r\n  61: { \"th-th\": 't#,##0' },\r\n  62: { \"th-th\": 't#,##0.00' },\r\n  67: { \"th-th\": 't0%' },\r\n  68: { \"th-th\": 't0.00%' },\r\n  69: { \"th-th\": 't# ?/?' },\r\n  70: { \"th-th\": 't# ??/??'},\r\n\r\n  81: { \"th-th\": 'd/m/bb' }\r\n};","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/style/style-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar AlignmentXform = require('./alignment-xform');\r\n\r\n// <xf numFmtId=\"[numFmtId]\" fontId=\"[fontId]\" fillId=\"[fillId]\" borderId=\"[xf.borderId]\" xfId=\"[xfId]\">\r\n//   Optional <alignment>\r\n// </xf>\r\n\r\n// Style assists translation from style model to/from xlsx\r\nvar StyleXform = module.exports = function(options) {\r\n  this.xfId = !!(options && options.xfId);\r\n  this.map = {\r\n    alignment: new AlignmentXform()\r\n  };\r\n};\r\n\r\nutils.inherits(StyleXform, BaseXform, {\r\n\r\n  get tag() { return 'xf'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openNode('xf', {\r\n      numFmtId: model.numFmtId || 0,\r\n      fontId: model.fontId || 0,\r\n      fillId: model.fillId || 0,\r\n      borderId: model.borderId || 0\r\n    });\r\n    if (this.xfId) {\r\n      xmlStream.addAttribute('xfId', model.xfId || 0);\r\n    }\r\n\r\n    if (model.numFmtId) {\r\n      xmlStream.addAttribute('applyNumberFormat', '1');\r\n    }\r\n    if (model.fontId) {\r\n      xmlStream.addAttribute('applyFont', '1');\r\n    }\r\n    if (model.fillId) {\r\n      xmlStream.addAttribute('applyFill', '1');\r\n    }\r\n    if (model.borderId) {\r\n      xmlStream.addAttribute('applyBorder', '1');\r\n    }\r\n\r\n    if (model.alignment) {\r\n      xmlStream.addAttribute('applyAlignment', '1');\r\n      this.map.alignment.render(xmlStream, model.alignment);\r\n    }\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    // console.log('style-xform',JSON.stringify(node));\r\n\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      // used during sax parsing of xml to build font object\r\n      switch (node.name) {\r\n        case 'xf':\r\n          this.model = {\r\n            numFmtId: parseInt(node.attributes.numFmtId),\r\n            fontId: parseInt(node.attributes.fontId),\r\n            fillId: parseInt(node.attributes.fillId),\r\n            borderId: parseInt(node.attributes.borderId)\r\n          };\r\n          if (this.xfId) {\r\n            this.model.xfId = parseInt(node.attributes.xfId);\r\n          }\r\n          return true;\r\n        case 'alignment':\r\n          this.parser = this.map.alignment;\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.alignment = this.parser.model;\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      return name !== 'xf';\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/style/alignment-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n\"use strict\";\r\n\r\nvar Enums = require(\"../../../doc/enums\");\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar valid = {\r\n  horizontalValues: [\r\n    \"left\",\r\n    \"center\",\r\n    \"right\",\r\n    \"fill\",\r\n    \"centerContinuous\",\r\n    \"distributed\",\r\n    \"justify\"\r\n  ].reduce(function(p,v){p[v]=true; return p;}, {}),\r\n  horizontal: function(value) {\r\n    return this.horizontalValues[value] ? value : undefined;\r\n  },\r\n\r\n  verticalValues: [\r\n    \"top\",\r\n    \"middle\",\r\n    \"bottom\",\r\n    \"distributed\",\r\n    \"justify\"\r\n  ].reduce(function(p,v){p[v]=true; return p;}, {}),\r\n  vertical: function(value) {\r\n    if (value === \"middle\") return \"center\";\r\n    return this.verticalValues[value] ? value : undefined;\r\n  },\r\n  wrapText: function(value) {\r\n    return value ? true : undefined;\r\n  },\r\n  shrinkToFit: function(value) {\r\n    return value ? true : undefined;\r\n  },\r\n  textRotation: function(value) {\r\n    switch(value) {\r\n      case \"vertical\":\r\n        return value;\r\n      default:\r\n        value = utils.validInt(value);\r\n        return (value >= -90) && (value <= 90) ? value : undefined;\r\n    }\r\n  },\r\n  indent: function(value) {\r\n    value = utils.validInt(value);\r\n    return Math.max(0, value);\r\n  },\r\n  readingOrderValues: [\r\n    {k:\"r2l\",v:1},\r\n    {k:\"l2r\",v:2},\r\n    {k:Enums.ReadingOrder.RightToLeft,v:1},\r\n    {k:Enums.ReadingOrder.LeftToRight,v:2}\r\n  ].reduce(function(p,v) {p[v.k]=v.v; return p;}, {}),\r\n\r\n  readingOrder: function(value) {\r\n    return this.readingOrderValues[value];\r\n  }\r\n};\r\n\r\nvar textRotationXform = {\r\n  toXml:  function(textRotation) {\r\n    textRotation = valid.textRotation(textRotation);\r\n    if (textRotation) {\r\n      if (textRotation == \"vertical\") {\r\n        return 255;\r\n      } else {\r\n        var tr = Math.round(textRotation);\r\n        if ((tr >= 0) && (tr <= 90)) {\r\n          return tr;\r\n        } else if ((tr < 0) && (tr >= -90)) {\r\n          return 90 - tr;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  toModel: function(textRotation) {\r\n    var tr = utils.validInt(textRotation);\r\n    if (tr !== undefined) {\r\n      if (tr == 255) {\r\n        return \"vertical\";\r\n      } else if((tr >= 0) && (tr <= 90)) {\r\n        return tr;\r\n      } else if ((tr > 90) && (tr <= 180)) {\r\n        return 90 - tr;\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Alignment encapsulates translation from style.alignment model to/from xlsx\r\nvar AlignmentXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(AlignmentXform, BaseXform, {\r\n\r\n  get tag() { return 'alignment'; },\r\n\r\n  render: function(xmlStream, model) {\r\n\r\n    xmlStream.addRollback();\r\n    xmlStream.openNode('alignment');\r\n\r\n    var isValid = false;\r\n    function add(name, value) {\r\n      if (value) {\r\n        xmlStream.addAttribute(name, value);\r\n        isValid = true;\r\n      }\r\n    }\r\n    add('horizontal', valid.horizontal(model.horizontal));\r\n    add('vertical', valid.vertical(model.vertical));\r\n    add('wrapText', valid.wrapText(model.wrapText) ? '1' : false);\r\n    add('shrinkToFit', valid.shrinkToFit(model.shrinkToFit) ? '1' : false);\r\n    add('indent', valid.indent(model.indent));\r\n    add('textRotation', textRotationXform.toXml(model.textRotation));\r\n    add('readingOrder', valid.readingOrder(model.readingOrder));\r\n\r\n    xmlStream.closeNode();\r\n\r\n    if (isValid) {\r\n      xmlStream.commit();\r\n    } else {\r\n      xmlStream.rollback();\r\n    }\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    var model = {};\r\n    \r\n    var valid = false;\r\n    function add(truthy, name, value) {\r\n      if (truthy) {\r\n        model[name] = value;\r\n        valid = true;\r\n      }\r\n    }\r\n    add(node.attributes.horizontal, 'horizontal', node.attributes.horizontal);\r\n    add(node.attributes.vertical, 'vertical', node.attributes.vertical === 'center' ? 'middle' : node.attributes.vertical);\r\n    add(node.attributes.wrapText, 'wrapText', node.attributes.wrapText ? true : false);\r\n    add(node.attributes.shrinkToFit, 'shrinkToFit', node.attributes.shrinkToFit ? true : false);\r\n    add(node.attributes.indent, 'indent', parseInt(node.attributes.indent));\r\n    add(node.attributes.textRotation, 'textRotation', textRotationXform.toModel(node.attributes.textRotation));\r\n    add(node.attributes.readingOrder, 'readingOrder', node.attributes.readingOrder);\r\n    \r\n    this.model = valid ? model : null;\r\n  },\r\n  \r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/core/core-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar XmlStream = require('../../../utils/xml-stream');\r\nvar BaseXform = require('../base-xform');\r\nvar DateXform = require('../simple/date-xform');\r\nvar StringXform = require('../simple/string-xform');\r\n\r\nvar CoreXform = module.exports = function() {\r\n  this.map = {\r\n    'dc:creator': new StringXform({tag: 'dc:creator'}),\r\n    'dc:title': new StringXform({tag: 'dc:title'}),\r\n    'dc:subject': new StringXform({tag: 'dc:subject'}),\r\n    'dc:description': new StringXform({tag: 'dc:description'}),\r\n    'dc:identifier': new StringXform({tag: 'dc:identifier'}),\r\n    'dc:language': new StringXform({tag: 'dc:language'}),\r\n    'cp:keywords': new StringXform({tag: 'cp:keywords'}),\r\n    'cp:category': new StringXform({tag: 'cp:category'}),\r\n    'cp:lastModifiedBy': new StringXform({tag: 'cp:lastModifiedBy'}),\r\n    'cp:lastPrinted': new DateXform({tag: 'cp:lastPrinted', format: CoreXform.DateFormat}),\r\n    'cp:revision': new DateXform({tag: 'cp:revision'}),\r\n    'cp:contentStatus': new StringXform({tag: 'cp:contentStatus'}),\r\n    'dcterms:created': new DateXform({tag: 'dcterms:created', attrs: CoreXform.DateAttrs, format: CoreXform.DateFormat}),\r\n    'dcterms:modified': new DateXform({tag: 'dcterms:modified', attrs: CoreXform.DateAttrs, format: CoreXform.DateFormat})\r\n  }\r\n};\r\n\r\nCoreXform.DateFormat = function(dt) {\r\n  return dt.toISOString().replace(/\\.\\d{3}/,'');\r\n};\r\nCoreXform.DateAttrs = {'xsi:type': 'dcterms:W3CDTF'};\r\n\r\nCoreXform.CORE_PROPERTY_ATTRIBUTES = {\r\n  'xmlns:cp': 'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',\r\n  'xmlns:dc': 'http://purl.org/dc/elements/1.1/',\r\n  'xmlns:dcterms': 'http://purl.org/dc/terms/',\r\n  'xmlns:dcmitype': 'http://purl.org/dc/dcmitype/',\r\n  'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance'\r\n};\r\n\r\nutils.inherits(CoreXform, BaseXform, {\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n\r\n    xmlStream.openNode('cp:coreProperties', CoreXform.CORE_PROPERTY_ATTRIBUTES);\r\n\r\n    this.map['dc:creator'].render(xmlStream, model.creator);\r\n    this.map['dc:title'].render(xmlStream, model.title);\r\n    this.map['dc:subject'].render(xmlStream, model.subject);\r\n    this.map['dc:description'].render(xmlStream, model.description);\r\n    this.map['dc:identifier'].render(xmlStream, model.identifier);\r\n    this.map['dc:language'].render(xmlStream, model.language);\r\n    this.map['cp:keywords'].render(xmlStream, model.keywords);\r\n    this.map['cp:category'].render(xmlStream, model.category);\r\n    this.map['cp:lastModifiedBy'].render(xmlStream, model.lastModifiedBy);\r\n    this.map['cp:lastPrinted'].render(xmlStream, model.lastPrinted);\r\n    this.map['cp:revision'].render(xmlStream, model.revision);\r\n    this.map['cp:contentStatus'].render(xmlStream, model.contentStatus);\r\n    this.map['dcterms:created'].render(xmlStream, model.created);\r\n    this.map['dcterms:modified'].render(xmlStream, model.modified);\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch(node.name) {\r\n        case 'cp:coreProperties':\r\n          return true;\r\n        default:\r\n          this.parser = this.map[node.name];\r\n          if (this.parser) {\r\n            this.parser.parseOpen(node);\r\n            return true;\r\n          }\r\n          throw new Error('Unexpected xml node in parseOpen: ' + JSON.stringify(node));\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      switch(name) {\r\n        case 'cp:coreProperties':\r\n          this.model = {\r\n            creator: this.map['dc:creator'].model,\r\n            title: this.map['dc:title'].model,\r\n            subject: this.map['dc:subject'].model,\r\n            description: this.map['dc:description'].model,\r\n            identifier: this.map['dc:identifier'].model,\r\n            language: this.map['dc:language'].model,\r\n            keywords: this.map['cp:keywords'].model,\r\n            category: this.map['cp:category'].model,\r\n            lastModifiedBy: this.map['cp:lastModifiedBy'].model,\r\n            lastPrinted: this.map['cp:lastPrinted'].model,\r\n            revision: this.map['cp:revision'].model,\r\n            contentStatus: this.map['cp:contentStatus'].model,\r\n            created: this.map['dcterms:created'].model,\r\n            modified: this.map['dcterms:modified'].model\r\n          };\r\n          return false;\r\n        default:\r\n          throw new Error('Unexpected xml node in parseClose: ' + name);\r\n      }\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/simple/date-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar DateXform = module.exports = function(options) {\r\n  this.tag = options.tag;\r\n  this.attr = options.attr;\r\n  this.attrs = options.attrs;\r\n  this._format = options.format || function(dt) { return dt.toISOString(); };\r\n  this._parse = options.parse || function(str) { return new Date(str); }\r\n};\r\n\r\nutils.inherits(DateXform, BaseXform, {\r\n  \r\n  render: function(xmlStream, model) {\r\n    if (model) {\r\n      xmlStream.openNode(this.tag);\r\n      if (this.attrs) {\r\n        xmlStream.addAttributes(this.attrs);\r\n      }\r\n      if (this.attr) {\r\n        xmlStream.addAttribute(this.attr, this._format(model));\r\n      } else {\r\n        xmlStream.writeText(this._format(model));\r\n      }\r\n      xmlStream.closeNode();\r\n    }\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (node.name === this.tag) {\r\n      if (this.attr) {\r\n        this.model = this._parse(node.attributes[this.attr]);\r\n      } else {\r\n        this.text = [];\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (!this.attr) {\r\n      this.text.push(text);\r\n    }\r\n  },\r\n  parseClose: function() {\r\n    if (!this.attr) {\r\n      this.model = this._parse(this.text.join(''));\r\n    }\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/strings/shared-strings-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar XmlStream = require('../../../utils/xml-stream');\r\nvar BaseXform = require('../base-xform');\r\nvar SharedStringXform = require('./shared-string-xform');\r\n\r\nvar SharedStringsXform = module.exports = function(model) {\r\n  this.model = model || {\r\n    values: [],\r\n    count: 0\r\n  };\r\n  this.hash = {};\r\n  this.rich = {};\r\n};\r\n\r\nutils.inherits(SharedStringsXform, BaseXform, {\r\n  get sharedStringXform() { return this._sharedStringXform || (this._sharedStringXform = new SharedStringXform()); },\r\n\r\n  get values() {\r\n    return this.model.values;\r\n  },\r\n  get uniqueCount() {\r\n    return this.model.values.length;\r\n  },\r\n  get count() {\r\n    return this.model.count;\r\n  },\r\n\r\n  getString: function(index) {\r\n    return this.model.values[index];\r\n  },\r\n\r\n  add: function(value) {\r\n    return value.richText ?\r\n      this.addRichText(value) :\r\n      this.addText(value);\r\n  },\r\n  addText: function(value) {\r\n    var index = this.hash[value];\r\n    if (index === undefined) {\r\n      index = this.hash[value] = this.model.values.length;\r\n      this.model.values.push(value);\r\n    }\r\n    this.model.count++;\r\n    return index;\r\n  },\r\n  addRichText: function(value) {\r\n    // TODO: add WeakMap here\r\n    var xml = this.sharedStringXform.toXml(value);\r\n    var index = this.rich[xml];\r\n    if (index === undefined) {\r\n      index = this.rich[xml] = this.model.values.length;\r\n      this.model.values.push(value);\r\n    }\r\n    this.model.count++;\r\n    return index;\r\n  },\r\n\r\n  // <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n  // <sst xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" count=\"<%=totalRefs%>\" uniqueCount=\"<%=count%>\">\r\n  //   <si><t><%=text%></t></si>\r\n  //   <si><r><rPr></rPr><t></t></r></si>\r\n  // </sst>\r\n\r\n  render: function(xmlStream, model) {\r\n    model = model || this._values;\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n\r\n    xmlStream.openNode('sst', {\r\n      xmlns: 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\r\n      count: model.count,\r\n      uniqueCount: model.values.length\r\n    });\r\n\r\n    var sx =  this.sharedStringXform;\r\n    model.values.forEach(function(sharedString) {\r\n      sx.render(xmlStream, sharedString);\r\n    });\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch(node.name) {\r\n        case 'sst':\r\n          return true;\r\n        case 'si':\r\n          this.parser = this.sharedStringXform;\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        default:\r\n          throw new Error('Unexpected xml node in parseOpen: ' + JSON.stringify(node));\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.values.push(this.parser.model);\r\n        this.model.count++;\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      switch(name) {\r\n        case 'sst':\r\n          return false;\r\n        default:\r\n          throw new Error('Unexpected xml node in parseClose: ' + name);\r\n      }\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/strings/shared-string-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar TextXform = require('./text-xform');\r\nvar RichTextXform = require('./rich-text-xform');\r\nvar PhoneticTextXform = require('./phonetic-text-xform');\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\n// <si>\r\n//   <r></r><r></r>...\r\n// </si>\r\n// <si>\r\n//   <t></t>\r\n// </si>\r\n\r\nvar SharedStringXform = module.exports = function(model) {\r\n  this.model = model;\r\n\r\n  this.map = {\r\n    r: new RichTextXform(),\r\n    t: new TextXform(),\r\n    rPh: new PhoneticTextXform()\r\n  };\r\n};\r\n\r\n\r\nutils.inherits(SharedStringXform, BaseXform, {\r\n\r\n  get tag() { return 'si'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openNode(this.tag);\r\n    if (model && model.hasOwnProperty('richText') && model.richText) {\r\n      var r = this.map.r;\r\n      model.richText.forEach(function(text) {\r\n        r.render(xmlStream, text);\r\n      });\r\n    } else if (model !== undefined && model !== null) {\r\n      this.map.t.render(xmlStream, model);\r\n    }\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    var name = node.name;\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else if (name === this.tag) {\r\n      this.model = {};\r\n      return true;\r\n    } else {\r\n      this.parser = this.map[name];\r\n      if (this.parser) {\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        switch(name) {\r\n          case 'r':\r\n            var rt = this.model.richText;\r\n            if (!rt) { rt = this.model.richText = []; }\r\n            rt.push(this.parser.model);\r\n            break;\r\n          case 't':\r\n            this.model = this.parser.model;\r\n            break;\r\n        }\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      switch(name) {\r\n        case this.tag:\r\n          return false;\r\n        default:\r\n          return true;\r\n      }\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/strings/text-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\n//   <t xml:space=\"preserve\"> is </t>\r\n\r\nvar TextXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(TextXform, BaseXform, {\r\n\r\n  get tag() { return 't'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openNode('t');\r\n    if ((model[0] === ' ') || (model[model.length-1] === ' ')) {\r\n      xmlStream.addAttribute('xml:space', 'preserve');\r\n    }\r\n    xmlStream.writeText(model);\r\n    xmlStream.closeNode();\r\n  },\r\n  \r\n  get model() {\r\n    return this._text.join('');\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    switch(node.name) {\r\n      case 't':\r\n        this._text = [];\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    this._text.push(text);\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/strings/rich-text-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar TextXform = require('./text-xform');\r\nvar FontXform = require('../style/font-xform');\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\n// <r>\r\n//   <rPr>\r\n//     <sz val=\"11\"/>\r\n//     <color theme=\"1\" tint=\"5\"/>\r\n//     <rFont val=\"Calibri\"/>\r\n//     <family val=\"2\"/>\r\n//     <scheme val=\"minor\"/>\r\n//   </rPr>\r\n//   <t xml:space=\"preserve\"> is </t>\r\n// </r>\r\n\r\nvar RichTextXform = module.exports = function(model) {\r\n  this.model = model;\r\n};\r\n\r\nRichTextXform.FONT_OPTIONS = {\r\n  tagName: 'rPr',\r\n  fontNameTag:  'rFont'\r\n};\r\n\r\nutils.inherits(RichTextXform, BaseXform, {\r\n\r\n  get tag() { return 'r'; },\r\n\r\n  get textXform() { return this._textXform || (this._textXform = new TextXform()); },\r\n  get fontXform() { return this._fontXform || (this._fontXform = new FontXform(RichTextXform.FONT_OPTIONS)); },\r\n\r\n  render: function(xmlStream, model) {\r\n    model = model || this.model;\r\n\r\n    xmlStream.openNode('r');\r\n    if (model.font) {\r\n      this.fontXform.render(xmlStream, model.font);\r\n    }\r\n    this.textXform.render(xmlStream, model.text);\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch(node.name) {\r\n        case 'r':\r\n          this.model = {};\r\n          return true;\r\n        case 't':\r\n          this.parser = this.textXform;\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        case 'rPr':\r\n          this.parser = this.fontXform;\r\n          this.parser.parseOpen(node);\r\n          return true;\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    switch(name) {\r\n      case 'r':\r\n        return false;\r\n      case 't':\r\n        this.model.text = this.parser.model;\r\n        this.parser = undefined;\r\n        return true;\r\n      case 'rPr':\r\n        this.model.font = this.parser.model;\r\n        this.parser = undefined;\r\n        return true;\r\n      default:\r\n        if (this.parser) {\r\n          this.parser.parseClose(name);\r\n        }\r\n        return true;\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/strings/phonetic-text-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar TextXform = require('./text-xform');\r\nvar RichTextXform = require('./rich-text-xform');\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\n// <rPh sb=\"0\" eb=\"1\">\r\n//   <t>(its pronounciation in KATAKANA)</t>\r\n// </rPh>\r\n\r\nvar PhoneticTextXform = module.exports = function() {\r\n  this.map = {\r\n    r: new RichTextXform(),\r\n    t: new TextXform()\r\n  };\r\n};\r\n\r\n\r\nutils.inherits(PhoneticTextXform, BaseXform, {\r\n\r\n  get tag() { return 'rPh'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openNode(this.tag, {\r\n      sb:  model.sb || 0,\r\n      eb: model.eb || 0\r\n    });\r\n    if (model && model.hasOwnProperty('richText') && model.richText) {\r\n      var r = this.map.r;\r\n      model.richText.forEach(function(text) {\r\n        r.render(xmlStream, text);\r\n      });\r\n    } else if (model) {\r\n      this.map.t.render(xmlStream, model.text);\r\n    }\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    var name = node.name;\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else if (name === this.tag) {\r\n      this.model = {\r\n        sb: parseInt(node.attributes.sb),\r\n        eb: parseInt(node.attributes.eb)\r\n      };\r\n    } else {\r\n      this.parser = this.map[name];\r\n      if (this.parser) {\r\n        this.parser.parseOpen(node);\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        switch(name) {\r\n          case 'r':\r\n            var rt = this.model.richText;\r\n            if (!rt) { rt = this.model.richText = []; }\r\n            rt.push(this.parser.model);\r\n            break;\r\n          case 't':\r\n            this.model.text = this.parser.model;\r\n            break;\r\n        }\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      switch(name) {\r\n        case this.tag:\r\n          return false;\r\n        default:\r\n          return true;\r\n      }\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/core/relationships-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar XmlStream = require('../../../utils/xml-stream');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar RelationshipXform = require('./relationship-xform');\r\n\r\n// <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\r\n// <Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\r\n//   <%relationships.forEach(function(r) {%>\r\n//     <Relationship\r\n//       Id=\"<%=r.rId%>\"\r\n//       Type=\"<%=r.type%>\"\r\n//       Target=\"<%=r.target%>\" <% if (r.targetMode) {%>\r\n//       TargetMode=\"<%=r.targetMode%>\"<%}%>\r\n//     />\r\n//     <%});%>\r\n// </Relationships>\r\n  \r\nvar RelationshipsXform = module.exports = function() {\r\n  this.map = {\r\n    Relationship: new RelationshipXform()\r\n  }\r\n};\r\n\r\nutils.inherits(RelationshipsXform, BaseXform, {\r\n  RELATIONSHIPS_ATTRIBUTES: {xmlns:  'http://schemas.openxmlformats.org/package/2006/relationships'}\r\n},{\r\n  render: function(xmlStream, model) {\r\n    model = model || this._values;\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n    xmlStream.openNode('Relationships', RelationshipsXform.RELATIONSHIPS_ATTRIBUTES);\r\n\r\n    var self = this;\r\n    model.forEach(function(relationship) {\r\n      self.map.Relationship.render(xmlStream, relationship);\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch(node.name) {\r\n        case 'Relationships':\r\n          this.model = [];\r\n          return true;\r\n        default:\r\n          this.parser = this.map[node.name];\r\n          if (this.parser) {\r\n            this.parser.parseOpen(node);\r\n            return true;\r\n          }\r\n          throw new Error('Unexpected xml node in parseOpen: ' + JSON.stringify(node));\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.push(this.parser.model);\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      switch(name) {\r\n        case 'Relationships':\r\n          return false;\r\n        default:\r\n          throw new Error('Unexpected xml node in parseClose: ' + name);\r\n      }\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/core/relationship-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar RelationshipXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(RelationshipXform, BaseXform, {\r\n  render: function(xmlStream, model) {\r\n    xmlStream.leafNode('Relationship', {\r\n      Id: model.rId,\r\n      Type: model.type,\r\n      Target: model.target,\r\n      TargetMode: model.targetMode\r\n    });\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    switch(node.name) {\r\n      case 'Relationship':\r\n        this.model = {\r\n          rId: node.attributes.Id,\r\n          type: node.attributes.Type,\r\n          target: node.attributes.Target\r\n        };\r\n        if (node.attributes.TargetMode) {\r\n          this.model.targetMode = node.attributes.TargetMode;\r\n        }\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/core/content-types-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar XmlStream = require('../../../utils/xml-stream');\r\n\r\nvar BaseXform = require('../base-xform');\r\n\r\n// used for rendering the [Content_Types].xml file\r\n// not used for parsing\r\nvar ContentTypesXform = module.exports = function() {\r\n};\r\n\r\n\r\nutils.inherits(ContentTypesXform, BaseXform, {\r\n  PROPERTY_ATTRIBUTES: {\r\n    xmlns: 'http://schemas.openxmlformats.org/package/2006/content-types'\r\n  }\r\n},{\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n\r\n    xmlStream.openNode('Types', ContentTypesXform.PROPERTY_ATTRIBUTES);\r\n\r\n    xmlStream.leafNode('Default', {Extension:'rels', ContentType: 'application/vnd.openxmlformats-package.relationships+xml'});\r\n    xmlStream.leafNode('Default', {Extension:'xml', ContentType: 'application/xml'});\r\n\r\n    xmlStream.leafNode('Override', {PartName:'/xl/workbook.xml', ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml'});\r\n\r\n    model.worksheets.forEach(function(worksheet) {\r\n      var name = '/xl/worksheets/sheet' + worksheet.id + '.xml';\r\n      xmlStream.leafNode('Override', {PartName:name, ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml'});\r\n    });\r\n\r\n    xmlStream.leafNode('Override', {PartName:'/xl/theme/theme1.xml', ContentType: 'application/vnd.openxmlformats-officedocument.theme+xml'});\r\n    xmlStream.leafNode('Override', {PartName:'/xl/styles.xml', ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml'});\r\n    xmlStream.leafNode('Override', {PartName:'/xl/sharedStrings.xml', ContentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml'});\r\n    xmlStream.leafNode('Override', {PartName:'/docProps/core.xml', ContentType: 'application/vnd.openxmlformats-package.core-properties+xml'});\r\n    xmlStream.leafNode('Override', {PartName:'/docProps/app.xml', ContentType: 'application/vnd.openxmlformats-officedocument.extended-properties+xml'});\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function() {\r\n    return false;\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/core/app-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar XmlStream = require('../../../utils/xml-stream');\r\nvar BaseXform = require('../base-xform');\r\nvar StringXform = require('../simple/string-xform');\r\n\r\nvar AppHeadingPairsXform = require('./app-heading-pairs-xform');\r\nvar AppTitleOfPartsXform = require('./app-titles-of-parts-xform');\r\n\r\nvar props = {\r\n  company: 'Company',\r\n  manager: 'Manager',\r\n  worksheets: [{name: 'sheet1'}]\r\n};\r\n\r\nvar AppXform = module.exports = function() {\r\n  this.map = {\r\n    'Company': new StringXform({tag: 'Company'}),\r\n    'Manager': new StringXform({tag: 'Manager'}),\r\n    'HeadingPairs': new AppHeadingPairsXform(),\r\n    'TitleOfParts': new AppTitleOfPartsXform()\r\n  }\r\n};\r\n\r\nAppXform.DateFormat = function(dt) {\r\n  return dt.toISOString().replace(/\\.\\d{3}/,'');\r\n};\r\nAppXform.DateAttrs = {'xsi:type': 'dcterms:W3CDTF'};\r\n\r\nAppXform.PROPERTY_ATTRIBUTES = {\r\n  'xmlns': 'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties',\r\n  'xmlns:vt': 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes'\r\n};\r\n\r\nutils.inherits(AppXform, BaseXform, {\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n\r\n    xmlStream.openNode('Properties', AppXform.PROPERTY_ATTRIBUTES);\r\n    \r\n    xmlStream.leafNode('Application',  undefined, 'Microsoft Excel');\r\n    xmlStream.leafNode('DocSecurity',  undefined, '0');\r\n    xmlStream.leafNode('ScaleCrop',  undefined, 'false');\r\n\r\n    this.map['HeadingPairs'].render(xmlStream, model.worksheets);\r\n    this.map['TitleOfParts'].render(xmlStream, model.worksheets);\r\n    this.map['Company'].render(xmlStream, model.company || '');\r\n    this.map['Manager'].render(xmlStream, model.manager);\r\n\r\n    xmlStream.leafNode('LinksUpToDate',  undefined, 'false');\r\n    xmlStream.leafNode('SharedDoc',  undefined, 'false');\r\n    xmlStream.leafNode('HyperlinksChanged',  undefined, 'false');\r\n    xmlStream.leafNode('AppVersion',  undefined, '16.0300');\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch(node.name) {\r\n        case 'Properties':\r\n          return true;\r\n        default:\r\n          this.parser = this.map[node.name];\r\n          if (this.parser) {\r\n            this.parser.parseOpen(node);\r\n            return true;\r\n          }\r\n          \r\n          // there's a lot we don't bother to parse\r\n          return false;\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      switch(name) {\r\n        case 'Properties':\r\n          this.model = {\r\n            worksheets: this.map['TitleOfParts'].model,\r\n            company: this.map['Company'].model,\r\n            manager: this.map['Manager'].model\r\n          };\r\n          return false;\r\n        default:\r\n          return true;\r\n      }\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/core/app-heading-pairs-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar AppHeadingPairsXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(AppHeadingPairsXform, BaseXform, {\r\n  render: function(xmlStream, model) {\r\n\r\n    xmlStream.openNode('HeadingPairs');\r\n    xmlStream.openNode('vt:vector', {size: 2, baseType: 'variant'});\r\n\r\n    xmlStream.openNode('vt:variant');\r\n    xmlStream.leafNode('vt:lpstr', undefined, 'Worksheets');\r\n    xmlStream.closeNode();\r\n    \r\n    xmlStream.openNode('vt:variant');\r\n    xmlStream.leafNode('vt:i4', undefined, model.length);\r\n    xmlStream.closeNode();\r\n    \r\n    xmlStream.closeNode();\r\n    xmlStream.closeNode();\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    // no parsing\r\n    return node.name === 'HeadingPairs';\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function(name) {\r\n    return name !== 'HeadingPairs';\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/core/app-titles-of-parts-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar AppTitlesOfPartsXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(AppTitlesOfPartsXform, BaseXform, {\r\n  render: function(xmlStream, model) {\r\n\r\n    xmlStream.openNode('TitlesOfParts');\r\n    xmlStream.openNode('vt:vector', {size: model.length, baseType: 'lpstr'});\r\n\r\n    model.forEach(function(sheet) {\r\n      xmlStream.leafNode('vt:lpstr', undefined, sheet.name);\r\n    });\r\n    \r\n    xmlStream.closeNode();\r\n    xmlStream.closeNode();\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    // no parsing\r\n    return node.name === 'TitlesOfParts';\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function(name) {\r\n    return name !== 'TitlesOfParts';\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/book/workbook-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar _ = require('../../../utils/under-dash');\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar colCache = require('../../../utils/col-cache');\r\nvar XmlStream = require('../../../utils/xml-stream');\r\n\r\nvar BaseXform = require('../base-xform');\r\nvar StaticXform = require('../static-xform');\r\nvar ListXform = require('../list-xform');\r\nvar DefinedNameXform = require('./defined-name-xform');\r\nvar SheetXform = require('./sheet-xform');\r\nvar WorkbookViewXform = require('./workbook-view-xform');\r\nvar WorkbookPropertiesXform = require('./workbook-properties-xform');\r\n\r\nvar WorkbookXform = module.exports = function() {\r\n  this.map = {\r\n    fileVersion: WorkbookXform.STATIC_XFORMS.fileVersion,\r\n    workbookPr: new WorkbookPropertiesXform(),\r\n    bookViews: new ListXform({tag: 'bookViews', count: false, childXform: new WorkbookViewXform()}),\r\n    sheets: new ListXform({tag: 'sheets', count: false, childXform: new SheetXform()}),\r\n    definedNames: new ListXform({tag: 'definedNames', count: false, childXform: new DefinedNameXform()}),\r\n    calcPr: WorkbookXform.STATIC_XFORMS.calcPr\r\n  };\r\n};\r\n\r\nutils.inherits(WorkbookXform, BaseXform, {\r\n  WORKBOOK_ATTRIBUTES: {\r\n    'xmlns': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\r\n    'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\r\n    'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\r\n    'mc:Ignorable': 'x15',\r\n    'xmlns:x15': 'http://schemas.microsoft.com/office/spreadsheetml/2010/11/main'\r\n  },\r\n  STATIC_XFORMS: {\r\n    fileVersion: new StaticXform({tag: 'fileVersion', $: {appName: 'xl', lastEdited: 5, lowestEdited: 5, rupBuild: 9303}}),\r\n    calcPr: new StaticXform({tag: 'calcPr', $: {calcId: 171027}})\r\n  }\r\n},{\r\n\r\n  prepare: function(model) {\r\n    model.sheets = model.worksheets;\r\n\r\n    // collate all the print areas from all of the sheets and add them to the defined names\r\n    var printAreas = [];\r\n    var index = 0; // sheets is sparse array - calc index manually\r\n    model.sheets.forEach(function(sheet) {\r\n      if (sheet.pageSetup && sheet.pageSetup.printArea) {\r\n        var definedName = {\r\n          name: '_xlnm.Print_Area',\r\n          ranges: ['\\'' + sheet.name + '\\'!' + sheet.pageSetup.printArea],\r\n          localSheetId: index\r\n        };\r\n        printAreas.push(definedName);\r\n      }\r\n      index++;\r\n    });\r\n    if (printAreas.length) {\r\n      model.definedNames = model.definedNames.concat(printAreas);\r\n    }\r\n  },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n    xmlStream.openNode('workbook', WorkbookXform.WORKBOOK_ATTRIBUTES);\r\n\r\n    this.map.fileVersion.render(xmlStream);\r\n    this.map.workbookPr.render(xmlStream, model.properties);\r\n    this.map.bookViews.render(xmlStream, model.views);\r\n    this.map.sheets.render(xmlStream, model.sheets);\r\n    this.map.definedNames.render(xmlStream, model.definedNames);\r\n    this.map.calcPr.render(xmlStream);\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      switch(node.name) {\r\n        case 'workbook':\r\n          return true;\r\n        default:\r\n          this.parser = this.map[node.name];\r\n          if (this.parser) {\r\n            this.parser.parseOpen(node);\r\n          }\r\n          return true;\r\n      }\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      switch(name) {\r\n        case 'workbook':\r\n          this.model = {\r\n            sheets: this.map.sheets.model,\r\n            properties: this.map.workbookPr.model,\r\n            views: this.map.bookViews.model\r\n          };\r\n          if (this.map.definedNames.model) {\r\n            this.model.definedNames = this.map.definedNames.model;\r\n          }\r\n\r\n          return false;\r\n        default:\r\n          // not quite sure how we get here!\r\n          return true;\r\n      }\r\n    }\r\n  },\r\n\r\n  reconcile: function(model) {\r\n    var rels = model.workbookRels.reduce(function(map, rel) {\r\n      map[rel.rId] = rel;\r\n      return map;\r\n    }, {});\r\n\r\n    // reconcile sheet ids, rIds and names\r\n    var worksheets = [];\r\n    var worksheet;\r\n    var index = 0;\r\n\r\n    model.sheets.forEach(function(sheet) {\r\n      var rel = rels[sheet.rId];\r\n      if (!rel) {\r\n        return;\r\n      }\r\n      worksheet = model.worksheetHash['xl/' + rel.target];\r\n      worksheet.name = sheet.name;\r\n      worksheet.id = sheet.id;\r\n      worksheets[index++] = worksheet;\r\n    });\r\n\r\n    // reconcile print areas\r\n    var definedNames = [];\r\n    _.each(model.definedNames, function(definedName) {\r\n      if (definedName.name === '_xlnm.Print_Area') {\r\n        worksheet = worksheets[definedName.localSheetId];\r\n        if (worksheet) {\r\n          if (!worksheet.pageSetup) { worksheet.pageSetup = {}; }\r\n          var range  =  colCache.decodeEx(definedName.ranges[0]);\r\n          worksheet.pageSetup.printArea = range.dimensions;\r\n        }\r\n      } else {\r\n        definedNames.push(definedName);\r\n      }\r\n    });\r\n    model.definedNames = definedNames;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/book/defined-name-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar DefinedNamesXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(DefinedNamesXform, BaseXform, {\r\n  render: function(xmlStream, model) {\r\n    // <definedNames>\r\n    //   <definedName name=\"name\">name.ranges.join(',')</definedName>\r\n    //   <definedName name=\"_xlnm.Print_Area\" localSheetId=\"0\">name.ranges.join(',')</definedName>\r\n    // </definedNames>\r\n    xmlStream.openNode('definedName', {\r\n      name: model.name,\r\n      localSheetId: model.localSheetId\r\n    });\r\n    xmlStream.writeText(model.ranges.join(','));\r\n    xmlStream.closeNode();\r\n  },\r\n  parseOpen: function(node) {\r\n    switch(node.name) {\r\n      case 'definedName':\r\n        this._parsedName = node.attributes.name;\r\n        this._parsedLocalSheetId = node.attributes.localSheetId;\r\n        this._parsedText = [];\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    this._parsedText.push(text);\r\n  },\r\n  parseClose: function() {\r\n    this.model = {\r\n      name: this._parsedName,\r\n      ranges: extractRanges(this._parsedText.join(''))\r\n    };\r\n    if (this._parsedLocalSheetId !== undefined) {\r\n      this.model.localSheetId = parseInt(this._parsedLocalSheetId);\r\n    }\r\n    return false;\r\n  }\r\n});\r\n\r\nfunction extractRanges(parsedText) {\r\n var ranges = [];\r\n var quotesOpened = false;\r\n var last = '';\r\n parsedText.split(',').forEach(function (item) {\r\n     if(!item){\r\n         return;\r\n       }\r\n     var quotes = (item.match(/'/g) || []).length;\r\n\r\n         if (!quotes) {\r\n         if (quotesOpened) {\r\n             last += item + ',';\r\n           } else {\r\n             ranges.push(item);\r\n           }\r\n         return;\r\n       }\r\n     var quotesEven = quotes % 2 === 0;\r\n\r\n         if (!quotesOpened && quotesEven) {\r\n         ranges.push(item);\r\n       } else if (quotesOpened && !quotesEven) {\r\n         quotesOpened = false;\r\n         ranges.push(last + item);\r\n         last = '';\r\n       } else {\r\n         quotesOpened = true;\r\n         last += item + ',';\r\n       }\r\n   });\r\n return ranges;\r\n}","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/book/sheet-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar WorksheetXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(WorksheetXform, BaseXform, {\r\n  \r\n  render: function(xmlStream, model) {\r\n    xmlStream.leafNode('sheet', {\r\n      sheetId: model.id,\r\n      name: model.name,\r\n      'r:id': model.rId\r\n    });\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    if (node.name === 'sheet') {\r\n      this.model = {\r\n        name: utils.xmlDecode(node.attributes.name),\r\n        id: parseInt(node.attributes.sheetId),\r\n        rId: node.attributes['r:id']\r\n      };\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/book/workbook-view-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar WorkbookViewXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(WorkbookViewXform, BaseXform, {\r\n  // \t\t<workbookView visibility=\"hidden\" xWindow=\"0\" yWindow=\"0\" windowWidth=\"23040\" windowHeight=\"8808\"/>\r\n\r\n  render: function(xmlStream, model) {\r\n    var attributes = {\r\n      xWindow: model.x || 0,\r\n      yWindow: model.y || 0,\r\n      windowWidth: model.width || 12000,\r\n      windowHeight: model.height || 24000,\r\n      firstSheet: model.firstSheet,\r\n      activeTab: model.activeTab\r\n    };\r\n    if (model.visibility && model.visibility !== 'visible') {\r\n      attributes.visibility = model.visibility;\r\n    }\r\n    xmlStream.leafNode('workbookView', attributes);\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    if (node.name === 'workbookView') {\r\n      var model = this.model = {};\r\n      var addS = function(name, value, dflt) {\r\n        var s = (value !== undefined) ? model[name] = value : dflt;\r\n        if (s !== undefined) {\r\n          model[name] = s;\r\n        }\r\n      };\r\n      var addN = function(name, value, dflt) {\r\n        var n = (value !== undefined) ? model[name] = parseInt(value) : dflt;\r\n        if (n !== undefined) {\r\n          model[name] = n;\r\n        }\r\n      };\r\n      addN('x', node.attributes.xWindow, 0);\r\n      addN('y', node.attributes.yWindow,  0);\r\n      addN('width', node.attributes.windowWidth, 25000);\r\n      addN('height', node.attributes.windowHeight, 10000);\r\n      addS('visibility', node.attributes.visibility, 'visible');\r\n      addN('activeTab', node.attributes.activeTab, undefined);\r\n      addN('firstSheet', node.attributes.firstSheet, undefined);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/book/workbook-properties-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar WorksheetPropertiesXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(WorksheetPropertiesXform, BaseXform, {\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.leafNode('workbookPr', {\r\n      date1904: model.date1904 ? 1 : undefined,\r\n      defaultThemeVersion: 164011,\r\n      filterPrivacy: 1\r\n    });\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (node.name === 'workbookPr') {\r\n      this.model = {\r\n        date1904: node.attributes.date1904 === '1'\r\n      };\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/worksheet-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar events = require('events');\r\nvar _ = require('../../../utils/under-dash');\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar XmlStream = require('../../../utils/xml-stream');\r\n\r\nvar Merges = require('./merges');\r\nvar HyperlinkMap = require('./hyperlink-map');\r\n\r\nvar BaseXform = require('../base-xform');\r\nvar ListXform = require('../list-xform');\r\nvar RowXform = require('./row-xform');\r\nvar ColXform = require('./col-xform');\r\nvar DimensionXform = require('./dimension-xform');\r\nvar HyperlinkXform = require('./hyperlink-xform');\r\nvar MergeCellXform = require('./merge-cell-xform');\r\nvar DataValidationsXform = require('./data-validations-xform');\r\nvar SheetPropertiesXform = require('./sheet-properties-xform');\r\nvar SheetFormatPropertiesXform = require('./sheet-format-properties-xform');\r\nvar SheetViewXform = require('./sheet-view-xform');\r\nvar PageMarginsXform = require('./page-margins-xform');\r\nvar PageSetupXform = require('./page-setup-xform');\r\nvar PrintOptionsXform = require('./print-options-xform');\r\n\r\nvar WorkSheetXform = module.exports = function() {\r\n  this.map = {\r\n    sheetPr: new SheetPropertiesXform(),\r\n    dimension: new DimensionXform(),\r\n    sheetViews: new ListXform({tag: 'sheetViews', count: false, childXform: new SheetViewXform()}),\r\n    sheetFormatPr: new SheetFormatPropertiesXform(),\r\n    cols: new ListXform({tag: 'cols', count: false, childXform: new ColXform()}),\r\n    sheetData: new ListXform({tag: 'sheetData', count: false, empty: true, childXform: new RowXform()}),\r\n    mergeCells: new ListXform({tag: 'mergeCells', count: true, childXform: new MergeCellXform()}),\r\n    hyperlinks: new ListXform({tag: 'hyperlinks', count: false, childXform: new HyperlinkXform()}),\r\n    pageMargins: new PageMarginsXform(),\r\n    dataValidations: new DataValidationsXform(),\r\n    pageSetup: new PageSetupXform(),\r\n    printOptions: new PrintOptionsXform()\r\n  };\r\n};\r\n\r\nutils.inherits(WorkSheetXform, BaseXform, {\r\n  WORKSHEET_ATTRIBUTES: {\r\n    'xmlns': 'http://schemas.openxmlformats.org/spreadsheetml/2006/main',\r\n    'xmlns:r': 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',\r\n    'xmlns:mc': 'http://schemas.openxmlformats.org/markup-compatibility/2006',\r\n    'mc:Ignorable': 'x14ac',\r\n    'xmlns:x14ac': 'http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac'\r\n  }\r\n},{\r\n\r\n  prepare: function(model, options) {\r\n    options.merges = new Merges();\r\n    model.hyperlinks = options.hyperlinks = [];\r\n\r\n    this.map.cols.prepare(model.cols, options);\r\n    this.map.sheetData.prepare(model.rows, options);\r\n\r\n    model.mergeCells = options.merges.mergeCells;\r\n    \r\n  },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openXml(XmlStream.StdDocAttributes);\r\n    xmlStream.openNode('worksheet', WorkSheetXform.WORKSHEET_ATTRIBUTES);\r\n\r\n    var sheetFormatPropertiesModel = model.properties ? {\r\n      defaultRowHeight: model.properties.defaultRowHeight,\r\n      dyDescent: model.properties.dyDescent,\r\n      outlineLevelCol: model.properties.outlineLevelCol,\r\n      outlineLevelRow: model.properties.outlineLevelRow\r\n    } : undefined;\r\n    var sheetPropertiesModel = {\r\n      tabColor: model.properties && model.properties.tabColor,\r\n      pageSetup: model.pageSetup && model.pageSetup.fitToPage ? {\r\n        fitToPage: model.pageSetup.fitToPage\r\n      } : undefined\r\n    };\r\n    var pageMarginsModel = model.pageSetup && model.pageSetup.margins;\r\n    var printOptionsModel = {\r\n      showRowColHeaders: model.showRowColHeaders,\r\n      showGridLines: model.showGridLines,\r\n      horizontalCentered: model.horizontalCentered,\r\n      verticalCentered: model.verticalCentered\r\n    };\r\n\r\n    this.map.sheetPr.render(xmlStream, sheetPropertiesModel);\r\n    this.map.dimension.render(xmlStream, model.dimensions);\r\n    this.map.sheetViews.render(xmlStream, model.views);\r\n    this.map.sheetFormatPr.render(xmlStream, sheetFormatPropertiesModel);\r\n    this.map.cols.render(xmlStream, model.cols);\r\n    this.map.sheetData.render(xmlStream, model.rows);\r\n    this.map.mergeCells.render(xmlStream, model.mergeCells);\r\n    this.map.dataValidations.render(xmlStream, model.dataValidations);\r\n    this.map.hyperlinks.render(xmlStream, model.hyperlinks);//For some reason hyperlinks have to be after the data validations\r\n    this.map.pageMargins.render(xmlStream, pageMarginsModel);\r\n    this.map.printOptions.render(xmlStream, printOptionsModel);\r\n    this.map.pageSetup.render(xmlStream, model.pageSetup);\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n\r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else if (node.name === 'worksheet') {\r\n      _.each(this.map, function(xform) {\r\n        xform.reset();\r\n      });\r\n      return true;\r\n    } else {\r\n      this.parser = this.map[node.name];\r\n      if (this.parser) {\r\n        this.parser.parseOpen(node);\r\n      }\r\n      return true;\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      switch(name) {\r\n        case 'worksheet':\r\n          var properties = this.map.sheetFormatPr.model;\r\n          if (this.map.sheetPr.model && this.map.sheetPr.model.tabColor) {\r\n            properties.tabColor = this.map.sheetPr.model.tabColor;\r\n          }\r\n          var sheetProperties = {\r\n            fitToPage: (this.map.sheetPr.model && this.map.sheetPr.model.pageSetup && this.map.sheetPr.model.pageSetup.fitToPage) || false,\r\n            margins: this.map.pageMargins.model\r\n          };\r\n          var pageSetup = Object.assign(\r\n            sheetProperties,\r\n            this.map.pageSetup.model,\r\n            this.map.printOptions.model\r\n          );\r\n          this.model = {\r\n            dimensions: this.map.dimension.model,\r\n            cols: this.map.cols.model,\r\n            rows: this.map.sheetData.model,\r\n            mergeCells: this.map.mergeCells.model,\r\n            hyperlinks: this.map.hyperlinks.model,\r\n            dataValidations: this.map.dataValidations.model,\r\n            properties: properties,\r\n            views: this.map.sheetViews.model,\r\n            pageSetup: pageSetup\r\n          };\r\n          return false;\r\n        default:\r\n          // not quite sure how we get here!\r\n          return true;\r\n      }\r\n    }\r\n  },\r\n\r\n  reconcile: function(model, options) {\r\n    // options.merges = new Merges();\r\n    // options.merges.reconcile(model.mergeCells, model.rows);\r\n    options.hyperlinkMap  = new HyperlinkMap(model.relationships, model.hyperlinks);\r\n\r\n    // compact the rows and cells\r\n    model.rows = model.rows && model.rows.filter(function (row) {\r\n      return row;\r\n    }) || [];\r\n    model.rows.forEach(function (row) {\r\n      row.cells = row.cells && row.cells.filter(function (cell) {\r\n        return cell;\r\n      }) || [];\r\n    });\r\n    \r\n    this.map.cols.reconcile(model.cols, options);\r\n    this.map.sheetData.reconcile(model.rows, options);\r\n\r\n    model.relationships = undefined;\r\n    model.hyperlinks = undefined;\r\n  }\r\n});\r\n\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/merges.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\nvar _ = require('../../../utils/under-dash');\r\n\r\nvar Range = require('../../../doc/range');\r\nvar colCache = require('../../../utils/col-cache');\r\nvar Enums = require('../../../doc/enums');\r\n\r\nvar Merges = module.exports = function() {\r\n  // optional mergeCells is array of ranges (like the xml)\r\n  this.merges = {};\r\n};\r\n\r\nMerges.prototype = {\r\n  add:  function(merge) {\r\n    // merge is {address, master}\r\n    if (this.merges[merge.master]) {\r\n      this.merges[merge.master].expandToAddress(merge.address);\r\n    } else {\r\n      var range = merge.master + ':' + merge.address;\r\n      this.merges[merge.master] = new Range(range);\r\n    }\r\n  },\r\n  get mergeCells() {\r\n    return _.map(this.merges, function(merge) {\r\n      return merge.range;\r\n    });\r\n  },\r\n  reconcile: function(mergeCells, rows) {\r\n    // reconcile merge list with merge cells\r\n    _.each(mergeCells, function (merge) {\r\n      var dimensions = colCache.decode(merge);\r\n      for (var i = dimensions.top; i <= dimensions.bottom; i++) {\r\n        var row = rows[i-1];\r\n        for (var j = dimensions.left; j <= dimensions.right; j++) {\r\n          var cell = row.cells[j-1];\r\n          if (!cell) {\r\n            // nulls are not included in document - so if master cell has no value - add a null one here\r\n            row.cells[j] = {\r\n              type: Enums.ValueType.Null,\r\n              address: colCache.encodeAddress(i, j)\r\n            };\r\n          } else if (cell.type === Enums.ValueType.Merge) {\r\n            cell.master = dimensions.tl;\r\n          }\r\n        }\r\n      }\r\n    });\r\n  },\r\n  getMasterAddress:  function(address) {\r\n    // if address has been merged, return its master's address. Assumes reconcile has been called\r\n    var range = this.hash[address];\r\n    if (range) {\r\n      return range.tl;\r\n    }\r\n  }\r\n};","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/hyperlink-map.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar HyperlinkMap = function(relationships, hyperlinks) {\r\n  var rels = {};\r\n  var map = this.map = {};\r\n  if (relationships && hyperlinks) {\r\n    relationships.forEach(function (relationship) {\r\n      rels[relationship.rId] = relationship.target;\r\n    });\r\n\r\n    hyperlinks.forEach(function (hyperlink) {\r\n      map[hyperlink.address] = rels[hyperlink.rId];\r\n    });\r\n  }\r\n};\r\n\r\nHyperlinkMap.prototype = {\r\n  getHyperlink: function(address) {\r\n    return this.map[address];\r\n  }\r\n};\r\n\r\nmodule.exports = HyperlinkMap;\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/row-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar CellXform = require('./cell-xform');\r\n\r\nvar RowXform = module.exports = function() {\r\n  this.map = {\r\n    c: new CellXform()\r\n  };\r\n};\r\n\r\n// <row r=\"<%=row.number%>\"\r\n//     <% if(row.height) {%> ht=\"<%=row.height%>\" customHeight=\"1\"<% } %>\r\n//     <% if(row.hidden) {%> hidden=\"1\"<% } %>\r\n//     <% if(row.min > 0 && row.max > 0 && row.min <= row.max) {%> spans=\"<%=row.min%>:<%=row.max%>\"<% } %>\r\n//     <% if (row.styleId) { %> s=\"<%=row.styleId%>\" customFormat=\"1\" <% } %>\r\n//     x14ac:dyDescent=\"0.25\">\r\n//   <% row.cells.forEach(function(cell){ %>\r\n//     <%=cell.xml%><% }); %>\r\n// </row>\r\n\r\nutils.inherits(RowXform, BaseXform, {\r\n\r\n  get tag() { return 'row'; },\r\n\r\n  prepare: function(model, options) {\r\n    var styleId = options.styles.addStyleModel(model.style);\r\n    if (styleId) {\r\n      model.styleId = styleId;\r\n    }\r\n    var cellXform = this.map.c;\r\n    model.cells.forEach(function(cellModel) {\r\n      cellXform.prepare(cellModel, options);\r\n    });\r\n  },\r\n  \r\n  render: function(xmlStream, model, options) {\r\n    xmlStream.openNode('row');\r\n    xmlStream.addAttribute('r',  model.number);\r\n    if (model.height) {\r\n      xmlStream.addAttribute('ht',  model.height);\r\n      xmlStream.addAttribute('customHeight', '1');\r\n    }\r\n    if (model.hidden) {\r\n      xmlStream.addAttribute('hidden',  '1');\r\n    }\r\n    if (model.min > 0 && model.max > 0 && model.min <= model.max) {\r\n      xmlStream.addAttribute('spans', model.min + ':' + model.max);\r\n    }\r\n    if (model.styleId) {\r\n      xmlStream.addAttribute('s',  model.styleId);\r\n      xmlStream.addAttribute('customFormat', '1');\r\n    }\r\n    xmlStream.addAttribute('x14ac:dyDescent', '0.25');\r\n    if (model.outlineLevel) {\r\n      xmlStream.addAttribute('outlineLevel',  model.outlineLevel);\r\n    }\r\n    if (model.collapsed) {\r\n      xmlStream.addAttribute('collapsed',  '1');\r\n    }\r\n\r\n    var cellXform = this.map.c;\r\n    model.cells.forEach(function(cellModel) {\r\n      cellXform.render(xmlStream, cellModel, options);\r\n    });\r\n\r\n    xmlStream.closeNode();\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else if (node.name === 'row') {\r\n      var spans = node.attributes.spans ? node.attributes.spans.split(':').map(function(span) { return parseInt(span); }) : [undefined, undefined];\r\n      var model = this.model = {\r\n        number: parseInt(node.attributes.r),\r\n        min: spans[0],\r\n        max: spans[1],\r\n        cells: []\r\n      };\r\n      if (node.attributes.s) {\r\n        model.styleId = parseInt(node.attributes.s);\r\n      }\r\n      if (node.attributes.hidden) {\r\n        model.hidden = true;\r\n      }\r\n      if (node.attributes.bestFit) {\r\n        model.bestFit = true;\r\n      }\r\n      if (node.attributes.ht) {\r\n        model.height = parseFloat(node.attributes.ht);\r\n      }\r\n      if (node.attributes.outlineLevel) {\r\n        model.outlineLevel = parseInt(node.attributes.outlineLevel);\r\n      }\r\n      if (node.attributes.collapsed) {\r\n        model.collapsed = true;\r\n      }\r\n      return true;\r\n    } else if ((this.parser = this.map[node.name])) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.model.cells.push(this.parser.model);\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  \r\n  reconcile: function(model, options) {\r\n    model.style = model.styleId ? options.styles.getStyleModel(model.styleId) : {};\r\n    if (model.styleId != undefined) {\r\n      model.styleId = undefined;\r\n    }\r\n\r\n    var cellXform = this.map.c;\r\n    model.cells.forEach(function(cellModel) {\r\n      cellXform.reconcile(cellModel, options);\r\n    });\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/cell-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar Enums = require('../../../doc/enums');\r\nvar RelType = require('../../rel-type');\r\n\r\n\r\nfunction getValueType(v) {\r\n  if ((v === null) || (v === undefined)) {\r\n    return Enums.ValueType.Null;\r\n  } else if ((v instanceof String) || (typeof v === 'string')) {\r\n    return Enums.ValueType.String;\r\n  } else if (typeof v === 'number') {\r\n    return Enums.ValueType.Number;\r\n  } else if (typeof v === 'boolean') {\r\n    return Enums.ValueType.Boolean;\r\n  } else if (v instanceof Date) {\r\n    return Enums.ValueType.Date;\r\n  } else if (v.text && v.hyperlink) {\r\n    return Enums.ValueType.Hyperlink;\r\n  } else if (v.formula) {\r\n    return Enums.ValueType.Formula;\r\n  } else if (v.error) {\r\n    return Enums.ValueType.Error;\r\n  } else {\r\n    throw new Error('I could not understand type of value');\r\n  }\r\n}\r\n\r\nfunction getEffectiveCellType(cell) {\r\n  switch (cell.type) {\r\n    case Enums.ValueType.Formula:\r\n      return getValueType(cell.result);\r\n    default:\r\n      return cell.type;\r\n  }\r\n}\r\n\r\n\r\nvar CellXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(CellXform, BaseXform, {\r\n\r\n  get tag() { return 'c'; },\r\n\r\n  prepare: function(model, options) {\r\n    var styleId = options.styles.addStyleModel(model.style || {}, getEffectiveCellType(model));\r\n    if (styleId) {\r\n      model.styleId = styleId;\r\n    }\r\n\r\n    switch(model.type) {\r\n      case Enums.ValueType.String:\r\n        if (options.sharedStrings) {\r\n          model.ssId = options.sharedStrings.add(model.value);\r\n        }\r\n        break;\r\n      case Enums.ValueType.Date:\r\n      case Enums.ValueType.Formula:\r\n        if (options.date1904) {\r\n          model.date1904 = true;\r\n        }\r\n        break;\r\n      case Enums.ValueType.Hyperlink:\r\n        if (options.sharedStrings) {\r\n          model.ssId = options.sharedStrings.add(model.text);\r\n        }\r\n        var hyperlinkId = options.hyperlinks.length + 1;\r\n        options.hyperlinks.push({\r\n          address: model.address,\r\n          rId: 'rId' + hyperlinkId,\r\n          type: RelType.Hyperlink,\r\n          target: model.hyperlink,\r\n          targetMode: 'External'\r\n        });\r\n        break;\r\n      case Enums.ValueType.Merge:\r\n        options.merges.add(model);\r\n        break;\r\n    }\r\n  },\r\n\r\n  render: function(xmlStream, model) {\r\n    if ((model.type === Enums.ValueType.Null) && !model.styleId) {\r\n      // if null and no style, exit\r\n      return;\r\n    }\r\n\r\n    xmlStream.openNode('c');\r\n    xmlStream.addAttribute('r', model.address);\r\n\r\n    if (model.styleId) {\r\n      xmlStream.addAttribute('s', model.styleId);\r\n    }\r\n\r\n    switch (model.type) {\r\n      case Enums.ValueType.Null:\r\n        break;\r\n      case Enums.ValueType.Number:\r\n        xmlStream.leafNode('v', null, model.value);\r\n        break;\r\n      case Enums.ValueType.Boolean:\r\n        xmlStream.addAttribute('t', 'b');\r\n        xmlStream.leafNode('v', null, model.value ? '1' : '0');\r\n        break;\r\n      case Enums.ValueType.Error:\r\n        xmlStream.addAttribute('t', 'e');\r\n        xmlStream.leafNode('v', null, model.value.error);\r\n        break;\r\n      case Enums.ValueType.String:\r\n        if (model.ssId !== undefined) {\r\n          xmlStream.addAttribute('t', 's');\r\n          xmlStream.leafNode('v', null, model.ssId);\r\n        } else {\r\n          xmlStream.addAttribute('t', 'str');\r\n          xmlStream.leafNode('v', null, model.value);\r\n        }\r\n        break;\r\n      case Enums.ValueType.Date:\r\n        xmlStream.leafNode('v', null, utils.dateToExcel(model.value, model.date1904));\r\n        break;\r\n      case Enums.ValueType.Hyperlink:\r\n        if (model.ssId !== undefined) {\r\n          xmlStream.addAttribute('t', 's');\r\n          xmlStream.leafNode('v', null, model.ssId);\r\n        } else {\r\n          xmlStream.addAttribute('t', 'str');\r\n          xmlStream.leafNode('v', null, model.text);\r\n        }\r\n        break;\r\n      case Enums.ValueType.Formula:\r\n        switch (getValueType(model.result)) {\r\n          case Enums.ValueType.Null: // ?\r\n            xmlStream.leafNode('f', null, model.formula);\r\n            break;\r\n          case Enums.ValueType.String:\r\n            // oddly, formula results don't ever use shared strings\r\n            xmlStream.addAttribute('t', 'str');\r\n            xmlStream.leafNode('f', null, model.formula);\r\n            xmlStream.leafNode('v', null, model.result);\r\n            break;\r\n          case Enums.ValueType.Number:\r\n            xmlStream.leafNode('f', null, model.formula);\r\n            xmlStream.leafNode('v', null, model.result);\r\n            break;\r\n          case Enums.ValueType.Boolean:\r\n            xmlStream.addAttribute('t', 'b');\r\n            xmlStream.leafNode('f', null, model.formula);\r\n            xmlStream.leafNode('v', null, model.result ? 1 :  0);\r\n            break;\r\n          case Enums.ValueType.Error:\r\n            xmlStream.addAttribute('t', 'e');\r\n            xmlStream.leafNode('f', null, model.formula);\r\n            xmlStream.leafNode('v', null, model.result.error);\r\n            break;\r\n          case Enums.ValueType.Date:\r\n            xmlStream.leafNode('f', null, model.formula);\r\n            xmlStream.leafNode('v', null, utils.dateToExcel(model.result, model.date1904));\r\n            break;\r\n          // case Enums.ValueType.Hyperlink: // ??\r\n          // case Enums.ValueType.Formula:\r\n          default:\r\n            throw new Error('I could not understand type of value');\r\n        }\r\n        break;\r\n      case Enums.ValueType.Merge:\r\n        // nothing to add\r\n        break;\r\n    }\r\n\r\n    xmlStream.closeNode(); //</c>\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    switch(node.name) {\r\n      case 'c':\r\n        //var address = colCache.decodeAddress(node.attributes.r);\r\n        var model = this.model = {\r\n          address: node.attributes.r\r\n        };\r\n        this.t = node.attributes.t;\r\n        if (node.attributes.s) {\r\n          model.styleId = parseInt(node.attributes.s);\r\n        }\r\n        return true;\r\n\r\n      case 'f':\r\n        this.currentNode = 'f';\r\n        return true;\r\n\r\n      case 'v':\r\n        this.currentNode = 'v';\r\n        return true;\r\n\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    switch(this.currentNode) {\r\n      case 'f':\r\n        this.model.formula = this.model.formula ? this.model.formula + text : text;\r\n        break;\r\n      case 'v':\r\n        this.model.value = this.model.value ? this.model.value + text :  text;\r\n        break;\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    switch(name) {\r\n      case 'c':\r\n        var model = this.model;\r\n        // first guess on cell type\r\n        if (model.formula) {\r\n          model.type = Enums.ValueType.Formula;\r\n          if (model.value) {\r\n            if (this.t === 'str') {\r\n              model.result = utils.xmlDecode(model.value);\r\n            } else if (this.t === 'b') {\r\n              model.result = parseInt(model.value) != 0;\r\n            } else if (this.t === 'e') {\r\n              model.result = { error: model.value };\r\n            } else {\r\n              model.result = parseFloat(model.value);\r\n            }\r\n            model.value = undefined;\r\n          }\r\n        } else if (model.value !== undefined) {\r\n          switch (this.t) {\r\n            case 's':\r\n              model.type = Enums.ValueType.String;\r\n              model.value = parseInt(model.value);\r\n              break;\r\n            case 'str':\r\n              model.type = Enums.ValueType.String;\r\n              model.value = utils.xmlDecode(model.value);\r\n              break;\r\n            case 'b':\r\n              model.type = Enums.ValueType.Boolean;\r\n              model.value = parseInt(model.value) !== 0;\r\n              break;\r\n            case 'e':\r\n              model.type = Enums.ValueType.Error;\r\n              model.value = { error: model.value };\r\n              break;\r\n            default:\r\n              model.type = Enums.ValueType.Number;\r\n              model.value = parseFloat(model.value);\r\n              break;\r\n          }\r\n        } else if (model.styleId) {\r\n          model.type = Enums.ValueType.Null;\r\n        } else {\r\n          model.type = Enums.ValueType.Merge;\r\n        }\r\n        return false;\r\n      case 'f':\r\n      case 'v':\r\n        this.currentNode = undefined;\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n\r\n  reconcile: function(model, options) {\r\n    var style = model.styleId && options.styles.getStyleModel(model.styleId);\r\n    if (style) {\r\n      model.style = style;\r\n    }\r\n    if (model.styleId !== undefined) {\r\n      model.styleId = undefined;\r\n    }\r\n\r\n    switch (model.type) {\r\n      case Enums.ValueType.String:\r\n        if (typeof model.value === 'number') {\r\n          model.value = options.sharedStrings.getString(model.value);\r\n        }\r\n        if (model.value.richText) {\r\n          model.type = Enums.ValueType.RichText;\r\n        }\r\n        break;\r\n      case Enums.ValueType.Number:\r\n        if (style && utils.isDateFmt(style.numFmt)) {\r\n          model.type = Enums.ValueType.Date;\r\n          model.value = utils.excelToDate(model.value, options.date1904);\r\n        }\r\n        break;\r\n      case Enums.ValueType.Formula:\r\n        if ((model.result !== undefined) && style && utils.isDateFmt(style.numFmt)) {\r\n          model.result = utils.excelToDate(model.result, options.date1904);\r\n        }\r\n        break;\r\n    }\r\n    \r\n    // look for hyperlink\r\n    var hyperlink = options.hyperlinkMap.getHyperlink(model.address);\r\n    if (hyperlink) {\r\n      model.type = Enums.ValueType.Hyperlink;\r\n      model.text = model.value;\r\n      model.value = undefined;\r\n      model.hyperlink = hyperlink;\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/rel-type.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n * \r\n */\r\n\"use strict\";\r\n\r\nmodule.exports = {\r\n    OfficeDocument: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\",\r\n    Worksheet: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet\",\r\n    CalcChain: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/calcChain\",\r\n    SharedStrings: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings\",\r\n    Styles: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles\",\r\n    Theme: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme\",\r\n    Hyperlink: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink\"\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/col-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar ColXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(ColXform, BaseXform, {\r\n\r\n  get tag() { return 'col'; },\r\n\r\n  prepare: function(model, options) {\r\n    var styleId = options.styles.addStyleModel(model.style || {});\r\n    if (styleId) {\r\n      model.styleId = styleId;\r\n    }\r\n  },\r\n  \r\n  render: function(xmlStream, model) {\r\n    xmlStream.openNode('col');\r\n    xmlStream.addAttribute('min',  model.min);\r\n    xmlStream.addAttribute('max',  model.max);\r\n    if (model.width) {\r\n      xmlStream.addAttribute('width', model.width);\r\n    }\r\n    if (model.styleId) {\r\n      xmlStream.addAttribute('style',  model.styleId);\r\n    }\r\n    if (model.hidden) {\r\n      xmlStream.addAttribute('hidden',  '1');\r\n    }\r\n    if (model.bestFit) {\r\n      xmlStream.addAttribute('bestFit',  '1');\r\n    }\r\n    if (model.outlineLevel) {\r\n      xmlStream.addAttribute('outlineLevel',  model.outlineLevel);\r\n    }\r\n    if (model.collapsed) {\r\n      xmlStream.addAttribute('collapsed',  '1');\r\n    }\r\n    xmlStream.addAttribute('customWidth',  '1');\r\n    xmlStream.closeNode();\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    if (node.name === 'col') {\r\n      var model = this.model = {\r\n        min: parseInt(node.attributes.min || '0'),\r\n        max: parseInt(node.attributes.max || '0'),\r\n        width: parseFloat(node.attributes.width || '0')\r\n      };\r\n      if (node.attributes.style) {\r\n        model.styleId = parseInt(node.attributes.style);\r\n      }\r\n      if (node.attributes.hidden) {\r\n        model.hidden = true;\r\n      }\r\n      if (node.attributes.bestFit) {\r\n        model.bestFit = true;\r\n      }\r\n      if (node.attributes.outlineLevel) {\r\n        model.outlineLevel = parseInt(node.attributes.outlineLevel);\r\n      }\r\n      if (node.attributes.collapsed) {\r\n        model.collapsed = true;\r\n      }\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  },\r\n  \r\n  reconcile: function(model, options) {\r\n    // reconcile column styles\r\n    if (model.styleId) {\r\n      model.style = options.styles.getStyleModel(model.styleId);\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/dimension-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar DimensionXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(DimensionXform, BaseXform, {\r\n\r\n  get tag() { return 'dimension'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    if (model) {\r\n      xmlStream.leafNode('dimension', {ref: model});\r\n    }\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    if (node.name === 'dimension') {\r\n      this.model = node.attributes.ref;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/hyperlink-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar HyperlinkXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(HyperlinkXform, BaseXform, {\r\n\r\n  get tag() { return 'hyperlink'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.leafNode('hyperlink', {\r\n      ref: model.address,\r\n      'r:id': model.rId\r\n    });\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    if (node.name === 'hyperlink') {\r\n      this.model = {\r\n        address: node.attributes.ref,\r\n        rId:  node.attributes['r:id']\r\n      };\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/merge-cell-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar MergeCellXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(MergeCellXform, BaseXform, {\r\n\r\n  get tag() { return 'mergeCell'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.leafNode('mergeCell', {ref: model});\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    if (node.name === 'mergeCell') {\r\n      this.model = node.attributes.ref;\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/data-validations-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\nvar _ = require('../../../utils/under-dash');\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\n// for dev reference\r\n// var DataValidationTemplate = { // a _ denotes defaults\r\n//   address: 'A1',\r\n//   type: ['list', 'whole', 'decimal', 'date', 'textLength'],\r\n//   operator: ['between', 'notBetween', 'equal', 'notEqual', 'greaterThan', 'lessThan', 'greaterThanOrEqual', 'lessThanOrEqual'],\r\n//   allowBlank: [true, false],\r\n//   showInputMessage: [true, false],\r\n//   showErrorMessage: [true, false],\r\n//   formulae: [['DefinedName', '<value>', '\"list,of,values\"', '$A$1', '$A$1:$B$2','ACTUAL(\"Formula\")']],\r\n//   promptTitle: ['Title'],\r\n//   prompt: ['words'],\r\n//   errorStyle: ['error', 'warning', 'information'],\r\n//   errorTitle: ['Title'],\r\n//   error: ['words']\r\n// };\r\n\r\n\r\nfunction assign(definedName, attributes, name, defaultValue) {\r\n  var value = attributes[name];\r\n  if (value !== undefined) {\r\n    definedName[name] = value;\r\n  } else if (defaultValue !== undefined) {\r\n    definedName[name] = defaultValue;\r\n  }\r\n}\r\nfunction parseBool(value) {\r\n  switch(value) {\r\n    case '1':\r\n    case 'true':\r\n      return true;\r\n    default:\r\n      return false;\r\n  }\r\n}\r\nfunction assignBool(definedName, attributes, name, defaultValue) {\r\n  var value = attributes[name];\r\n  if (value !== undefined) {\r\n    definedName[name] = parseBool(value);\r\n  } else if (defaultValue !== undefined) {\r\n    definedName[name] = defaultValue;\r\n  }\r\n}\r\n\r\nvar DataValidationsXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(DataValidationsXform, BaseXform, {\r\n\r\n  get tag() { return 'dataValidations'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    var count = model && Object.keys(model).length;\r\n    if (count) {\r\n      xmlStream.openNode('dataValidations', {count: count});\r\n\r\n      _.each(model, function (value, address) {\r\n        xmlStream.openNode('dataValidation');\r\n        if (value.type !== 'any') {\r\n          xmlStream.addAttribute('type', value.type);\r\n\r\n          if (value.operator && (value.type !== 'list') && (value.operator !== 'between')) {\r\n            xmlStream.addAttribute('operator', value.operator);\r\n          }\r\n          if (value.allowBlank) {\r\n            xmlStream.addAttribute('allowBlank', '1');\r\n          }\r\n        }\r\n        if (value.showInputMessage) {\r\n          xmlStream.addAttribute('showInputMessage', '1');\r\n        }\r\n        if (value.promptTitle) {\r\n          xmlStream.addAttribute('promptTitle', value.promptTitle);\r\n        }\r\n        if (value.prompt) {\r\n          xmlStream.addAttribute('prompt', value.prompt);\r\n        }\r\n        if (value.showErrorMessage) {\r\n          xmlStream.addAttribute('showErrorMessage', '1');\r\n        }\r\n        if (value.errorStyle) {\r\n          xmlStream.addAttribute('errorStyle', value.errorStyle);\r\n        }\r\n        if (value.errorTitle) {\r\n          xmlStream.addAttribute('errorTitle', value.errorTitle);\r\n        }\r\n        if (value.error) {\r\n          xmlStream.addAttribute('error', value.error);\r\n        }\r\n        xmlStream.addAttribute('sqref', address);\r\n        (value.formulae || []).forEach(function (formula, index) {\r\n          xmlStream.openNode('formula' + (index + 1));\r\n          if (value.type === 'date') {\r\n            xmlStream.writeText(utils.dateToExcel(formula));\r\n          } else {\r\n            xmlStream.writeText(formula);\r\n          }\r\n          xmlStream.closeNode();\r\n        });\r\n        xmlStream.closeNode();\r\n      });\r\n      xmlStream.closeNode();\r\n    }\r\n  },\r\n  parseOpen: function(node) {\r\n    switch(node.name) {\r\n      case 'dataValidations':\r\n        this.model = {};\r\n        return true;\r\n\r\n      case 'dataValidation':\r\n        this._address = node.attributes.sqref;\r\n        var definedName = this._definedName = node.attributes.type ? {\r\n            type: node.attributes.type,\r\n            formulae: []\r\n          } : {\r\n            type: 'any'\r\n          };\r\n\r\n        if (node.attributes.type) {\r\n          assignBool(definedName, node.attributes, 'allowBlank');\r\n        }\r\n        assignBool(definedName, node.attributes, 'showInputMessage');\r\n        assignBool(definedName, node.attributes, 'showErrorMessage');\r\n\r\n        switch (definedName.type) {\r\n          case 'any':\r\n          case 'list':\r\n          case 'custom':\r\n            break;\r\n          default:\r\n            assign(definedName, node.attributes, 'operator', 'between');\r\n            break;\r\n        }\r\n        assign(definedName, node.attributes, 'promptTitle');\r\n        assign(definedName, node.attributes, 'prompt');\r\n        assign(definedName, node.attributes, 'errorStyle');\r\n        assign(definedName, node.attributes, 'errorTitle');\r\n        assign(definedName, node.attributes, 'error');\r\n        return true;\r\n      case 'formula1':\r\n      case 'formula2':\r\n        this._formula = [];\r\n        return true;\r\n      \r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    this._formula.push(text);\r\n  },\r\n  parseClose: function(name) {\r\n    switch(name) {\r\n      case 'dataValidations':\r\n        return false;\r\n      case 'dataValidation':\r\n        if (!this._definedName.formulae || !this._definedName.formulae.length) {\r\n          delete this._definedName.formulae;\r\n          delete this._definedName.operator;\r\n        }\r\n        this.model[this._address] = this._definedName;\r\n        return true;\r\n      case 'formula1':\r\n      case 'formula2':\r\n        var formula = this._formula.join('');\r\n        switch (this._definedName.type) {\r\n          case 'whole':\r\n          case 'textLength':\r\n            formula = parseInt(formula);\r\n            break;\r\n          case 'decimal':\r\n            formula = parseFloat(formula);\r\n            break;\r\n          case 'date':\r\n            formula = utils.excelToDate(parseFloat(formula));\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n        this._definedName.formulae.push(formula);\r\n        return true;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/sheet-properties-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\nvar ColorXform = require('../style/color-xform');\r\nvar PageSetupPropertiesXform = require('./page-setup-properties-xform');\r\n\r\nvar SheetPropertiesXform = module.exports = function() {\r\n  this.map = {\r\n    tabColor: new ColorXform('tabColor'),\r\n    pageSetUpPr: new PageSetupPropertiesXform()\r\n  }\r\n};\r\n\r\nutils.inherits(SheetPropertiesXform, BaseXform, {\r\n\r\n  get tag() { return 'sheetPr'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    if (model) {\r\n      xmlStream.addRollback();\r\n      xmlStream.openNode('sheetPr');\r\n\r\n      var inner = false;\r\n      inner = this.map.tabColor.render(xmlStream, model.tabColor) || inner;\r\n      inner = this.map.pageSetUpPr.render(xmlStream, model.pageSetup) || inner;\r\n\r\n      if (inner) {\r\n        xmlStream.closeNode();\r\n        xmlStream.commit();\r\n      } else {\r\n        xmlStream.rollback();\r\n      }\r\n    }\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    if (this.parser) {\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else if (node.name === this.tag) {\r\n      this.map.tabColor.reset();\r\n      this.map.pageSetUpPr.reset();\r\n      return true;\r\n    } else if (this.map[node.name]) {\r\n      this.parser = this.map[node.name];\r\n      this.parser.parseOpen(node);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function(text) {\r\n    if (this.parser) {\r\n      this.parser.parseText(text);\r\n      return true;\r\n    }\r\n  },\r\n  parseClose: function(name) {\r\n    if (this.parser) {\r\n      if (!this.parser.parseClose(name)) {\r\n        this.parser = undefined;\r\n      }\r\n      return true;\r\n    } else {\r\n      if (this.map.tabColor.model || this.map.pageSetUpPr.model) {\r\n        this.model = {};\r\n        if (this.map.tabColor.model) {\r\n          this.model.tabColor = this.map.tabColor.model;\r\n        }\r\n        if (this.map.pageSetUpPr.model) {\r\n          this.model.pageSetup = this.map.pageSetUpPr.model;\r\n        }\r\n      } else {\r\n        this.model = null;\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/page-setup-properties-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar PageSetupPropertiesXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(PageSetupPropertiesXform, BaseXform, {\r\n\r\n  get tag() { return 'pageSetUpPr'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    if (model && model.fitToPage) {\r\n      xmlStream.leafNode(this.tag, {\r\n        fitToPage: model.fitToPage ? '1' : undefined\r\n      });\r\n      return true;\r\n    }\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    if (node.name === this.tag) {\r\n      this.model = {\r\n        fitToPage: node.attributes.fitToPage === '1'\r\n      };\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/sheet-format-properties-xform.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar _ = require('../../../utils/under-dash');\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar SheetFormatPropertiesXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(SheetFormatPropertiesXform, BaseXform, {\r\n\r\n  get tag() { return 'sheetFormatPr'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    if (model) {\r\n      var attributes = {\r\n        defaultRowHeight: model.defaultRowHeight,\r\n        outlineLevelRow: model.outlineLevelRow,\r\n        outlineLevelCol: model.outlineLevelCol,\r\n        'x14ac:dyDescent': model.dyDescent\r\n      };\r\n      if (_.some(attributes, function(value) { return value !== undefined; })) {\r\n        xmlStream.leafNode('sheetFormatPr', attributes);\r\n      }\r\n    }\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    if (node.name === 'sheetFormatPr') {\r\n      this.model = {\r\n        defaultRowHeight:  parseFloat(node.attributes.defaultRowHeight || 0),\r\n        dyDescent: parseFloat(node.attributes['x14ac:dyDescent'] || 0),\r\n        outlineLevelRow: parseInt(node.attributes.outlineLevelRow || 0),\r\n        outlineLevelCol: parseInt(node.attributes.outlineLevelCol || 0)\r\n      };\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/sheet-view-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../../utils/utils');\r\nvar colCache = require('../../../utils/col-cache');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar VIEW_STATES = {\r\n  frozen: 'frozen',\r\n  frozenSplit: 'frozen',\r\n  split: 'split'\r\n};\r\n\r\nvar SheetViewXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(SheetViewXform, BaseXform, {\r\n  \r\n  get tag() { return 'sheetView'; },\r\n  \r\n  prepare: function(model) {\r\n    switch(model.state) {\r\n      case 'frozen':\r\n      case 'split':\r\n        break;\r\n      default:\r\n        model.state = 'normal';\r\n        break;\r\n    }\r\n  },\r\n\r\n  render: function(xmlStream, model) {\r\n    xmlStream.openNode('sheetView', {\r\n      workbookViewId: model.workbookViewId || 0\r\n    });\r\n    var add = function(name, value, included) {\r\n      if (included) {\r\n        xmlStream.addAttribute(name, value);\r\n      }\r\n    };\r\n    add('tabSelected', '1', model.tabSelected);\r\n    add('showRuler', '0', model.showRuler === false);\r\n    add('showRowColHeaders', '0', model.showRowColHeaders === false);\r\n    add('showGridLines', '0', model.showGridLines === false);\r\n    add('zoomScale', model.zoomScale, model.zoomScale);\r\n    add('zoomScaleNormal', model.zoomScaleNormal, model.zoomScaleNormal);\r\n    add('view', model.style, model.style);\r\n    \r\n    var topLeftCell, xSplit, ySplit, activePane;\r\n    switch(model.state) {\r\n      case 'frozen':\r\n        //  <sheetView tabSelected=\"1\" workbookViewId=\"0\">\r\n        //   <pane xSplit=\"2\" ySplit=\"2\" topLeftCell=\"C3\" activePane=\"bottomRight\" state=\"frozen\"/>\r\n        //   <selection pane=\"bottomRight\" activeCell=\"C3\" sqref=\"C3\"/>\r\n        //  </sheetView>\r\n        xSplit = model.xSplit || 0;\r\n        ySplit = model.ySplit || 0;\r\n        topLeftCell = model.topLeftCell || colCache.getAddress(ySplit + 1, xSplit + 1).address;\r\n        activePane = (model.xSplit && model.ySplit) ? 'bottomRight' : (model.xSplit ? 'topRight' : 'bottomLeft');\r\n        xmlStream.leafNode('pane', {\r\n          xSplit: model.xSplit || undefined,\r\n          ySplit: model.ySplit || undefined,\r\n          topLeftCell: topLeftCell,\r\n          activePane: activePane,\r\n          state: 'frozen'\r\n        });\r\n        xmlStream.leafNode('selection', {\r\n          pane: activePane,\r\n          activeCell: model.activeCell,\r\n          sqref: model.activeCell\r\n        });\r\n        break;\r\n      case 'split':\r\n        //  <sheetView tabSelected=\"1\" workbookViewId=\"1\">\r\n        //   <pane xSplit=\"3432\" ySplit=\"1152\" topLeftCell=\"D4\" activePane=\"bottomRight\"/>\r\n        //   <selection pane=\"bottomRight\" activeCell=\"D4\" sqref=\"D4\"/>\r\n        //  </sheetView>\r\n        if (model.activePane === 'topLeft') {\r\n          model.activePane = undefined;\r\n        }\r\n        xmlStream.leafNode('pane', {\r\n          xSplit: model.xSplit || undefined,\r\n          ySplit:  model.ySplit || undefined,\r\n          topLeftCell: model.topLeftCell,\r\n          activePane: model.activePane\r\n        });\r\n        xmlStream.leafNode('selection', {\r\n          pane: model.activePane,\r\n          activeCell: model.activeCell,\r\n          sqref: model.activeCell\r\n        });\r\n        break;\r\n      case 'normal':\r\n        if (model.activeCell) {\r\n          xmlStream.leafNode('selection', {\r\n            activeCell: model.activeCell,\r\n            sqref: model.activeCell\r\n          });\r\n        }\r\n        break;\r\n    }\r\n    xmlStream.closeNode();\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    switch(node.name) {\r\n      case 'sheetView':\r\n        this.sheetView = {\r\n          workbookViewId: parseInt(node.attributes.workbookViewId),\r\n          tabSelected: node.attributes.tabSelected === '1',\r\n          showRuler: !(node.attributes.showRuler === '0'),\r\n          showRowColHeaders: !(node.attributes.showRowColHeaders === '0'),\r\n          showGridLines: !(node.attributes.showGridLines === '0'),\r\n          zoomScale: parseInt(node.attributes.zoomScale || 100),\r\n          zoomScaleNormal: parseInt(node.attributes.zoomScaleNormal || 100),\r\n          style: node.attributes.view\r\n        };\r\n        this.pane = undefined;\r\n        this.selections = {};\r\n        return true;\r\n      case 'pane':\r\n        this.pane = {\r\n          xSplit: parseInt(node.attributes.xSplit || 0),\r\n          ySplit: parseInt(node.attributes.ySplit || 0),\r\n          topLeftCell: node.attributes.topLeftCell,\r\n          activePane:  node.attributes.activePane || 'topLeft',\r\n          state: node.attributes.state\r\n        };\r\n        return true;\r\n      case 'selection':\r\n        var name = node.attributes.pane || 'topLeft';\r\n        this.selections[name] = {\r\n          pane: name,\r\n          activeCell: node.attributes.activeCell\r\n        };\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function(name) {\r\n    var model, selection;\r\n    switch(name) {\r\n      case 'sheetView':\r\n        if (this.sheetView && this.pane) {\r\n          model = this.model = {\r\n            workbookViewId: this.sheetView.workbookViewId,\r\n            state: VIEW_STATES[this.pane.state] || 'split', // split is default\r\n            xSplit: this.pane.xSplit,\r\n            ySplit: this.pane.ySplit,\r\n            topLeftCell: this.pane.topLeftCell,\r\n            showRuler: this.sheetView.showRuler,\r\n            showRowColHeaders: this.sheetView.showRowColHeaders,\r\n            showGridLines: this.sheetView.showGridLines,\r\n            zoomScale: this.sheetView.zoomScale,\r\n            zoomScaleNormal: this.sheetView.zoomScaleNormal\r\n          };\r\n          if (this.model.state === 'split') {\r\n            model.activePane = this.pane.activePane;\r\n          }\r\n          selection = this.selections[this.pane.activePane];\r\n          if (selection && selection.activeCell) {\r\n            model.activeCell = selection.activeCell;\r\n          }\r\n          if (this.sheetView.style) {\r\n            model.style = this.sheetView.style;\r\n          }\r\n        } else {\r\n          model = this.model = {\r\n            workbookViewId: this.sheetView.workbookViewId,\r\n            state: 'normal',\r\n            showRuler: this.sheetView.showRuler,\r\n            showRowColHeaders: this.sheetView.showRowColHeaders,\r\n            showGridLines: this.sheetView.showGridLines,\r\n            zoomScale: this.sheetView.zoomScale,\r\n            zoomScaleNormal: this.sheetView.zoomScaleNormal\r\n          };\r\n          selection = this.selections.topLeft;\r\n          if (selection && selection.activeCell) {\r\n            model.activeCell = selection.activeCell;\r\n          }\r\n          if (this.sheetView.style) {\r\n            model.style = this.sheetView.style;\r\n          }\r\n        }\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  },\r\n  \r\n  reconcile: function(model, options) {\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/page-margins-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\nvar _ = require('../../../utils/under-dash');\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nvar PageMarginsXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(PageMarginsXform, BaseXform, {\r\n\r\n  get tag() { return 'pageMargins'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    if (model) {\r\n      var attributes = {\r\n        left: model.left,\r\n        right: model.right,\r\n        top: model.top,\r\n        bottom: model.bottom,\r\n        header: model.header,\r\n        footer: model.footer\r\n      };\r\n      if (_.some(attributes, function(value) { return value !== undefined})) {\r\n        xmlStream.leafNode(this.tag, attributes);\r\n      }\r\n    }\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    switch(node.name) {\r\n      case this.tag:\r\n        this.model = {\r\n          left: parseFloat(node.attributes.left || 0.7),\r\n          right: parseFloat(node.attributes.right || 0.7),\r\n          top: parseFloat(node.attributes.top || 0.75),\r\n          bottom: parseFloat(node.attributes.bottom || 0.75),\r\n          header: parseFloat(node.attributes.header || 0.3),\r\n          footer: parseFloat(node.attributes.footer || 0.3)\r\n        };\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/page-setup-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar _ = require('../../../utils/under-dash');\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nfunction booleanToXml(model) {\r\n  return model ? '1' : undefined;\r\n}\r\nfunction pageOrderToXml(model) {\r\n  switch(model) {\r\n    case 'overThenDown': \r\n      return model;\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\nfunction cellCommentsToXml(model) {\r\n  switch(model) {\r\n    case 'atEnd': \r\n    case 'asDisplyed': \r\n      return model;\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\nfunction errorsToXml(model) {\r\n  switch(model) {\r\n    case 'dash': \r\n    case 'blank': \r\n    case 'NA': \r\n      return model;\r\n    default:\r\n      return undefined;\r\n  }\r\n}\r\nfunction pageSizeToModel(value) {\r\n  return value !== undefined ? parseInt(value) : undefined;\r\n}\r\n\r\nvar PageSetupXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(PageSetupXform, BaseXform, {\r\n\r\n  get tag() { return 'pageSetup'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    if (model) {\r\n      var attributes = {\r\n        paperSize: model.paperSize,\r\n        orientation: model.orientation,\r\n        horizontalDpi: model.horizontalDpi,\r\n        verticalDpi: model.verticalDpi,\r\n        pageOrder: pageOrderToXml(model.pageOrder),\r\n        blackAndWhite: booleanToXml(model.blackAndWhite),\r\n        draft: booleanToXml(model.draft),\r\n        cellComments: cellCommentsToXml(model.cellComments),\r\n        errors: errorsToXml(model.errors),\r\n        scale: model.scale,\r\n        fitToWidth: model.fitToWidth,\r\n        fitToHeight: model.fitToHeight,\r\n        firstPageNumber: model.firstPageNumber,\r\n        useFirstPageNumber: booleanToXml(model.firstPageNumber),\r\n        usePrinterDefaults: booleanToXml(model.usePrinterDefaults),\r\n        copies: model.copies\r\n      };\r\n      if (_.some(attributes, function (value) {\r\n          return value !== undefined;\r\n        })) {\r\n        xmlStream.leafNode(this.tag, attributes);\r\n      }\r\n    }\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    switch(node.name) {\r\n      case this.tag: \r\n        this.model = {\r\n          paperSize: pageSizeToModel(node.attributes.paperSize),\r\n          orientation: node.attributes.orientation || 'portrait',\r\n          horizontalDpi: parseInt(node.attributes.horizontalDpi || 4294967295),\r\n          verticalDpi: parseInt(node.attributes.verticalDpi || 4294967295),\r\n          pageOrder: node.attributes.pageOrder || 'downThenOver',\r\n          blackAndWhite: node.attributes.blackAndWhite === '1',\r\n          draft: node.attributes.draft === '1',\r\n          cellComments: node.attributes.cellComments || 'None',\r\n          errors: node.attributes.errors || 'displayed',\r\n          scale: parseInt(node.attributes.scale || 100),\r\n          fitToWidth: parseInt(node.attributes.fitToWidth || 1),\r\n          fitToHeight: parseInt(node.attributes.fitToHeight || 1),\r\n          firstPageNumber: parseInt(node.attributes.firstPageNumber || 1),\r\n          useFirstPageNumber: node.attributes.useFirstPageNumber === '1',\r\n          usePrinterDefaults: node.attributes.usePrinterDefaults === '1',\r\n          copies: parseInt(node.attributes.copies || 1)\r\n        };\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xform/sheet/print-options-xform.js":"/**\r\n * Copyright (c) 2016 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar _ = require('../../../utils/under-dash');\r\nvar utils = require('../../../utils/utils');\r\nvar BaseXform = require('../base-xform');\r\n\r\nfunction booleanToXml(model) {\r\n  return model ? '1' : undefined;\r\n}\r\n\r\nvar PrintOptionsXform = module.exports = function() {\r\n};\r\n\r\nutils.inherits(PrintOptionsXform, BaseXform, {\r\n\r\n  get tag() { return 'printOptions'; },\r\n\r\n  render: function(xmlStream, model) {\r\n    if (model) {\r\n      var attributes = {\r\n        headings: booleanToXml(model.showRowColHeaders),\r\n        gridLines: booleanToXml(model.showGridLines),\r\n        horizontalCentered: booleanToXml(model.horizontalCentered),\r\n        verticalCentered: booleanToXml(model.verticalCentered)\r\n      };\r\n      if (_.some(attributes, function (value) {\r\n          return value !== undefined;\r\n        })) {\r\n        xmlStream.leafNode(this.tag, attributes);\r\n      }\r\n    }\r\n  },\r\n  \r\n  parseOpen: function(node) {\r\n    switch(node.name) {\r\n      case this.tag: \r\n        this.model = {\r\n          showRowColHeaders: node.attributes.headings === '1',\r\n          showGridLines: node.attributes.gridLines === '1',\r\n          horizontalCentered: node.attributes.horizontalCentered === '1',\r\n          verticalCentered: node.attributes.verticalCentered === '1'\r\n        };\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  },\r\n  parseText: function() {\r\n  },\r\n  parseClose: function() {\r\n    return false;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/xlsx/xml/theme1.xml.js":"module.exports = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\\n<a:theme xmlns:a=\"http://schemas.openxmlformats.org/drawingml/2006/main\" name=\"Office Theme\"> <a:themeElements> <a:clrScheme name=\"Office\"> <a:dk1> <a:sysClr val=\"windowText\" lastClr=\"000000\"/> </a:dk1> <a:lt1> <a:sysClr val=\"window\" lastClr=\"FFFFFF\"/> </a:lt1> <a:dk2> <a:srgbClr val=\"1F497D\"/> </a:dk2> <a:lt2> <a:srgbClr val=\"EEECE1\"/> </a:lt2> <a:accent1> <a:srgbClr val=\"4F81BD\"/> </a:accent1> <a:accent2> <a:srgbClr val=\"C0504D\"/> </a:accent2> <a:accent3> <a:srgbClr val=\"9BBB59\"/> </a:accent3> <a:accent4> <a:srgbClr val=\"8064A2\"/> </a:accent4> <a:accent5> <a:srgbClr val=\"4BACC6\"/> </a:accent5> <a:accent6> <a:srgbClr val=\"F79646\"/> </a:accent6> <a:hlink> <a:srgbClr val=\"0000FF\"/> </a:hlink> <a:folHlink> <a:srgbClr val=\"800080\"/> </a:folHlink> </a:clrScheme> <a:fontScheme name=\"Office\"> <a:majorFont> <a:latin typeface=\"Cambria\"/> <a:ea typeface=\"\"/> <a:cs typeface=\"\"/> <a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/> <a:font script=\"Hang\" typeface=\"맑은 고딕\"/> <a:font script=\"Hans\" typeface=\"宋体\"/> <a:font script=\"Hant\" typeface=\"新細明體\"/> <a:font script=\"Arab\" typeface=\"Times New Roman\"/> <a:font script=\"Hebr\" typeface=\"Times New Roman\"/> <a:font script=\"Thai\" typeface=\"Tahoma\"/> <a:font script=\"Ethi\" typeface=\"Nyala\"/> <a:font script=\"Beng\" typeface=\"Vrinda\"/> <a:font script=\"Gujr\" typeface=\"Shruti\"/> <a:font script=\"Khmr\" typeface=\"MoolBoran\"/> <a:font script=\"Knda\" typeface=\"Tunga\"/> <a:font script=\"Guru\" typeface=\"Raavi\"/> <a:font script=\"Cans\" typeface=\"Euphemia\"/> <a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/> <a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/> <a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/> <a:font script=\"Thaa\" typeface=\"MV Boli\"/> <a:font script=\"Deva\" typeface=\"Mangal\"/> <a:font script=\"Telu\" typeface=\"Gautami\"/> <a:font script=\"Taml\" typeface=\"Latha\"/> <a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/> <a:font script=\"Orya\" typeface=\"Kalinga\"/> <a:font script=\"Mlym\" typeface=\"Kartika\"/> <a:font script=\"Laoo\" typeface=\"DokChampa\"/> <a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/> <a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/> <a:font script=\"Viet\" typeface=\"Times New Roman\"/> <a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/> <a:font script=\"Geor\" typeface=\"Sylfaen\"/> </a:majorFont> <a:minorFont> <a:latin typeface=\"Calibri\"/> <a:ea typeface=\"\"/> <a:cs typeface=\"\"/> <a:font script=\"Jpan\" typeface=\"ＭＳ Ｐゴシック\"/> <a:font script=\"Hang\" typeface=\"맑은 고딕\"/> <a:font script=\"Hans\" typeface=\"宋体\"/> <a:font script=\"Hant\" typeface=\"新細明體\"/> <a:font script=\"Arab\" typeface=\"Arial\"/> <a:font script=\"Hebr\" typeface=\"Arial\"/> <a:font script=\"Thai\" typeface=\"Tahoma\"/> <a:font script=\"Ethi\" typeface=\"Nyala\"/> <a:font script=\"Beng\" typeface=\"Vrinda\"/> <a:font script=\"Gujr\" typeface=\"Shruti\"/> <a:font script=\"Khmr\" typeface=\"DaunPenh\"/> <a:font script=\"Knda\" typeface=\"Tunga\"/> <a:font script=\"Guru\" typeface=\"Raavi\"/> <a:font script=\"Cans\" typeface=\"Euphemia\"/> <a:font script=\"Cher\" typeface=\"Plantagenet Cherokee\"/> <a:font script=\"Yiii\" typeface=\"Microsoft Yi Baiti\"/> <a:font script=\"Tibt\" typeface=\"Microsoft Himalaya\"/> <a:font script=\"Thaa\" typeface=\"MV Boli\"/> <a:font script=\"Deva\" typeface=\"Mangal\"/> <a:font script=\"Telu\" typeface=\"Gautami\"/> <a:font script=\"Taml\" typeface=\"Latha\"/> <a:font script=\"Syrc\" typeface=\"Estrangelo Edessa\"/> <a:font script=\"Orya\" typeface=\"Kalinga\"/> <a:font script=\"Mlym\" typeface=\"Kartika\"/> <a:font script=\"Laoo\" typeface=\"DokChampa\"/> <a:font script=\"Sinh\" typeface=\"Iskoola Pota\"/> <a:font script=\"Mong\" typeface=\"Mongolian Baiti\"/> <a:font script=\"Viet\" typeface=\"Arial\"/> <a:font script=\"Uigh\" typeface=\"Microsoft Uighur\"/> <a:font script=\"Geor\" typeface=\"Sylfaen\"/> </a:minorFont> </a:fontScheme> <a:fmtScheme name=\"Office\"> <a:fillStyleLst> <a:solidFill> <a:schemeClr val=\"phClr\"/> </a:solidFill> <a:gradFill rotWithShape=\"1\"> <a:gsLst> <a:gs pos=\"0\"> <a:schemeClr val=\"phClr\"> <a:tint val=\"50000\"/> <a:satMod val=\"300000\"/> </a:schemeClr> </a:gs> <a:gs pos=\"35000\"> <a:schemeClr val=\"phClr\"> <a:tint val=\"37000\"/> <a:satMod val=\"300000\"/> </a:schemeClr> </a:gs> <a:gs pos=\"100000\"> <a:schemeClr val=\"phClr\"> <a:tint val=\"15000\"/> <a:satMod val=\"350000\"/> </a:schemeClr> </a:gs> </a:gsLst> <a:lin ang=\"16200000\" scaled=\"1\"/> </a:gradFill> <a:gradFill rotWithShape=\"1\"> <a:gsLst> <a:gs pos=\"0\"> <a:schemeClr val=\"phClr\"> <a:tint val=\"100000\"/> <a:shade val=\"100000\"/> <a:satMod val=\"130000\"/> </a:schemeClr> </a:gs> <a:gs pos=\"100000\"> <a:schemeClr val=\"phClr\"> <a:tint val=\"50000\"/> <a:shade val=\"100000\"/> <a:satMod val=\"350000\"/> </a:schemeClr> </a:gs> </a:gsLst> <a:lin ang=\"16200000\" scaled=\"0\"/> </a:gradFill> </a:fillStyleLst> <a:lnStyleLst> <a:ln w=\"9525\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"> <a:solidFill> <a:schemeClr val=\"phClr\"> <a:shade val=\"95000\"/> <a:satMod val=\"105000\"/> </a:schemeClr> </a:solidFill> <a:prstDash val=\"solid\"/> </a:ln> <a:ln w=\"25400\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"> <a:solidFill> <a:schemeClr val=\"phClr\"/> </a:solidFill> <a:prstDash val=\"solid\"/> </a:ln> <a:ln w=\"38100\" cap=\"flat\" cmpd=\"sng\" algn=\"ctr\"> <a:solidFill> <a:schemeClr val=\"phClr\"/> </a:solidFill> <a:prstDash val=\"solid\"/> </a:ln> </a:lnStyleLst> <a:effectStyleLst> <a:effectStyle> <a:effectLst> <a:outerShdw blurRad=\"40000\" dist=\"20000\" dir=\"5400000\" rotWithShape=\"0\"> <a:srgbClr val=\"000000\"> <a:alpha val=\"38000\"/> </a:srgbClr> </a:outerShdw> </a:effectLst> </a:effectStyle> <a:effectStyle> <a:effectLst> <a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"> <a:srgbClr val=\"000000\"> <a:alpha val=\"35000\"/> </a:srgbClr> </a:outerShdw> </a:effectLst> </a:effectStyle> <a:effectStyle> <a:effectLst> <a:outerShdw blurRad=\"40000\" dist=\"23000\" dir=\"5400000\" rotWithShape=\"0\"> <a:srgbClr val=\"000000\"> <a:alpha val=\"35000\"/> </a:srgbClr> </a:outerShdw> </a:effectLst> <a:scene3d> <a:camera prst=\"orthographicFront\"> <a:rot lat=\"0\" lon=\"0\" rev=\"0\"/> </a:camera> <a:lightRig rig=\"threePt\" dir=\"t\"> <a:rot lat=\"0\" lon=\"0\" rev=\"1200000\"/> </a:lightRig> </a:scene3d> <a:sp3d> <a:bevelT w=\"63500\" h=\"25400\"/> </a:sp3d> </a:effectStyle> </a:effectStyleLst> <a:bgFillStyleLst> <a:solidFill> <a:schemeClr val=\"phClr\"/> </a:solidFill> <a:gradFill rotWithShape=\"1\"> <a:gsLst> <a:gs pos=\"0\"> <a:schemeClr val=\"phClr\"> <a:tint val=\"40000\"/> <a:satMod val=\"350000\"/> </a:schemeClr> </a:gs> <a:gs pos=\"40000\"> <a:schemeClr val=\"phClr\"> <a:tint val=\"45000\"/> <a:shade val=\"99000\"/> <a:satMod val=\"350000\"/> </a:schemeClr> </a:gs> <a:gs pos=\"100000\"> <a:schemeClr val=\"phClr\"> <a:shade val=\"20000\"/> <a:satMod val=\"255000\"/> </a:schemeClr> </a:gs> </a:gsLst> <a:path path=\"circle\"> <a:fillToRect l=\"50000\" t=\"-80000\" r=\"50000\" b=\"180000\"/> </a:path> </a:gradFill> <a:gradFill rotWithShape=\"1\"> <a:gsLst> <a:gs pos=\"0\"> <a:schemeClr val=\"phClr\"> <a:tint val=\"80000\"/> <a:satMod val=\"300000\"/> </a:schemeClr> </a:gs> <a:gs pos=\"100000\"> <a:schemeClr val=\"phClr\"> <a:shade val=\"30000\"/> <a:satMod val=\"200000\"/> </a:schemeClr> </a:gs> </a:gsLst> <a:path path=\"circle\"> <a:fillToRect l=\"50000\" t=\"50000\" r=\"50000\" b=\"50000\"/> </a:path> </a:gradFill> </a:bgFillStyleLst> </a:fmtScheme> </a:themeElements> <a:objectDefaults> <a:spDef> <a:spPr/> <a:bodyPr/> <a:lstStyle/> <a:style> <a:lnRef idx=\"1\"> <a:schemeClr val=\"accent1\"/> </a:lnRef> <a:fillRef idx=\"3\"> <a:schemeClr val=\"accent1\"/> </a:fillRef> <a:effectRef idx=\"2\"> <a:schemeClr val=\"accent1\"/> </a:effectRef> <a:fontRef idx=\"minor\"> <a:schemeClr val=\"lt1\"/> </a:fontRef> </a:style> </a:spDef> <a:lnDef> <a:spPr/> <a:bodyPr/> <a:lstStyle/> <a:style> <a:lnRef idx=\"2\"> <a:schemeClr val=\"accent1\"/> </a:lnRef> <a:fillRef idx=\"0\"> <a:schemeClr val=\"accent1\"/> </a:fillRef> <a:effectRef idx=\"1\"> <a:schemeClr val=\"accent1\"/> </a:effectRef> <a:fontRef idx=\"minor\"> <a:schemeClr val=\"tx1\"/> </a:fontRef> </a:style> </a:lnDef> </a:objectDefaults> <a:extraClrSchemeLst/> </a:theme>';","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/csv/csv.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\n\r\nvar fs = require('fs');\r\nvar csv = require('fast-csv');\r\nvar moment = require('moment');\r\nvar PromishLib = require('../utils/promish');\r\n\r\nvar utils = require('../utils/utils');\r\n\r\nvar CSV = module.exports = function(workbook) {\r\n  this.workbook = workbook;\r\n  this.worksheet = null;\r\n};\r\n\r\nvar SpecialValues = {\r\n  'true': true,\r\n  'false': false,\r\n  '#N/A': { error: '#N/A' },\r\n  '#REF!': { error: '#REF!' },\r\n  '#NAME?': { error: '#NAME?' },\r\n  '#DIV/0!': { error: '#DIV/0!' },\r\n  '#NULL!': { error: '#NULL!' },\r\n  '#VALUE!': { error: '#VALUE!' },\r\n  '#NUM!': { error: '#NUM!' },\r\n};\r\n\r\n\r\nCSV.prototype = {\r\n  readFile: function(filename, options) {\r\n    var self = this;\r\n    options = options || {};\r\n    var stream;\r\n    return utils.fs.exists(filename)\r\n      .then(function(exists) {\r\n        if (!exists) {\r\n          throw new Error('File not found: ' + filename);\r\n        }\r\n        stream = fs.createReadStream(filename);\r\n        return self.read(stream, options);\r\n      })\r\n      .then(function(worksheet) {\r\n        stream.close();\r\n        return worksheet;\r\n      });\r\n  },\r\n  read: function(stream, options) {\r\n    options = options || {};\r\n    var self = this;\r\n    return new PromishLib.Promish(function(resolve, reject) {\r\n\r\n      var csvStream = self.createInputStream(options)\r\n        .on('worksheet', function(worksheet) {\r\n          resolve(worksheet);\r\n        })\r\n        .on('error', function(error) {\r\n          reject(error);\r\n        });\r\n\r\n      stream.pipe(csvStream);\r\n\r\n    });\r\n\r\n  },\r\n  createInputStream: function(options) {\r\n    options = options || {};\r\n    var worksheet = this.workbook.addWorksheet(options.sheetName);\r\n\r\n    var dateFormats = options.dateFormats || [\r\n        moment.ISO_8601,\r\n        'MM-DD-YYYY',\r\n        'YYYY-MM-DD'\r\n      ];\r\n    var map = options.map || function(datum) {\r\n        if (datum == '') {\r\n          return null;\r\n        }\r\n        if (!isNaN(datum)) {\r\n          return parseFloat(datum);\r\n        }\r\n        var dt = moment(datum, dateFormats, true);\r\n        if (dt.isValid()) {\r\n          return new Date(dt.valueOf());\r\n        }\r\n        var special =  SpecialValues[datum];\r\n        if (special !== undefined) {\r\n          return special;\r\n        }\r\n        return datum;\r\n      };\r\n\r\n    var csvStream = csv(options)\r\n      .on('data', function(data){\r\n        worksheet.addRow(data.map(map));\r\n      })\r\n      .on('end', function() {\r\n        csvStream.emit('worksheet', worksheet);\r\n      });\r\n    return csvStream;\r\n  },\r\n\r\n  write: function(stream, options) {\r\n\r\n    var self = this;\r\n\r\n    return new PromishLib.Promish(function(resolve, reject) {\r\n      options = options || {};\r\n      //var encoding = options.encoding || 'utf8';\r\n      //var separator = options.separator || ',';\r\n      //var quoteChar = options.quoteChar || '\\'';\r\n\r\n      var worksheet = self.workbook.getWorksheet(options.sheetName || options.sheetId);\r\n\r\n      var csvStream = csv.createWriteStream(options);\r\n      stream.on('finish', function() {\r\n        resolve();\r\n      });\r\n      csvStream.on('error', function(error) {\r\n        reject(error);\r\n      });\r\n      csvStream.pipe(stream);\r\n\r\n      var dateFormat = options.dateFormat;\r\n      var map = options.map || function(value) {\r\n          if (value) {\r\n            if (value.text || value.hyperlink) {\r\n              return value.hyperlink || value.text || '';\r\n            }\r\n            if (value.formula || value.result) {\r\n              return value.result || '';\r\n            }\r\n            if (value instanceof Date) {\r\n              return dateFormat ? moment(value).format(dateFormat) : moment(value).format();\r\n            }\r\n            if (value.error) {\r\n              return value.error;\r\n            }\r\n            if (typeof value === 'object') {\r\n              return JSON.stringify(value);\r\n            }\r\n          }\r\n          return value;\r\n        };\r\n\r\n      var includeEmptyRows = (options.includeEmptyRows === undefined) || options.includeEmptyRows;\r\n      var lastRow = 1;\r\n      if (worksheet) {\r\n        worksheet.eachRow(function (row, rowNumber) {\r\n          if (includeEmptyRows) {\r\n            while (lastRow++ < rowNumber - 1) {\r\n              csvStream.write([]);\r\n            }\r\n          }\r\n          var values = row.values;\r\n          values.shift();\r\n          csvStream.write(values.map(map));\r\n          lastRow = rowNumber;\r\n        });\r\n      }\r\n      csvStream.end();\r\n    });\r\n\r\n  },\r\n  writeFile: function(filename, options) {\r\n    options = options || {};\r\n\r\n    var streamOptions = {\r\n      encoding: options.encoding || 'utf8'\r\n    };\r\n    var stream = fs.createWriteStream(filename, options);\r\n\r\n    return this.write(stream, options);\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/doc/modelcontainer.js":"/**\r\n * Copyright (c) 2014 Guyon Roche\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n * \r\n */\r\n'use strict';\r\n\r\nvar XLSX = require('./../xlsx/xlsx');\r\n\r\nvar ModelContainer = module.exports = function(model) {\r\n  this.model = model;\r\n};\r\n\r\n\r\nModelContainer.prototype = {\r\n  get xlsx() {\r\n    return this._xlsx || (this._xlsx = new XLSX(this));\r\n  }\r\n};","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/stream/xlsx/workbook-writer.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar fs = require('fs');\r\nvar Archiver = require('archiver');\r\nvar PromishLib = require('../../utils/promish');\r\n\r\nvar utils = require('../../utils/utils');\r\nvar StreamBuf = require('../../utils/stream-buf');\r\n\r\nvar RelType = require('../../xlsx/rel-type');\r\nvar StylesXform = require('../../xlsx/xform/style/styles-xform');\r\nvar SharedStrings = require('../../utils/shared-strings');\r\nvar DefinedNames = require('../../doc/defined-names');\r\n\r\nvar CoreXform = require('../../xlsx/xform/core/core-xform');\r\nvar RelationshipsXform = require('../../xlsx/xform/core/relationships-xform');\r\nvar ContentTypesXform = require('../../xlsx/xform/core/content-types-xform');\r\nvar AppXform = require('../../xlsx/xform/core/app-xform');\r\nvar WorkbookXform = require('../../xlsx/xform/book/workbook-xform');\r\nvar SharedStringsXform = require('../../xlsx/xform/strings/shared-strings-xform');\r\n\r\nvar WorksheetWriter = require('./worksheet-writer');\r\n\r\nvar theme1Xml = require('../../xlsx/xml/theme1.xml.js');\r\n\r\nvar WorkbookWriter = module.exports = function(options) {\r\n  options = options || {};\r\n  //console.log(JSON.stringify(options, null, '    '))\r\n\r\n  this.created = options.created || new Date();\r\n  this.modified = options.modified || this.created;\r\n  this.creator = options.creator || 'ExcelJS';\r\n  this.lastModifiedBy = options.lastModifiedBy || 'ExcelJS';\r\n  this.lastPrinted = options.lastPrinted;\r\n\r\n  // using shared strings creates a smaller xlsx file but may use more memory\r\n  this.useSharedStrings = options.useSharedStrings || false;\r\n  this.sharedStrings = new SharedStrings();\r\n\r\n  // style manager\r\n  this.styles = options.useStyles ? new StylesXform(true) : new StylesXform.Mock(true);\r\n\r\n  // defined names\r\n  this._definedNames = new DefinedNames();\r\n\r\n  this._worksheets = [];\r\n  this.views = [];\r\n\r\n  this.zip = Archiver('zip');\r\n  if (options.stream) {\r\n    this.stream = options.stream;\r\n  } else if (options.filename) {\r\n    this.stream = fs.createWriteStream(options.filename);\r\n  } else {\r\n    this.stream = new StreamBuf();\r\n  }\r\n  this.zip.pipe(this.stream);\r\n\r\n  // these bits can be added right now\r\n  this.promise = PromishLib.Promish.all([\r\n    this.addThemes(),\r\n    this.addOfficeRels()\r\n  ]);\r\n\r\n};\r\nWorkbookWriter.prototype = {\r\n  get definedNames() {\r\n    return this._definedNames;\r\n  },\r\n\r\n  _openStream: function(path) {\r\n    var self = this;\r\n    var stream = new StreamBuf({bufSize: 65536, batch: true});\r\n    self.zip.append(stream, { name: path });\r\n    stream.on('finish', function() {\r\n      stream.emit('zipped');\r\n    });\r\n    return stream;\r\n  },\r\n  _commitWorksheets: function() {\r\n    var commitWorksheet = function(worksheet) {\r\n      if (!worksheet.committed) {\r\n        return new PromishLib.Promish(function(resolve) {\r\n          worksheet.stream.on('zipped', function() {\r\n            resolve();\r\n          });\r\n          worksheet.commit();\r\n        });\r\n      } else {\r\n        return PromishLib.Promish.resolve();\r\n      }\r\n    };\r\n    // if there are any uncommitted worksheets, commit them now and wait\r\n    var promises = this._worksheets.map(commitWorksheet);\r\n    if (promises.length) {\r\n      return PromishLib.Promish.all(promises);\r\n    } else {\r\n      return PromishLib.Promish.resolve();\r\n    }\r\n  },\r\n  commit: function() {\r\n    var self = this;\r\n\r\n    // commit all worksheets, then add suplimentary files\r\n    return this.promise.then(function() {\r\n        return self._commitWorksheets();\r\n      })\r\n      .then(function() {\r\n        return PromishLib.Promish.all([\r\n          self.addContentTypes(),\r\n          self.addApp(),\r\n          self.addCore(),\r\n          self.addSharedStrings(),\r\n          self.addStyles(),\r\n          self.addWorkbookRels()\r\n        ]);\r\n      })\r\n      .then(function() {\r\n        return self.addWorkbook();\r\n      })\r\n      .then(function(){\r\n        return self._finalize();\r\n      });\r\n  },\r\n  get nextId() {\r\n    // find the next unique spot to add worksheet\r\n    var i;\r\n    for (i = 1; i < this._worksheets.length; i++) {\r\n      if (!this._worksheets[i]) {\r\n        return i;\r\n      }\r\n    }\r\n    return this._worksheets.length || 1;\r\n  },\r\n  addWorksheet: function(name, options) {\r\n    // it's possible to add a worksheet with different than default\r\n    // shared string handling\r\n    // in fact, it's even possible to switch it mid-sheet\r\n    options = options || {};\r\n    var useSharedStrings = options.useSharedStrings !== undefined ?\r\n      options.useSharedStrings :\r\n      this.useSharedStrings;\r\n\r\n    if (options.tabColor) {\r\n      console.trace('tabColor option has moved to { properties: tabColor: {...} }');\r\n      options.properties  = Object.assign({\r\n        tabColor: options.tabColor\r\n      }, options.properties);\r\n    }\r\n\r\n    var id = this.nextId;\r\n    name = name || 'sheet' + id;\r\n\r\n    var worksheet = new WorksheetWriter({\r\n      id: id,\r\n      name: name,\r\n      workbook: this,\r\n      useSharedStrings: useSharedStrings,\r\n      properties: options.properties,\r\n      pageSetup: options.pageSetup,\r\n      views: options.views\r\n    });\r\n\r\n    this._worksheets[id] = worksheet;\r\n    return worksheet;\r\n  },\r\n  getWorksheet: function(id) {\r\n    if (id === undefined) {\r\n      return this._worksheets.find(function() { return true; });\r\n    } else if (typeof(id) === 'number') {\r\n      return this._worksheets[id];\r\n    } else if (typeof id === 'string') {\r\n      return this._worksheets.find(function(worksheet) {\r\n        return worksheet && worksheet.name == id;\r\n      });\r\n    } else {\r\n      return undefined;\r\n    }\r\n  },\r\n  addStyles: function() {\r\n    var self = this;\r\n    return new PromishLib.Promish(function(resolve) {\r\n      self.zip.append(self.styles.xml, {name: 'xl/styles.xml'});\r\n      resolve();\r\n    });\r\n  },\r\n  addThemes: function() {\r\n    var self = this;\r\n    return new PromishLib.Promish(function(resolve) {\r\n      self.zip.append(theme1Xml, { name: 'xl/theme/theme1.xml' });\r\n      resolve();\r\n    });\r\n  },\r\n  addOfficeRels: function() {\r\n    var self = this;\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var xform = new RelationshipsXform();\r\n      var xml = xform.toXml([\r\n        {rId: 'rId1', type: RelType.OfficeDocument, target: 'xl/workbook.xml'}\r\n      ]);\r\n      self.zip.append(xml, {name: '/_rels/.rels'});\r\n      resolve();\r\n    });\r\n  },\r\n\r\n  addContentTypes: function() {\r\n    var self = this;\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var model = {\r\n        worksheets: self._worksheets.filter(Boolean)\r\n      };\r\n      var xform = new ContentTypesXform();\r\n      var xml = xform.toXml(model);\r\n      self.zip.append(xml, {name: '[Content_Types].xml'});\r\n      resolve();\r\n    });\r\n  },\r\n  addApp: function() {\r\n    var self = this;\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var model = {\r\n        worksheets: self._worksheets.filter(Boolean)\r\n      };\r\n      var xform = new AppXform();\r\n      var xml = xform.toXml(model);\r\n      self.zip.append(xml, {name: 'docProps/app.xml'});\r\n      resolve();\r\n    });\r\n  },\r\n  addCore: function() {\r\n    var self = this;\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var coreXform = new CoreXform();\r\n      var xml = coreXform.toXml(self);\r\n      self.zip.append(xml, {name: 'docProps/core.xml'});\r\n      resolve();\r\n    });\r\n  },\r\n  addSharedStrings: function() {\r\n    var self = this;\r\n    if (this.sharedStrings.count) {\r\n      return new PromishLib.Promish(function(resolve) {\r\n        var sharedStringsXform = new SharedStringsXform();\r\n        var xml = sharedStringsXform.toXml(self.sharedStrings);\r\n        self.zip.append(xml, {name: '/xl/sharedStrings.xml'});\r\n        resolve();\r\n      });\r\n    } else {\r\n      return PromishLib.Promish.resolve();\r\n    }\r\n  },\r\n  addWorkbookRels: function() {\r\n    var self = this;\r\n    var count = 1;\r\n    var relationships = [\r\n      {rId: 'rId' + (count++), type: RelType.Styles, target: 'styles.xml'},\r\n      {rId: 'rId' + (count++), type: RelType.Theme, target: 'theme/theme1.xml'}\r\n    ];\r\n    if (this.sharedStrings.count) {\r\n      relationships.push(\r\n        {rId: 'rId' + (count++), type: RelType.SharedStrings, target: 'sharedStrings.xml'}\r\n      );\r\n    }\r\n    this._worksheets.forEach(function (worksheet) {\r\n      if (worksheet) {\r\n        worksheet.rId = 'rId' + (count++);\r\n        relationships.push(\r\n          {rId: worksheet.rId, type: RelType.Worksheet, target: 'worksheets/sheet' + worksheet.id + '.xml'}\r\n        );\r\n      }\r\n    });\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var xform = new RelationshipsXform();\r\n      var xml = xform.toXml(relationships);\r\n      self.zip.append(xml, {name: '/xl/_rels/workbook.xml.rels'});\r\n      resolve();\r\n    });\r\n  },\r\n  addWorkbook: function() {\r\n    var zip = this.zip;\r\n    var model = {\r\n      worksheets: this._worksheets.filter(Boolean),\r\n      definedNames: this._definedNames.model,\r\n      views: this.views,\r\n      properties: {}\r\n    };\r\n\r\n    return new PromishLib.Promish(function(resolve) {\r\n      var xform = new WorkbookXform();\r\n      xform.prepare(model);\r\n      zip.append(xform.toXml(model), {name: '/xl/workbook.xml'});\r\n      resolve();\r\n    });\r\n  },\r\n  _finalize: function() {\r\n    var self = this;\r\n    return new PromishLib.Promish(function(resolve, reject) {\r\n      self.stream.on('error', function(error){\r\n        reject(error);\r\n      });\r\n      self.stream.on('finish', function(){\r\n        resolve(self);\r\n      });\r\n      self.zip.on('error', function(error){\r\n        reject(error);\r\n      });\r\n\r\n      self.zip.finalize();\r\n    });\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/utils/shared-strings.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar SharedStrings = module.exports = function() {\r\n  this._values = [];\r\n  this._totalRefs = 0;\r\n  this._hash = {}\r\n};\r\n\r\nSharedStrings.prototype = {\r\n  get count() {\r\n    return this._values.length;\r\n  },\r\n  get values() {\r\n    return this._values;\r\n  },\r\n  get totalRefs() {\r\n    return this._totalRefs;\r\n  },\r\n\r\n  getString: function(index) {\r\n    return this._values[index];\r\n  },\r\n\r\n  add: function(value) {\r\n    var index = this._hash[value];\r\n    if (index === undefined) {\r\n      index = this._hash[value] = this._values.length;\r\n      this._values.push(value);\r\n    }\r\n    this._totalRefs++;\r\n    return index;\r\n  }\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/stream/xlsx/worksheet-writer.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar fs = require('fs');\r\n\r\nvar utils = require('../../utils/utils');\r\nvar colCache = require('../../utils/col-cache');\r\nvar Dimensions = require('../../doc/range');\r\n\r\nvar StringBuf = require('../../utils/string-buf');\r\n\r\nvar Row = require('../../doc/row');\r\nvar Column = require('../../doc/column');\r\n\r\nvar HyperlinkWriter = require('./hyperlink-writer');\r\nvar DataValidations = require('../../doc/data-validations');\r\n\r\nvar xml = new StringBuf();\r\n\r\n// ============================================================================================\r\n// Xforms\r\nvar ListXform = require('../../xlsx/xform/list-xform');\r\nvar DataValidationsXform = require('../../xlsx/xform/sheet/data-validations-xform');\r\nvar SheetPropertiesXform = require('../../xlsx/xform/sheet/sheet-properties-xform');\r\nvar SheetFormatPropertiesXform = require('../../xlsx/xform/sheet/sheet-format-properties-xform');\r\nvar ColXform = require('../../xlsx/xform/sheet/col-xform');\r\nvar RowXform = require('../../xlsx/xform/sheet/row-xform');\r\nvar HyperlinkXform = require('../../xlsx/xform/sheet/hyperlink-xform');\r\nvar SheetViewXform =  require('../../xlsx/xform/sheet/sheet-view-xform');\r\nvar PageMarginsXform =  require('../../xlsx/xform/sheet/page-margins-xform');\r\nvar PageSetupXform =  require('../../xlsx/xform/sheet/page-setup-xform');\r\n\r\n// since prepare and render is functional, we can use singletons\r\nvar xform = {\r\n  dataValidations: new DataValidationsXform(),\r\n  sheetProperties: new SheetPropertiesXform(),\r\n  sheetFormatProperties: new SheetFormatPropertiesXform(),\r\n  columns: new ListXform({tag: 'cols', length: false, childXform: new ColXform()}),\r\n  row: new RowXform(),\r\n  hyperlinks: new ListXform({tag: 'hyperlinks', length: false, childXform: new HyperlinkXform()}),\r\n  sheetViews: new ListXform({tag: 'sheetViews', length: false, childXform: new SheetViewXform()}),\r\n  pageMargins: new PageMarginsXform(),\r\n  pageSeteup: new PageSetupXform()\r\n};\r\n\r\n\r\n// ============================================================================================\r\n\r\nvar WorksheetWriter = module.exports = function(options) {\r\n  // in a workbook, each sheet will have a number\r\n  this.id = options.id;\r\n\r\n  // and a name\r\n  this.name = options.name || 'Sheet' + this.id;\r\n\r\n  // rows are stored here while they need to be worked on.\r\n  // when they are committed, they will be deleted.\r\n  this._rows = [];\r\n\r\n  // column definitions\r\n  this._columns = null;\r\n\r\n  // column keys (addRow convenience): key ==> this._columns index\r\n  this._keys = {};\r\n\r\n  // keep record of all merges\r\n  this._merges = [];\r\n  this._merges.add  = function(){}; // ignore cell instruction\r\n\r\n  // keep record of all hyperlinks\r\n  this._hyperlinkWriter = new HyperlinkWriter(options);\r\n\r\n  // keep a record of dimensions\r\n  this._dimensions = new Dimensions();\r\n\r\n  // first uncommitted row\r\n  this._rowZero = 1;\r\n\r\n  // committed flag\r\n  this.committed = false;\r\n\r\n  // for data validations\r\n  this.dataValidations = new DataValidations();\r\n\r\n  // for default row height, outline levels, etc\r\n  this.properties = Object.assign({}, {\r\n    defaultRowHeight: 15,\r\n    dyDescent: 55,\r\n    outlineLevelCol: 0,\r\n    outlineLevelRow: 0\r\n  }, options.properties);\r\n\r\n  // for all things printing\r\n  this.pageSetup = Object.assign({}, {\r\n    margins: {left: 0.7, right: 0.7, top: 0.75, bottom: 0.75, header: 0.3, footer:  0.3 },\r\n    orientation: 'portrait',\r\n    horizontalDpi: 4294967295,\r\n    verticalDpi: 4294967295,\r\n    fitToPage: !!(options.pageSetup && ((options.pageSetup.fitToWidth || options.pageSetup.fitToHeight) && !options.pageSetup.scale)),\r\n    pageOrder: 'downThenOver',\r\n    blackAndWhite: false,\r\n    draft: false,\r\n    cellComments: 'None',\r\n    errors: 'displayed',\r\n    scale: 100,\r\n    fitToWidth: 1,\r\n    fitToHeight: 1,\r\n    paperSize: undefined,\r\n    showRowColHeaders: false,\r\n    showGridLines: false,\r\n    horizontalCentered: false,\r\n    verticalCentered: false,\r\n    rowBreaks: null,\r\n    colBreaks: null\r\n  }, options.pageSetup);\r\n\r\n  // using shared strings creates a smaller xlsx file but may use more memory\r\n  this.useSharedStrings = options.useSharedStrings || false;\r\n\r\n  this._workbook = options.workbook;\r\n\r\n  // views\r\n  this._views = options.views || [];\r\n\r\n  // start writing to stream now\r\n  this._writeOpenWorksheet();\r\n\r\n  this.startedData = false;\r\n};\r\n\r\nWorksheetWriter.prototype = {\r\n  get workbook() {\r\n    return this._workbook;\r\n  },\r\n\r\n  get stream() {\r\n    if (!this._stream) {\r\n      this._stream = this._workbook._openStream('/xl/worksheets/sheet' + this.id + '.xml');\r\n\r\n      // pause stream to prevent 'data' events\r\n      this._stream.pause();\r\n    }\r\n    return this._stream;\r\n  },\r\n\r\n  // destroy - not a valid operation for a streaming writer\r\n  // even though some streamers might be able to, it's a bad idea.\r\n  destroy: function() {\r\n    throw new Error('Invalid Operation: destroy');\r\n  },\r\n\r\n  commit: function() {\r\n    if (this.committed) {\r\n      return;\r\n    }\r\n    var self = this;\r\n    // commit all rows\r\n    this._rows.forEach(function(cRow) {\r\n      if (cRow) {\r\n        // write the row to the stream\r\n        self._writeRow(cRow);\r\n      }\r\n    });\r\n\r\n    // we _cannot_ accept new rows from now on\r\n    this._rows = null;\r\n\r\n    if (!this.startedData) {\r\n        this._writeOpenSheetData();\r\n    }\r\n    this._writeCloseSheetData();\r\n    this._writeMergeCells();\r\n\r\n    // for some reason, Excel can't handle dimensions at the bottom of the file\r\n    //this._writeDimensions();\r\n\r\n    this._writeHyperlinks();\r\n    this._writeDataValidations();\r\n    this._writePageMargins();\r\n    this._writePageSetup();\r\n    this._writeCloseWorksheet();\r\n\r\n    // signal end of stream to workbook\r\n    this.stream.end();\r\n\r\n    // also commit the hyperlinks if any\r\n    this._hyperlinkWriter.commit();\r\n\r\n    this.committed = true;\r\n  },\r\n\r\n  // return the current dimensions of the writer\r\n  get dimensions() {\r\n    return this._dimensions;\r\n  },\r\n\r\n  get views() {\r\n    return this._views;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Columns\r\n\r\n  // get the current columns array.\r\n  get columns() {\r\n    return this._columns;\r\n  },\r\n\r\n  // set the columns from an array of column definitions.\r\n  // Note: any headers defined will overwrite existing values.\r\n  set columns(value) {\r\n    var self = this;\r\n\r\n    // calculate max header row count\r\n    this._headerRowCount = value.reduce(function(pv,cv) {\r\n      var headerCount = cv.header ? 1 : (cv.headers ? cv.headers.length : 0);\r\n      return Math.max(pv, headerCount)\r\n    }, 0);\r\n\r\n    // construct Column objects\r\n    var count = 1;\r\n    var _columns = this._columns = [];\r\n    value.forEach(function(defn) {\r\n      var column = new Column(self, count++, false);\r\n      _columns.push(column);\r\n      column.defn = defn;\r\n    });\r\n  },\r\n\r\n  // get a single column by col number. If it doesn't exist, it and any gaps before it\r\n  // are created.\r\n  getColumn: function(c) {\r\n    if (typeof c === 'string'){\r\n      // if it matches a key'd column, return that\r\n      var col = this._keys[c];\r\n      if (col) return col;\r\n\r\n      // otherise, assume letter\r\n      c = colCache.l2n(c);\r\n    }\r\n    if (!this._columns) { this._columns = []; }\r\n    if (c > this._columns.length) {\r\n      var n = this._columns.length + 1;\r\n      while (n <= c) {\r\n        this._columns.push(new Column(this, n++));\r\n      }\r\n    }\r\n    return this._columns[c-1];\r\n  },\r\n\r\n  // =========================================================================\r\n  // Rows\r\n  get _nextRow() {\r\n    return this._rowZero + this._rows.length;\r\n  },\r\n\r\n  // iterate over every uncommitted row in the worksheet, including maybe empty rows\r\n  eachRow: function(options, iteratee) {\r\n    if (!iteratee) {\r\n      iteratee = options;\r\n      options = undefined;\r\n    }\r\n    if (options && options.includeEmpty) {\r\n      var n = this._nextRow;\r\n      for (var i = this._rowZero; i < n; i++) {\r\n        iteratee(this.getRow(i), i);\r\n      }\r\n    } else {\r\n      this._rows.forEach(function(row) {\r\n        if (row.hasValues) {\r\n          iteratee(row, row.number);\r\n        }\r\n      });\r\n    }\r\n  },\r\n\r\n  _commitRow: function(cRow) {\r\n    // since rows must be written in order, we commit all rows up till and including cRow\r\n    var found = false;\r\n    while (this._rows.length && !found) {\r\n      var row = this._rows.shift();\r\n      this._rowZero++;\r\n      if (row) {\r\n        this._writeRow(row);\r\n        found = (row.number === cRow.number);\r\n        this._rowZero = row.number + 1;\r\n      }\r\n    }\r\n  },\r\n\r\n  get lastRow() {\r\n    // returns last uncommitted row\r\n    if (this._rows.length) {\r\n      return this._rows[this._rows.length-1];\r\n    } else {\r\n      return undefined;\r\n    }\r\n  },\r\n\r\n  // find a row (if exists) by row number\r\n  findRow: function(rowNumber) {\r\n    var index = rowNumber - this._rowZero;\r\n    return this._rows[index];\r\n  },\r\n\r\n  getRow: function(rowNumber) {\r\n    var index = rowNumber - this._rowZero;\r\n\r\n    // may fail if rows have been comitted\r\n    if (index < 0) {\r\n      throw new Error('Out of bounds: this row has been committed');\r\n    }\r\n    var row = this._rows[index];\r\n    if (!row) {\r\n      this._rows[index] = row = new Row(this, rowNumber);\r\n    }\r\n    return row;\r\n  },\r\n\r\n  addRow: function(value) {\r\n    var row = new Row(this, this._nextRow);\r\n    this._rows[row.number-this._rowZero] = row;\r\n    row.values = value;\r\n    return row;\r\n  },\r\n\r\n  // ================================================================================\r\n  // Cells\r\n\r\n  // returns the cell at [r,c] or address given by r. If not found, return undefined\r\n  findCell: function(r, c) {\r\n    var address = colCache.getAddress(r, c);\r\n    var row = this.findRow(address.row);\r\n    return row ? row.findCell(address.column) : undefined;\r\n  },\r\n\r\n  // return the cell at [r,c] or address given by r. If not found, create a new one.\r\n  getCell: function(r, c) {\r\n    var address = colCache.getAddress(r, c);\r\n    var row = this.getRow(address.row);\r\n    return row._getCell(address);\r\n  },\r\n\r\n  mergeCells: function() {\r\n    // may fail if rows have been comitted\r\n    var dimensions = new Dimensions(Array.prototype.slice.call(arguments, 0)); // convert arguments into Array\r\n\r\n    // check cells aren't already merged\r\n    this._merges.forEach(function(merge) {\r\n      if (merge.intersects(dimensions)) {\r\n        throw new Error('Cannot merge alreay merged cells');\r\n      }\r\n    });\r\n\r\n    // apply merge\r\n    var master = this.getCell(dimensions.top, dimensions.left);\r\n    for (var i = dimensions.top; i <= dimensions.bottom; i++) {\r\n      for (var j = dimensions.left; j <= dimensions.right; j++) {\r\n        if ((i > dimensions.top) || (j > dimensions.left)) {\r\n          this.getCell(i,j).merge(master);\r\n        }\r\n      }\r\n    }\r\n\r\n    // index merge\r\n    this._merges.push(dimensions);\r\n  },\r\n\r\n  // ================================================================================\r\n  _write: function(text) {\r\n    // var xml = stringBufStack.pop();\r\n    xml.reset();\r\n    xml.addText(text);\r\n    this.stream.write(xml);\r\n    //stringBufStack.push(xml);\r\n  },\r\n  _writeSheetProperties: function(xml, properties, pageSetup) {\r\n    var sheetPropertiesModel = {\r\n      tabColor: properties && properties.tabColor,\r\n      pageSetup: pageSetup && pageSetup.fitToPage ? {\r\n        fitToPage: pageSetup.fitToPage\r\n      } : undefined\r\n    };\r\n\r\n    xml.addText(xform.sheetProperties.toXml(sheetPropertiesModel));\r\n  },\r\n  _writeSheetFormatProperties: function(xml, properties) {\r\n    var sheetFormatPropertiesModel = properties ? {\r\n      defaultRowHeight: properties.defaultRowHeight,\r\n      dyDescent: properties.dyDescent,\r\n      outlineLevelCol: properties.outlineLevelCol,\r\n      outlineLevelRow: properties.outlineLevelRow\r\n    } : undefined;\r\n\r\n    xml.addText(xform.sheetFormatProperties.toXml(sheetFormatPropertiesModel));\r\n  },\r\n  _writeOpenWorksheet: function() {\r\n    // var xml = stringBufStack.pop();\r\n    xml.reset();\r\n\r\n    xml.addText('<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>');\r\n    xml.addText('<worksheet xmlns=\"http://schemas.openxmlformats.org/spreadsheetml/2006/main\" xmlns:r=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships\" xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\" mc:Ignorable=\"x14ac\" xmlns:x14ac=\"http://schemas.microsoft.com/office/spreadsheetml/2009/9/ac\">');\r\n\r\n    this._writeSheetProperties(xml, this.properties, this.pageSetup);\r\n\r\n    xml.addText(xform.sheetViews.toXml(this.views));\r\n\r\n    this._writeSheetFormatProperties(xml, this.properties);\r\n\r\n    this.stream.write(xml);\r\n    //stringBufStack.push(xml);\r\n  },\r\n  _writeColumns: function() {\r\n    var cols = Column.toModel(this.columns);\r\n    if (cols) {\r\n      xform.columns.prepare(cols, {styles: this._workbook.styles});\r\n      this.stream.write(xform.columns.toXml(cols));\r\n    }\r\n  },\r\n  _writeOpenSheetData: function() {\r\n    this._write('<sheetData>');\r\n  },\r\n  _writeRow: function(row) {\r\n    var self = this;\r\n\r\n    if (!this.startedData) {\r\n      this._writeColumns();\r\n      this._writeOpenSheetData();\r\n      this.startedData = true;\r\n    }\r\n\r\n    if (row.hasValues || row.height) {\r\n      var model = row.model;\r\n      var options = {\r\n        styles: this._workbook.styles,\r\n        sharedStrings: self.useSharedStrings ? self._workbook.sharedStrings : undefined,\r\n        hyperlinks: this._hyperlinkWriter,\r\n        merges: this._merges\r\n      };\r\n      xform.row.prepare(model, options);\r\n      this.stream.write(xform.row.toXml(model));\r\n    }\r\n  },\r\n  _writeCloseSheetData: function() {\r\n    this._write('</sheetData>');\r\n  },\r\n  _writeMergeCells: function() {\r\n\r\n    if (this._merges.length) {\r\n      // var xml = stringBufStack.pop();\r\n      xml.reset();\r\n      xml.addText('<mergeCells count=\"' + this._merges.length + '\">');\r\n      this._merges.forEach(function(merge) {\r\n        xml.addText('<mergeCell ref=\"' + merge + '\"/>');\r\n      });\r\n      xml.addText('</mergeCells>');\r\n\r\n      this.stream.write(xml);\r\n      //stringBufStack.push(xml);\r\n    }\r\n  },\r\n  _writeHyperlinks: function() {\r\n    this.stream.write(xform.hyperlinks.toXml(this._hyperlinkWriter._hyperlinks));\r\n  },\r\n  _writeDataValidations: function() {\r\n    this.stream.write(xform.dataValidations.toXml(this.dataValidations.model));\r\n  },\r\n  _writePageMargins: function() {\r\n    this.stream.write(xform.pageMargins.toXml(this.pageSetup.margins));\r\n  },\r\n  _writePageSetup: function() {\r\n    this.stream.write(xform.pageSeteup.toXml(this.pageSetup));\r\n  },\r\n  _writeDimensions: function() {\r\n    this._write('<dimension ref=\"' + this._dimensions + '\"/>');\r\n  },\r\n  _writeCloseWorksheet: function() {\r\n    this._write('</worksheet>');\r\n  }\r\n};","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/stream/xlsx/hyperlink-writer.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar utils = require('../../utils/utils');\r\n\r\nvar HyperlinkWriter = module.exports = function(options) {\r\n  // in a workbook, each sheet will have a number\r\n  this.id = options.id;\r\n\r\n  // keep record of all hyperlinks\r\n  this._hyperlinks = [];\r\n\r\n  this._workbook = options.workbook;\r\n};\r\nHyperlinkWriter.prototype = {\r\n\r\n  get stream() {\r\n    if (!this._stream) {\r\n      this._stream = this._workbook._openStream('/xl/worksheets/_rels/sheet' + this.id + '.xml.rels');\r\n    }\r\n    return this._stream;\r\n  },\r\n\r\n  get length() {\r\n    return this._hyperlinks.length;\r\n  },\r\n\r\n  each: function(fn) {\r\n    return this._hyperlinks.forEach(fn);\r\n  },\r\n\r\n  push: function(hyperlink) {\r\n    // if first hyperlink, must open stream and write xml intro\r\n    if (!this._hyperlinks.length) {\r\n      this._writeOpen();\r\n    }\r\n\r\n    // store sheet stuff for later\r\n    this._hyperlinks.push({\r\n      address: hyperlink.address,\r\n      rId: hyperlink.rId\r\n    });\r\n\r\n    // and write to stream\r\n    this._writeRelationship(hyperlink);\r\n  },\r\n\r\n  commit: function() {\r\n    if (this._hyperlinks.length) {\r\n      // write xml utro\r\n      this._writeClose();\r\n      // and close stream\r\n      this.stream.end();\r\n    }\r\n  },\r\n\r\n  // ================================================================================\r\n  _writeOpen: function() {\r\n    this.stream.write(\r\n      '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>' +\r\n      '<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">');\r\n  },\r\n  _writeRelationship: function(hyperlink) {\r\n    this.stream.write(\r\n      '<Relationship' +\r\n      ' Id=\"' + hyperlink.rId + '\"' +\r\n      ' Type=\"' + hyperlink.type + '\"' +\r\n      ' Target=\"' + utils.xmlEncode(hyperlink.target) + '\"' +\r\n      ' TargetMode=\"' + hyperlink.targetMode + '\"' +\r\n      '/>');\r\n  },\r\n  _writeClose: function() {\r\n    this.stream.write('</Relationships>');\r\n  }\r\n};","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/stream/xlsx/workbook-reader.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar fs = require('fs');\r\nvar events = require('events');\r\nvar Stream = require('stream');\r\nvar unzip = require('unzip2');\r\nvar Sax = require('sax');\r\n\r\nvar utils = require('../../utils/utils');\r\n//var Enums = require('../../doc/enums');\r\n//var StreamBuf = require('../../utils/stream-buf');\r\n//var StutteredPipe = require('../../utils/stuttered-pipe');\r\nvar FlowControl = require('../../utils/flow-control');\r\n//var AutoDrain = require('../../utils/auto-drain');\r\n\r\n//var RelType = require('../../xlsx/rel-type');\r\nvar StyleManager = require('../../xlsx/xform/style/styles-xform');\r\n//var SharedStrings = require('../../utils/shared-strings');\r\n\r\nvar WorksheetReader = require('./worksheet-reader');\r\nvar HyperlinkReader = require('./hyperlink-reader');\r\n\r\nvar WorkbookReader = module.exports = function(options) {\r\n  this.options = options = options || {};\r\n\r\n  // until we actually parse a styles.xml file, just assume we're not handling styles\r\n  // (but we do need to handle dates)\r\n  this.styles = new StyleManager.Mock();\r\n\r\n  // worksheet readers, indexed by sheetNo\r\n  this.worksheetReaders = {};\r\n\r\n  // hyperlink readers, indexed by sheetNo\r\n  this.hyperlinkReaders = {};\r\n\r\n  // count the open readers\r\n  this.readers = 0;\r\n\r\n  // end of stream check\r\n  this.atEnd = false;\r\n};\r\n\r\nutils.inherits(WorkbookReader, events.EventEmitter, {\r\n  _getStream: function(input) {\r\n    if (input instanceof Stream.Readable) {\r\n      return input;\r\n    }\r\n    if (typeof input === 'string') {\r\n      return fs.createReadStream(input);\r\n    }\r\n    throw new Error('Could not recognise input');\r\n  },\r\n\r\n  get flowControl() {\r\n    if (!this._flowControl) {\r\n      this._flowControl = new FlowControl(this.options);\r\n    }\r\n    return this._flowControl;\r\n  },\r\n\r\n  options: {\r\n    entries: ['emit'],\r\n    sharedStrings: ['cache', 'emit'],\r\n    styles: ['cache'],\r\n    hyperlinks: ['cache', 'emit'],\r\n    worksheets: ['emit']\r\n  },\r\n  read: function(input, options) {\r\n    var self = this;\r\n    var stream = this.stream = this._getStream(input);\r\n    var zip = this.zip = unzip.Parse();\r\n\r\n    zip.on('entry',function (entry) {\r\n      // console.log(entry.path)\r\n      var match, sheetNo;\r\n      switch(entry.path) {\r\n        case '_rels/.rels':\r\n        case 'xl/workbook.xml':\r\n        case 'xl/_rels/workbook.xml.rels':\r\n          entry.autodrain();\r\n          break;\r\n        case 'xl/sharedStrings.xml':\r\n          self._parseSharedStrings(entry, options);\r\n          break;\r\n        case 'xl/styles.xml':\r\n          self._parseStyles(entry, options);\r\n          break;\r\n        default:\r\n          if (entry.path.match(/xl\\/worksheets\\/sheet\\d+\\.xml/)) {\r\n            match = entry.path.match(/xl\\/worksheets\\/sheet(\\d+)\\.xml/);\r\n            sheetNo = match[1];\r\n            self._parseWorksheet(entry, sheetNo, options);\r\n          } else if (entry.path.match(/xl\\/worksheets\\/_rels\\/sheet\\d+\\.xml.rels/)) {\r\n            match = entry.path.match(/xl\\/worksheets\\/_rels\\/sheet(\\d+)\\.xml.rels/);\r\n            sheetNo = match[1];\r\n            self._parseHyperlinks(entry, sheetNo, options);\r\n          } else {\r\n            entry.autodrain();\r\n          }\r\n          break;\r\n      }\r\n    });\r\n\r\n    zip.on('close', function () {\r\n      self.emit('end');\r\n      self.atEnd = true;\r\n      if (!self.readers) {\r\n        self.emit('finished');\r\n      }\r\n    });\r\n\r\n    // Pipe stream into top flow-control\r\n    // this.flowControl.pipe(zip);\r\n    stream.pipe(zip);\r\n  },\r\n  _emitEntry: function(options, payload) {\r\n    if (options.entries === 'emit') {\r\n      this.emit('entry', payload);\r\n    }\r\n  },\r\n  _parseSharedStrings: function(entry, options) {\r\n    this._emitEntry(options, {type: 'shared-strings'});\r\n    var self = this;\r\n    var sharedStrings = null;\r\n    switch(options.sharedStrings) {\r\n      case 'cache':\r\n        sharedStrings = this.sharedStrings = [];\r\n        break;\r\n      case 'emit':\r\n        break;\r\n      default:\r\n        entry.autodrain();\r\n        return;\r\n    }\r\n\r\n    var parser = Sax.createStream(true, {});\r\n    var inT = false;\r\n    var t = null;\r\n    var index = 0;\r\n    parser.on('opentag', function(node) {\r\n      if (node.name === 't') {\r\n        t = null;\r\n        inT = true;\r\n      }\r\n    });\r\n    parser.on('closetag', function (name) {\r\n      if (inT && (name === 't')) {\r\n        if (sharedStrings) {\r\n          sharedStrings.push(t);\r\n        } else {\r\n          self.emit('shared-string', { index: index++, text: t});\r\n        }\r\n        t = null;\r\n      }\r\n    });\r\n    parser.on('text', function (text) {\r\n      t = t ? t + text : text;\r\n    });\r\n    parser.on('error', function (error) {\r\n      self.emit('error', error);\r\n    });\r\n    entry.pipe(parser);\r\n  },\r\n  _parseStyles: function(entry, options) {\r\n    this._emitEntry(options, {type: 'styles'});\r\n    if (options.styles !== 'cache') {\r\n      entry.autodrain();\r\n      return;\r\n    }\r\n    this.styles = new StyleManager();\r\n    this.styles.parse(entry);\r\n  },\r\n  _getReader: function(Type, collection, sheetNo) {\r\n    var self = this;\r\n    var reader = collection[sheetNo];\r\n    if (!reader) {\r\n      reader = new Type(this, sheetNo);\r\n      self.readers++;\r\n      reader.on('finished', function() {\r\n        if (!--self.readers) {\r\n          if (self.atEnd) {\r\n            self.emit('finished');\r\n          }\r\n        }\r\n      });\r\n      collection[sheetNo] = reader;\r\n    }\r\n    return reader;\r\n  },\r\n  _parseWorksheet: function(entry, sheetNo, options) {\r\n    this._emitEntry(options, {type: 'worksheet', id: sheetNo});\r\n    var worksheetReader = this._getReader(WorksheetReader, this.worksheetReaders, sheetNo);\r\n    if (options.worksheets === 'emit') {\r\n      this.emit('worksheet', worksheetReader);\r\n    }\r\n    worksheetReader.read(entry, options, this.hyperlinkReaders[sheetNo]);\r\n  },\r\n  _parseHyperlinks: function(entry, sheetNo, options) {\r\n    this._emitEntry(options, {type: 'hyerlinks', id: sheetNo});\r\n    var hyperlinksReader = this._getReader(HyperlinkReader, this.hyperlinkReaders, sheetNo);\r\n    if (options.hyperlinks === 'emit') {\r\n      this.emit('hyperlinks', hyperlinksReader);\r\n    }\r\n    hyperlinksReader.read(entry, options);\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/utils/flow-control.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar events = require('events');\r\nvar PromishLib = require('./promish');\r\n\r\nvar utils = require('./utils');\r\n\r\n// =============================================================================\r\n// FlowControl - Used to slow down streaming to manageable speed\r\n// Implements a subset of Stream.Duplex: pipe() and write()\r\nvar FlowControl = module.exports = function(options) {\r\n  this.options = options = options || {};\r\n\r\n  // Buffer queue\r\n  this.queue = [];\r\n\r\n  // Consumer streams\r\n  this.pipes = [];\r\n\r\n  // Down-stream flow-control instances\r\n  this.children = [];\r\n\r\n  // Up-stream flow-control instances\r\n  this.parent = options.parent;\r\n\r\n  // Ensure we don't flush more than once at a time\r\n  this.flushing = false;\r\n\r\n  // determine timeout for flow control delays\r\n  if (options.gc) {\r\n    var gc = options.gc;\r\n    if (gc.getTimeout) {\r\n      this.getTimeout = gc.getTimeout;\r\n    } else {\r\n      // heap size below which we don't bother delaying\r\n      var threshold = gc.threshold !== undefined ? gc.threshold : 150000000;\r\n      // convert from heapsize to ms timeout\r\n      var divisor = gc.divisor !== undefined ? gc.divisor : 500000;\r\n      this.getTimeout = function() {\r\n        var memory = process.memoryUsage();\r\n        var heapSize = memory.heapTotal;\r\n        return (heapSize < threshold) ? 0 : Math.floor(heapSize / divisor);\r\n      };\r\n    }\r\n  } else {\r\n    this.getTimeout = null;\r\n  }\r\n};\r\n\r\nutils.inherits(FlowControl, events.EventEmitter, {\r\n  get name() {\r\n    return [\r\n      'FlowControl',\r\n      this.parent ? 'Child' : 'Root',\r\n      this.corked ? 'corked' : 'open'\r\n    ].join(' ');\r\n  },\r\n  get corked() {\r\n    // We remain corked while we have children and at least one has data to consume\r\n    return (this.children.length > 0) &&\r\n      this.children.some(function(child) { return child.queue && child.queue.length; });\r\n  },\r\n  get stem() {\r\n    // the decision to stem the incoming data depends on whether the children are corked\r\n    // and how many buffers we have backed up\r\n    return this.corked || !this.queue || (this.queue.length > 2);\r\n  },\r\n\r\n  _write: function(dst, data, encoding) {\r\n    // Write to a single destination and return a promise    \r\n    // console.log(this.name + ' _write: ' + data.length);\r\n\r\n    return new PromishLib.Promish(function(resolve, reject) {\r\n      dst.write(data, encoding, function(error) {\r\n        if (error) {\r\n          // console.log(self.name + ' _write error: ' + error.message);            \r\n          reject(error);\r\n        } else {\r\n          // console.log(self.name + ' _write complete');            \r\n          resolve();\r\n        }\r\n      });\r\n    });\r\n  },\r\n\r\n  _pipe: function(chunk) {\r\n    var self = this;\r\n\r\n    // Write chunk to all pipes. A chunk with no data is the end\r\n    var promises = [];\r\n    this.pipes.forEach(function(pipe) {\r\n      if (chunk.data) {\r\n        if (pipe.sync) {\r\n          pipe.stream.write(chunk.data, chunk.encoding);\r\n        } else {\r\n          promises.push(self._write(pipe.stream, chunk.data, chunk.encoding));\r\n        }\r\n      } else {\r\n        pipe.stream.end();\r\n      }\r\n    });\r\n    if (!promises.length) {\r\n      promises.push(PromishLib.Promish.resolve());\r\n    }\r\n    return PromishLib.Promish.all(promises)\r\n      .then(function() {\r\n        try {\r\n          chunk.callback();\r\n        }\r\n        catch(e) {\r\n        }\r\n      });\r\n  },\r\n  _animate: function() {\r\n    var count = 0;\r\n    var seq = ['|', '/', '-', '\\\\'];\r\n    //var cr = '\\033[0G';\r\n    var cr = '\\u001b[0G';\r\n    return setInterval(function() {\r\n      process.stdout.write(seq[count++ % 4] + cr);\r\n    }, 100);\r\n  },\r\n  _delay: function() {\r\n    // in certain situations it may be useful to delay processing (e.g. for GC)\r\n    var timeout = this.getTimeout && this.getTimeout();\r\n    var self = this;\r\n    if (timeout) {\r\n      return new PromishLib.Promish(function(resolve, reject) {\r\n        var anime = self._animate();\r\n        setTimeout(function() {\r\n          clearInterval(anime);\r\n          resolve();\r\n        }, timeout);\r\n      });\r\n    } else {\r\n      return PromishLib.Promish.resolve();\r\n    }\r\n  },\r\n\r\n  _flush: function() {\r\n    // If/while not corked and we have buffers to send, send them\r\n    var self = this;\r\n    // console.log(this.name + ' flush:' + (this.queue && this.queue.length));\r\n\r\n    if (this.queue && !this.flushing && !this.corked) {\r\n      if (this.queue.length) {\r\n        this.flushing = true;\r\n        self._delay()\r\n          .then(function() {\r\n            return self._pipe(self.queue.shift());\r\n          })\r\n          .then(function() {\r\n            setImmediate(function() {\r\n              self.flushing = false;\r\n              self._flush();\r\n            });\r\n          });\r\n      }\r\n\r\n      if (!this.stem) {\r\n        // Signal up-stream that we're ready for more data\r\n        // console.log(self.name + ' emitting drain');\r\n        self.emit('drain');\r\n      }\r\n    }\r\n  },\r\n\r\n  write: function(data, encoding, callback) {\r\n    // Called by up-stream pipe\r\n    if (encoding instanceof Function) {\r\n      callback = encoding;\r\n      encoding = 'utf8';\r\n    }\r\n    callback = callback || utils.nop;\r\n\r\n    if (!this.queue) {\r\n      throw new Error('Cannot write to stream after end');\r\n    }\r\n\r\n    // Always queue chunks and then flush\r\n    // console.log(this.name + ' write: ' + data.length);\r\n    this.queue.push({\r\n      data: data,\r\n      encoding: encoding,\r\n      callback: callback\r\n    });\r\n    this._flush();\r\n\r\n    // restrict further incoming data if we have backed up buffers or\r\n    // the children are still busy\r\n    var stemFlow = this.corked || (this.queue.length > 3);\r\n    return !stemFlow;\r\n  },\r\n\r\n  end: function(chunk, encoding, callback) {\r\n    // Signal from up-stream \r\n    var self = this;\r\n    // console.log(this.name + 'End')\r\n    this.queue.push({\r\n      callback: function() {\r\n        self.queue = null;\r\n        self.emit('finish');\r\n      }\r\n    });\r\n    this._flush();\r\n  },\r\n\r\n  pipe: function(stream, options) {\r\n    options = options || {};\r\n\r\n    // some streams don't call callbacks\r\n    var sync = options.sync || false;\r\n\r\n    this.pipes.push({\r\n      stream: stream,\r\n      sync: sync\r\n    });\r\n  },\r\n  unpipe: function(stream) {\r\n    this.pipes = this.pipes.filter(function(pipe) {\r\n      return pipe.stream !== stream;\r\n    });\r\n  },\r\n\r\n  createChild: function() {\r\n    // Create a down-stream flow-control\r\n    var self = this;\r\n    var options = Object.assign({parent: this}, this.options);\r\n    var child = new FlowControl(options);\r\n    this.children.push(child);\r\n\r\n    child.on('drain', function() {\r\n      // a child is ready for more\r\n      self._flush();\r\n    });\r\n\r\n    child.on('finish', function() {\r\n      // One child has finished it's stream. Remove it and continue\r\n      self.children = self.children.filter(function(item) {\r\n        return item !== child;\r\n      });\r\n      self._flush();\r\n    });\r\n\r\n    return child;\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/stream/xlsx/worksheet-reader.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the 'Software'), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n *\r\n */\r\n'use strict';\r\n\r\nvar fs = require('fs');\r\nvar events = require('events');\r\nvar Sax = require('sax');\r\n\r\nvar utils = require('../../utils/utils');\r\nvar colCache = require('../../utils/col-cache');\r\n//var Enums = require('../../doc/enums');\r\nvar Dimensions = require('../../doc/range');\r\n\r\nvar Row = require('../../doc/row');\r\nvar Column = require('../../doc/column');\r\n\r\nvar WorksheetReader = module.exports = function(workbook, id) {\r\n  this.workbook = workbook;\r\n  this.id = id;\r\n\r\n  // and a name\r\n  this.name = 'Sheet' + this.id;\r\n\r\n  // column definitions\r\n  this._columns = null;\r\n  this._keys = {};\r\n\r\n  // keep a record of dimensions\r\n  this._dimensions = new Dimensions();\r\n};\r\n\r\nutils.inherits(WorksheetReader, events.EventEmitter, {\r\n\r\n  // destroy - not a valid operation for a streaming writer\r\n  // even though some streamers might be able to, it's a bad idea.\r\n  destroy: function() {\r\n    throw new Error('Invalid Operation: destroy');\r\n  },\r\n\r\n  // return the current dimensions of the writer\r\n  get dimensions() {\r\n    return this._dimensions;\r\n  },\r\n\r\n  // =========================================================================\r\n  // Columns\r\n\r\n  // get the current columns array.\r\n  get columns() {\r\n    return this._columns;\r\n  },\r\n\r\n  // get a single column by col number. If it doesn't exist, it and any gaps before it\r\n  // are created.\r\n  getColumn: function(c) {\r\n    if (typeof c === 'string'){\r\n      // if it matches a key'd column, return that\r\n      var col = this._keys[c];\r\n      if (col) { return col; }\r\n\r\n      // otherise, assume letter\r\n      c = colCache.l2n(c);\r\n    }\r\n    if (!this._columns) { this._columns = []; }\r\n    if (c > this._columns.length) {\r\n      var n = this._columns.length + 1;\r\n      while (n <= c) {\r\n        this._columns.push(new Column(this, n++));\r\n      }\r\n    }\r\n    return this._columns[c-1];\r\n  },\r\n\r\n  // =========================================================================\r\n  // Read\r\n\r\n  _emitRow: function(row) {\r\n    this.emit('row', row);\r\n  },\r\n\r\n  read: function(entry, options, hyperlinkReader) {\r\n    var self = this;\r\n\r\n    var emitSheet = false;\r\n    var prepSheet = false;\r\n    var emitHyperlinks = false;\r\n    var hyperlinks = null;\r\n    switch (options.worksheets) {\r\n      case 'emit':\r\n        emitSheet = true;\r\n        break;\r\n      case 'prep':\r\n        prepSheet = true;\r\n        break;\r\n    }\r\n    switch(options.hyperlinks) {\r\n      case 'emit':\r\n        emitHyperlinks = true;\r\n        break;\r\n      case 'cache':\r\n        this.hyperlinks = hyperlinks = {};\r\n        break;\r\n    }\r\n    if (!emitSheet && !emitHyperlinks && !hyperlinks) {\r\n      entry.autodrain();\r\n      return;\r\n    }\r\n\r\n    // references\r\n    var sharedStrings = this.workbook.sharedStrings;\r\n    var styles = this.workbook.styles;\r\n\r\n    // xml position\r\n    var inCols = false;\r\n    var inRows = false;\r\n    var inHyperlinks = false;\r\n\r\n    // parse state\r\n    var cols = null;\r\n    var row = null;\r\n    var c = null;\r\n    var current = null;\r\n\r\n    var parser = Sax.createStream(true, {});\r\n    parser.on('opentag', function(node) {\r\n      if (emitSheet) {\r\n        switch (node.name) {\r\n          case 'cols':\r\n            inCols = true;\r\n            cols = [];\r\n            break;\r\n          case 'sheetData':\r\n            inRows = true;\r\n            break;\r\n\r\n          case 'col':\r\n            if (inCols) {\r\n              cols.push({\r\n                min: parseInt(node.attributes.min),\r\n                max: parseInt(node.attributes.max),\r\n                width: parseFloat(node.attributes.width),\r\n                styleId: parseInt(node.attributes.style || '0')\r\n              });\r\n            }\r\n            break;\r\n\r\n          case 'row':\r\n            if (inRows) {\r\n              var r = parseInt(node.attributes.r);\r\n              row = new Row(self, r);\r\n              if (node.attributes.ht) {\r\n                row.height = parseFloat(node.attributes.ht);\r\n              }\r\n              if (node.attributes.s) {\r\n                var styleId = parseInt(node.attributes.s);\r\n                row.style = styles.getStyleModel(styleId);\r\n              }\r\n            }\r\n            break;\r\n          case 'c':\r\n            if (row) {\r\n              c = {\r\n                ref: node.attributes.r,\r\n                s: parseInt(node.attributes.s),\r\n                t: node.attributes.t\r\n              };\r\n            }\r\n            break;\r\n          case 'f':\r\n            if (c) {\r\n              current = c.f = { text: '' };\r\n            }\r\n            break;\r\n          case 'v':\r\n            if (c) {\r\n              current = c.v = { text: '' };\r\n            }\r\n            break;\r\n          case 'mergeCell':\r\n        }\r\n      }\r\n\r\n\r\n      // =================================================================\r\n      //\r\n      if (emitHyperlinks || hyperlinks) {\r\n        switch (node.name) {\r\n          case 'hyperlinks':\r\n            inHyperlinks = true;\r\n            break;\r\n          case 'hyperlink':\r\n            if (inHyperlinks) {\r\n              var hyperlink = {\r\n                ref: node.attributes.ref,\r\n                rId: node.attributes['r:id']\r\n              };\r\n              if (emitHyperlinks) {\r\n                self.emit('hyperlink', hyperlink);\r\n              } else {\r\n                hyperlinks[hyperlink.ref] = hyperlink;\r\n              }\r\n            }\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n    // only text data is for sheet values\r\n    parser.on('text', function (text) {\r\n      if (emitSheet) {\r\n        if (current) {\r\n          current.text += text;\r\n        }\r\n      }\r\n    });\r\n\r\n    parser.on('closetag', function(name) {\r\n      if (emitSheet) {\r\n        switch (name) {\r\n          case 'cols':\r\n            inCols = false;\r\n            self._columns = Column.fromModel(cols);\r\n            break;\r\n          case 'sheetData':\r\n            inRows = false;\r\n            break;\r\n\r\n          case 'row':\r\n            self._dimensions.expandRow(row);\r\n            self._emitRow(row);\r\n            row = null;\r\n            break;\r\n\r\n          case 'c':\r\n            if (row && c) {\r\n              var address = colCache.decodeAddress(c.ref);\r\n              var cell = row.getCell(address.col);\r\n              if (c.s) {\r\n                cell.style = self.workbook.styles.getStyleModel(c.s);\r\n              }\r\n\r\n              if (c.f) {\r\n                var value = {\r\n                  formula: c.f.text\r\n                };\r\n                if (c.v) {\r\n                  if (c.t === 'str') {\r\n                    value.result = utils.xmlDecode(c.v.text);\r\n                  } else {\r\n                    value.result = parseFloat(c.v.text);\r\n                  }\r\n                }\r\n                cell.value = value;\r\n              } else if (c.v) {\r\n                switch(c.t) {\r\n                  case 's':\r\n                    var index = parseInt(c.v.text);\r\n                    if (sharedStrings) {\r\n                      cell.value = sharedStrings[index];\r\n                    } else {\r\n                      cell.value = {\r\n                        sharedString: index\r\n                      };\r\n                    }\r\n                    break;\r\n                  case 'str':\r\n                    cell.value = utils.xmlDecode(c.v.text);\r\n                    break;\r\n                  default:\r\n                    if (utils.isDateFmt(cell.numFmt)) {\r\n                      cell.value = utils.excelToDate(parseFloat(c.v.text));\r\n                    } else {\r\n                      cell.value = parseFloat(c.v.text);\r\n                    }\r\n                    break;\r\n                }\r\n              }\r\n              c = null;\r\n            }\r\n            break;\r\n        }\r\n      }\r\n      if (emitHyperlinks || hyperlinks) {\r\n        switch (name) {\r\n          case 'hyperlinks':\r\n            inHyperlinks = false;\r\n            break;\r\n        }\r\n      }\r\n    });\r\n    parser.on('error', function (error) {\r\n      self.emit('error', error);\r\n    });\r\n    parser.on('end', function() {\r\n      self.emit('finished');\r\n    });\r\n\r\n    // create a down-stream flow-control to regulate the stream\r\n    var flowControl = this.workbook.flowControl.createChild();\r\n    flowControl.pipe(parser, {sync: true});\r\n    entry.pipe(flowControl);\r\n  }\r\n});\r\n","/home/travis/build/npmtest/node-npmtest-exceljs/exceljs/lib/stream/xlsx/hyperlink-reader.js":"/**\r\n * Copyright (c) 2015 Guyon Roche\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n * THE SOFTWARE.\r\n * \r\n */\r\n'use strict';\r\n\r\nvar events = require('events');\r\nvar Sax = require('sax');\r\n\r\nvar utils = require('../../utils/utils');\r\nvar Enums = require('../../doc/enums');\r\n\r\nvar HyperlinkReader = module.exports = function(workbook, id) {\r\n    // in a workbook, each sheet will have a number\r\n    this.id = id;\r\n    \r\n    this._workbook = workbook;    \r\n};\r\n\r\nutils.inherits(HyperlinkReader, events.EventEmitter, {\r\n    \r\n    get count() {\r\n        return this.hyperlinks && this.hyperlinks.length || 0;\r\n    },\r\n    \r\n    each: function(fn) {\r\n        return this.hyperlinks.forEach(fn);\r\n    },\r\n    \r\n    read: function(entry, options) {\r\n        var self = this;\r\n        var emitHyperlinks = false;\r\n        var hyperlinks = null;\r\n        switch(options.hyperlinks) {\r\n            case 'emit':\r\n                emitHyperlinks = true;\r\n                break;\r\n            case 'cache':\r\n                this.hyperlinks = hyperlinks = {};\r\n                break;\r\n        }\r\n        if (!emitHyperlinks && !hyperlinks) {\r\n            entry.autodrain();\r\n            return;\r\n        }\r\n        \r\n        var parser = Sax.createStream(true, {});\r\n        parser.on('opentag', function(node) {\r\n            if (node.name === 'Relationship') {\r\n                var rId = node.attributes.Id;\r\n                switch (node.attributes.Type) {\r\n                    case XLSX.RelType.Hyperlink:\r\n                        var relationship = {\r\n                            type: Enums.RelationshipType.Styles,\r\n                            rId: rId,\r\n                            target: node.attributes.Target,\r\n                            targetMode: node.attributes.TargetMode\r\n                        };\r\n                        if (emitHyperlinks) {\r\n                            self.emit('hyperlink', relationship);\r\n                        } else {\r\n                            hyperlinks[relationship.rId] = relationship;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        });\r\n        parser.on('end', function() {\r\n            self.emit('finished');\r\n        });\r\n        \r\n        // create a down-stream flow-control to regulate the stream\r\n        var flowControl = this.workbook.flowControl.createChild();\r\n        flowControl.pipe(parser, {sync: true});\r\n        entry.pipe(flowControl);\r\n    }\r\n});"}